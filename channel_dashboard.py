#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è Telegram Channel Exporter
"""

import asyncio
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.layout import Layout
from rich.live import Live
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.align import Align
from rich.columns import Columns
from rich import box
from rich.prompt import Prompt, Confirm

from analytics import AnalyticsEngine, AnalyticsReporter


@dataclass
class ChannelStatus:
    """–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞"""
    name: str
    last_check: Optional[datetime]
    total_messages: int
    media_size_mb: float
    status: str  # "active", "inactive", "error", "never_checked"
    last_export: Optional[datetime]
    export_errors: int
    is_selected: bool = False


class ChannelDashboard:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, console: Console):
        self.console = console
        self.analytics_engine = AnalyticsEngine(console)
        self.analytics_reporter = AnalyticsReporter(console)
        self.channels_status: Dict[str, ChannelStatus] = {}
        self.selected_channels: List[str] = []
        self.current_page = 0
        self.channels_per_page = 10
        self.sort_by = "name"  # "name", "messages", "size", "last_check"
        self.sort_reverse = False
        self.filter_status = "all"  # "all", "active", "inactive", "error"
        self.search_query = ""
        
    def update_channels_status(self, channels: List[Any], stats: Any, export_base_dir: Path):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        self.channels_status.clear()
        
        for channel in channels:
            channel_dir = export_base_dir / self._sanitize_filename(channel.title)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = "never_checked"
            if hasattr(channel, 'last_check') and channel.last_check:
                last_check = datetime.fromisoformat(channel.last_check) if isinstance(channel.last_check, str) else channel.last_check
                if last_check > datetime.now() - timedelta(days=1):
                    status = "active"
                elif last_check > datetime.now() - timedelta(days=7):
                    status = "inactive"
                else:
                    status = "error"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–µ–¥–∏–∞
            media_size = 0.0
            if channel_dir.exists():
                media_size = self.analytics_engine._calculate_media_size(channel_dir)
            
            self.channels_status[channel.title] = ChannelStatus(
                name=channel.title,
                last_check=datetime.fromisoformat(channel.last_check) if hasattr(channel, 'last_check') and channel.last_check else None,
                total_messages=getattr(channel, 'total_messages', 0),
                media_size_mb=media_size,
                status=status,
                last_export=datetime.now() if hasattr(channel, 'last_export') else None,
                export_errors=getattr(channel, 'export_errors', 0),
                is_selected=channel.title in self.selected_channels
            )
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        import re
        sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
        if len(sanitized) > 100:
            sanitized = sanitized[:100] + "..."
        return sanitized
    
    def create_dashboard_layout(self) -> Layout:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫–µ—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main", ratio=1),
            Layout(name="footer", size=3)
        )
        
        layout["main"].split_row(
            Layout(name="channels", ratio=2),
            Layout(name="analytics", ratio=1)
        )
        
        return layout
    
    def render_header(self) -> Panel:
        """–†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        title = Text("üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤", style="bold blue")
        subtitle = Text(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels_status)} | –í—ã–±—Ä–∞–Ω–æ: {len(self.selected_channels)}", style="dim")
        
        return Panel(
            Align.center(f"{title}\n{subtitle}"),
            border_style="blue"
        )
    
    def render_channels_table(self) -> Table:
        """–†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
        filtered_channels = self._filter_and_sort_channels()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        start_idx = self.current_page * self.channels_per_page
        end_idx = start_idx + self.channels_per_page
        page_channels = filtered_channels[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = Table(
            title=f"–ö–∞–Ω–∞–ª—ã (—Å—Ç—Ä. {self.current_page + 1}/{(len(filtered_channels) + self.channels_per_page - 1) // self.channels_per_page})",
            box=box.ROUNDED,
            show_header=True,
            header_style="bold magenta"
        )
        
        table.add_column("‚úì", width=2, justify="center")
        table.add_column("–ö–∞–Ω–∞–ª", style="cyan", min_width=20)
        table.add_column("–°—Ç–∞—Ç—É—Å", width=8, justify="center")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", justify="right", style="green")
        table.add_column("–†–∞–∑–º–µ—Ä (–ú–ë)", justify="right", style="yellow")
        table.add_column("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", style="dim")
        
        for i, channel_name in enumerate(page_channels):
            if channel_name not in self.channels_status:
                continue
                
            channel = self.channels_status[channel_name]
            
            # –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–º
            status_style = {
                "active": "green",
                "inactive": "yellow", 
                "error": "red",
                "never_checked": "dim"
            }.get(channel.status, "white")
            
            status_text = {
                "active": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω",
                "inactive": "üü° –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
                "error": "üî¥ –û—à–∏–±–∫–∞",
                "never_checked": "‚ö™ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
            }.get(channel.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –ß–µ–∫–±–æ–∫—Å
            checkbox = "‚òë" if channel.is_selected else "‚òê"
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            last_check_str = "–ù–∏–∫–æ–≥–¥–∞"
            if channel.last_check:
                if channel.last_check.date() == datetime.now().date():
                    last_check_str = channel.last_check.strftime("%H:%M")
                else:
                    last_check_str = channel.last_check.strftime("%d.%m.%Y")
            
            table.add_row(
                checkbox,
                channel.name,
                Text(status_text, style=status_style),
                f"{channel.total_messages:,}",
                f"{channel.media_size_mb:.1f}",
                last_check_str
            )
        
        return table
    
    def render_analytics_panel(self) -> Panel:
        """–†–µ–Ω–¥–µ—Ä –ø–∞–Ω–µ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        if not self.channels_status:
            return Panel("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", title="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", border_style="blue")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_channels = len(self.channels_status)
        active_channels = sum(1 for ch in self.channels_status.values() if ch.status == "active")
        total_messages = sum(ch.total_messages for ch in self.channels_status.values())
        total_size = sum(ch.media_size_mb for ch in self.channels_status.values())
        selected_count = len(self.selected_channels)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_table = Table(show_header=False, box=box.SIMPLE)
        stats_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        stats_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green", justify="right")
        
        stats_table.add_row("–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤", f"{total_channels}")
        stats_table.add_row("–ê–∫—Ç–∏–≤–Ω—ã—Ö", f"{active_channels}")
        stats_table.add_row("–í—ã–±—Ä–∞–Ω–æ", f"{selected_count}")
        stats_table.add_row("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", f"{total_messages:,}")
        stats_table.add_row("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{total_size:.1f} –ú–ë")
        
        # –¢–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        top_channels = sorted(
            self.channels_status.values(),
            key=lambda x: x.total_messages,
            reverse=True
        )[:5]
        
        if top_channels:
            top_table = Table(title="–¢–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤", show_header=False, box=box.SIMPLE)
            top_table.add_column("–ö–∞–Ω–∞–ª", style="cyan")
            top_table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="green", justify="right")
            
            for channel in top_channels:
                if channel.total_messages > 0:
                    top_table.add_row(channel.name, f"{channel.total_messages:,}")
        
            content = f"{stats_table}\n\n{top_table}"
        else:
            content = str(stats_table)
        
        return Panel(content, title="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", border_style="blue")
    
    def render_footer(self) -> Panel:
        """–†–µ–Ω–¥–µ—Ä –ø–æ–¥–≤–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        commands = [
            "‚Üë‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è",
            "Space - –≤—ã–±—Ä–∞—Ç—å/—Å–Ω—è—Ç—å",
            "A - –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            "D - —Å–Ω—è—Ç—å –≤—Å–µ",
            "S - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
            "F - —Ñ–∏–ª—å—Ç—Ä",
            "Q - –ø–æ–∏—Å–∫",
            "R - –æ–±–Ω–æ–≤–∏—Ç—å",
            "Enter - —ç–∫—Å–ø–æ—Ä—Ç",
            "Esc - –≤—ã—Ö–æ–¥"
        ]
        
        return Panel(
            " | ".join(commands),
            border_style="dim"
        )
    
    def _filter_and_sort_channels(self) -> List[str]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        channels = list(self.channels_status.keys())
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if self.filter_status != "all":
            channels = [
                name for name in channels
                if self.channels_status[name].status == self.filter_status
            ]
        
        # –ü–æ–∏—Å–∫
        if self.search_query:
            query = self.search_query.lower()
            channels = [
                name for name in channels
                if query in name.lower()
            ]
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if self.sort_by == "name":
            channels.sort(reverse=self.sort_reverse)
        elif self.sort_by == "messages":
            channels.sort(
                key=lambda x: self.channels_status[x].total_messages,
                reverse=self.sort_reverse
            )
        elif self.sort_by == "size":
            channels.sort(
                key=lambda x: self.channels_status[x].media_size_mb,
                reverse=self.sort_reverse
            )
        elif self.sort_by == "last_check":
            channels.sort(
                key=lambda x: self.channels_status[x].last_check or datetime.min,
                reverse=self.sort_reverse
            )
        
        return channels
    
    def handle_key_input(self, key: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        if key == "escape":
            return False
        
        elif key == "up":
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–≤–µ—Ä—Ö (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫)
            pass
        
        elif key == "down":
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–Ω–∏–∑ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫)
            pass
        
        elif key == "space":
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            self._toggle_current_channel()
        
        elif key == "a":
            # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã
            self._select_all_visible()
        
        elif key == "d":
            # –°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö
            self._deselect_all()
        
        elif key == "s":
            # –ú–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            self._show_sort_menu()
        
        elif key == "f":
            # –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            self._show_filter_menu()
        
        elif key == "q":
            # –ü–æ–∏—Å–∫
            self._show_search()
        
        elif key == "r":
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞)
            pass
        
        elif key == "enter":
            # –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            self._export_selected()
        
        elif key == "page_up":
            # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if self.current_page > 0:
                self.current_page -= 1
        
        elif key == "page_down":
            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            filtered_channels = self._filter_and_sort_channels()
            max_pages = (len(filtered_channels) + self.channels_per_page - 1) // self.channels_per_page
            if self.current_page < max_pages - 1:
                self.current_page += 1
        
        return True
    
    def _toggle_current_channel(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        filtered_channels = self._filter_and_sort_channels()
        start_idx = self.current_page * self.channels_per_page
        if start_idx < len(filtered_channels):
            channel_name = filtered_channels[start_idx]
            if channel_name in self.channels_status:
                channel = self.channels_status[channel_name]
                channel.is_selected = not channel.is_selected
                
                if channel.is_selected and channel_name not in self.selected_channels:
                    self.selected_channels.append(channel_name)
                elif not channel.is_selected and channel_name in self.selected_channels:
                    self.selected_channels.remove(channel_name)
    
    def _select_all_visible(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã"""
        filtered_channels = self._filter_and_sort_channels()
        start_idx = self.current_page * self.channels_per_page
        end_idx = start_idx + self.channels_per_page
        
        for channel_name in filtered_channels[start_idx:end_idx]:
            if channel_name in self.channels_status:
                self.channels_status[channel_name].is_selected = True
                if channel_name not in self.selected_channels:
                    self.selected_channels.append(channel_name)
    
    def _deselect_all(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        for channel in self.channels_status.values():
            channel.is_selected = False
        self.selected_channels.clear()
    
    def _show_sort_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        self.console.clear()
        
        sort_options = [
            ("1", "name", "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
            ("2", "messages", "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π"),
            ("3", "size", "–ü–æ —Ä–∞–∑–º–µ—Ä—É –º–µ–¥–∏–∞"),
            ("4", "last_check", "–ü–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")
        ]
        
        table = Table(title="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", box=box.ROUNDED)
        table.add_column("–ö–æ–¥", style="cyan")
        table.add_column("–ü–æ–ª–µ", style="green")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        
        for code, field, description in sort_options:
            current = " ‚Üê" if self.sort_by == field else ""
            table.add_row(code, field, f"{description}{current}")
        
        self.console.print(table)
        
        choice = Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", choices=["1", "2", "3", "4", "q"])
        
        if choice != "q":
            field_map = {"1": "name", "2": "messages", "3": "size", "4": "last_check"}
            new_sort = field_map[choice]
            
            if new_sort == self.sort_by:
                self.sort_reverse = not self.sort_reverse
            else:
                self.sort_by = new_sort
                self.sort_reverse = False
            
            self.current_page = 0  # –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    def _show_filter_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        self.console.clear()
        
        filter_options = [
            ("1", "all", "–í—Å–µ –∫–∞–Ω–∞–ª—ã"),
            ("2", "active", "–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ"),
            ("3", "inactive", "–¢–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"),
            ("4", "error", "–¢–æ–ª—å–∫–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        ]
        
        table = Table(title="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤", box=box.ROUNDED)
        table.add_column("–ö–æ–¥", style="cyan")
        table.add_column("–§–∏–ª—å—Ç—Ä", style="green")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        
        for code, filter_type, description in filter_options:
            current = " ‚Üê" if self.filter_status == filter_type else ""
            table.add_row(code, filter_type, f"{description}{current}")
        
        self.console.print(table)
        
        choice = Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä", choices=["1", "2", "3", "4", "q"])
        
        if choice != "q":
            filter_map = {"1": "all", "2": "active", "3": "inactive", "4": "error"}
            self.filter_status = filter_map[choice]
            self.current_page = 0  # –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    def _show_search(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫"""
        self.console.clear()
        
        current_query = self.search_query if self.search_query else ""
        new_query = Prompt.ask("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞", default=current_query)
        
        self.search_query = new_query
        self.current_page = 0  # –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    def _export_selected(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.selected_channels:
            self.console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            return
        
        self.console.clear()
        self.console.print(f"[green]–≠–∫—Å–ø–æ—Ä—Ç {len(self.selected_channels)} –∫–∞–Ω–∞–ª–æ–≤...[/green]")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        for channel_name in self.selected_channels:
            self.console.print(f"  ‚Ä¢ {channel_name}")
    
    async def run_interactive_dashboard(self, channels: List[Any], stats: Any, export_base_dir: Path):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        self.update_channels_status(channels, stats, export_base_dir)
        
        layout = self.create_dashboard_layout()
        
        with Live(layout, console=self.console, refresh_per_second=4) as live:
            while True:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                layout["header"].update(self.render_header())
                layout["channels"].update(self.render_channels_table())
                layout["analytics"].update(self.render_analytics_panel())
                layout["footer"].update(self.render_footer())
                
                # –ñ–¥–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏–º—É–ª—è—Ü–∏—é
                    await asyncio.sleep(0.1)
                    
                    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
                    
                except KeyboardInterrupt:
                    break
        
        self.console.print("[green]–î–∞—à–±–æ—Ä–¥ –∑–∞–∫—Ä—ã—Ç[/green]")
    
    def show_static_dashboard(self, channels: List[Any], stats: Any, export_base_dir: Path):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥"""
        self.update_channels_status(channels, stats, export_base_dir)
        
        layout = self.create_dashboard_layout()
        layout["header"].update(self.render_header())
        layout["channels"].update(self.render_channels_table())
        layout["analytics"].update(self.render_analytics_panel())
        layout["footer"].update(self.render_footer())
        
        self.console.print(layout)
