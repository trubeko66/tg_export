#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Final test to verify that excessive formatting symbols are NOT being removed from Markdown export
"""

import re

def clean_text(text: str) -> str:
    """Updated conservative version of clean_text from BaseExporter"""
    if not text:
        return ""
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cleaned = re.sub(r'[\u200d\ufe0f]', '', text)  # –£–¥–∞–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —ç–º–æ–¥–∑–∏
    cleaned = re.sub(r'[\u2060-\u206f]', '', cleaned)  # Word joiner –∏ –¥—Ä—É–≥–∏–µ
    
    # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏ KaTeX
    # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    katex_problematic_patterns = [
        (r'\\-', '-'),              # \- –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –¥–µ—Ñ–∏—Å  
        (r'\\\+', '+'),            # \+ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–ª—é—Å
        (r'\\\*', '*'),            # \* –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—É—é –∑–≤–µ–∑–¥–æ—á–∫—É
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ LaTeX –∫–æ–º–∞–Ω–¥—ã –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        (r'\$\\[a-zA-Z]+\$', ''),  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ $\command$ (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)
        (r'\\begin\{[^}]+\}', ''), # –£–¥–∞–ª—è–µ–º \begin{environment}
        (r'\\end\{[^}]+\}', ''),   # –£–¥–∞–ª—è–µ–º \end{environment}
    ]
    
    for pattern, replacement in katex_problematic_patterns:
        cleaned = re.sub(pattern, replacement, cleaned)
    
    return cleaned.strip()

def safe_markdown_text_current(text: str) -> str:
    """–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è _safe_markdown_text"""
    if not text:
        return ""
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cleaned = clean_text(text)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞—â–∏—â–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
    code_blocks = []
    code_counter = 0
    
    # –ó–∞—â–∏—â–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ (```)
    def protect_multiline_code(match):
        nonlocal code_counter
        code_blocks.append(match.group(0))
        placeholder = f"MDCODEBLOCK{code_counter}PLACEHOLDER"
        code_counter += 1
        return placeholder
    
    # –ó–∞—â–∏—â–∞–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ (`code`)
    def protect_inline_code(match):
        nonlocal code_counter
        code_blocks.append(match.group(0))
        placeholder = f"MDCODEBLOCK{code_counter}PLACEHOLDER"
        code_counter += 1
        return placeholder
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞—â–∏—â–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    cleaned = re.sub(r'```[\s\S]*?```', protect_multiline_code, cleaned)
    
    # –ó–∞—Ç–µ–º –∑–∞—â–∏—â–∞–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    cleaned = re.sub(r'`[^`\n]+`', protect_inline_code, cleaned)
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ KaTeX
    # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º Markdown —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏ (*, _, [, ])
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ä–µ—à–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤), –Ω–æ –Ω–µ –≤ –±–ª–æ–∫–∞—Ö –∫–æ–¥–∞
    # cleaned = re.sub(r'^#', '\\#', cleaned, flags=re.MULTILINE)  # –û—Ç–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    for i, code_block in enumerate(code_blocks):
        placeholder = f"MDCODEBLOCK{i}PLACEHOLDER"
        cleaned = cleaned.replace(placeholder, code_block)
    
    return cleaned

def test_final_formatting():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown"""
    
    print("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown...")
    
    test_cases = [
        {
            "name": "Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è)",
            "input": "**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ *–∫—É—Ä—Å–∏–≤–Ω—ã–π* —Ç–µ–∫—Å—Ç —Å [—Å—Å—ã–ª–∫–æ–π](url)",
            "description": "–ë–∞–∑–æ–≤–æ–µ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è",
            "expect_unchanged": True
        },
        {
            "name": "–ó–∞–≥–æ–ª–æ–≤–∫–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è)",
            "input": "# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1\n## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2\n### –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3",
            "description": "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            "expect_unchanged": True
        },
        {
            "name": "–ö–æ–¥ –±–ª–æ–∫–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è)",
            "input": "–ö–æ–º–∞–Ω–¥–∞ `ls -la` –∏ –±–ª–æ–∫:\n```bash\necho 'hello'\n```",
            "description": "–ö–æ–¥ –±–ª–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è",
            "expect_unchanged": True
        },
        {
            "name": "–≠–º–æ–¥–∑–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è)",
            "input": "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞? üòä üöÄ",
            "description": "–≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è (–∫—Ä–æ–º–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤)",
            "expect_unchanged": False,  # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è
            "expected_preserved": ["üëã", "üòä", "üöÄ"]
        },
        {
            "name": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
            "input": "–ö–æ–º–∞–Ω–¥–∞: find \\. \\-type f \\-mtime \\+30 \\-delete",
            "description": "–î–æ–ª–∂–Ω—ã —É–±–∏—Ä–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (\\- –∏ \\+)",
            "expect_unchanged": False,
            "must_contain": ["find", ".", "type", "f", "mtime", "30", "delete"],
            "should_not_contain": ["\\-", "\\+"]
        },
        {
            "name": "LaTeX –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)",
            "input": "\\alpha \\beta \\gamma —Ç–µ–∫—Å—Ç",
            "description": "LaTeX –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è (–Ω–µ —É–¥–∞–ª—è—Ç—å—Å—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)",
            "expect_unchanged": True
        }
    ]
    
    all_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"   {test_case['description']}")
        
        original = test_case['input']
        result = safe_markdown_text_current(original)
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π: {repr(original)}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {repr(result)}")
        
        test_passed = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if test_case.get('expect_unchanged', False):
            if result != original:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º")
                test_passed = False
            else:
                print(f"   ‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if 'expected_preserved' in test_case:
            missing = []
            for symbol in test_case['expected_preserved']:
                if symbol not in result:
                    missing.append(symbol)
            
            if missing:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã: {missing}")
                test_passed = False
            else:
                print(f"   ‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if 'must_contain' in test_case:
            missing_content = []
            for content in test_case['must_contain']:
                if content not in result:
                    missing_content.append(content)
            
            if missing_content:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {missing_content}")
                test_passed = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if 'should_not_contain' in test_case:
            unwanted_content = []
            for content in test_case['should_not_contain']:
                if content in result:
                    unwanted_content.append(content)
            
            if unwanted_content:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {unwanted_content}")
                test_passed = False
        
        if test_passed:
            print(f"   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        else:
            all_passed = False
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    if all_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò–∑–±—ã—Ç–æ—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–û")
        print("‚úÖ Markdown –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = test_final_formatting()
    exit(0 if success else 1)