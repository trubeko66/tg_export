#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram Channel Exporter
"""

import asyncio
import sys
import time
import json
from pathlib import Path
from typing import List, Any, Optional, Tuple
from datetime import datetime
from dataclasses import dataclass

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich import box


@dataclass
class MockChannel:
    """–ú–æ–∫-–∫–∞–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    title: str
    total_messages: int = 0
    last_check: Optional[str] = None
    export_errors: int = 0


@dataclass
class MockStats:
    """–ú–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    total_messages: int = 0
    export_errors: int = 0
    filtered_messages: int = 0
    last_export_time: Optional[str] = None


class StandaloneEnhancedExporter:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
    
    def __init__(self):
        self.console = Console()
        self.channels: List[MockChannel] = []
        self.stats = MockStats()
        self._load_demo_data()
    
    def _load_demo_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        demo_channels = [
            MockChannel("IT News", 5000, datetime.now().isoformat()),
            MockChannel("Tech Updates", 3000, datetime.now().isoformat()),
            MockChannel("Programming", 2000, datetime.now().isoformat()),
            MockChannel("AI Research", 1500, datetime.now().isoformat()),
            MockChannel("Dev Tools", 1000, datetime.now().isoformat()),
            MockChannel("Web Development", 800, datetime.now().isoformat()),
            MockChannel("Mobile Apps", 600, datetime.now().isoformat()),
            MockChannel("Data Science", 400, datetime.now().isoformat()),
        ]
        
        self.channels = demo_channels
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats.total_messages = sum(ch.total_messages for ch in self.channels)
        self.stats.export_errors = 2
        self.stats.filtered_messages = 567
        self.stats.last_export_time = datetime.now().strftime("%Y-%m-%d %H:%M")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        try:
            self.console.print("[green]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –≤–µ—Ä—Å–∏–∏...[/green]")
            time.sleep(1)
            self.console.print("[green]‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
            raise
    
    async def show_enhanced_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.console.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            status_panel = Panel(
                f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(self.channels)}\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç: {self.stats.last_export_time or '–ù–∏–∫–æ–≥–¥–∞'}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats.total_messages:,}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞: {self.stats.export_errors}\n"
                f"‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats.filtered_messages:,}",
                title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                border_style="blue"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            menu_panel = Panel(
                "üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\n"
                "1. üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n"
                "2. üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
                "3. üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n"
                "4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "5. üìã –õ–æ–≥–∏\n"
                "6. üéØ –ü—Ä–æ—Å—Ç–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
                "0. üö™ –í—ã—Ö–æ–¥",
                title="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                border_style="green"
            )
            
            self.console.print(status_panel)
            self.console.print(menu_panel)
            
            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                choices=["1", "2", "3", "4", "5", "6", "0", "q", "quit"]
            )
            
            if choice in ["0", "q", "quit"]:
                if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                    break
                continue
            
            try:
                if choice == "1":
                    await self.show_analytics_menu()
                elif choice == "2":
                    await self.show_dashboard()
                elif choice == "3":
                    await self.show_export_menu()
                elif choice == "4":
                    await self.show_settings_menu()
                elif choice == "5":
                    await self.show_logs_menu()
                elif choice == "6":
                    await self.show_simple_cli()
                    
            except KeyboardInterrupt:
                if Confirm.ask("\n–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?"):
                    break
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_analytics_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.console.clear()
        
        analytics_panel = Panel(
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n\n"
            "1. üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "2. üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "3. üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
            "4. üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ JSON\n"
            "5. üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ CSV\n"
            "6. üåê –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ HTML\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            border_style="cyan"
        )
        
        self.console.print(analytics_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            choices=["1", "2", "3", "4", "5", "6", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.show_general_analytics()
            elif choice == "2":
                await self.show_channel_analysis()
            elif choice == "3":
                await self.show_channel_comparison()
            elif choice == "4":
                await self.export_json_report()
            elif choice == "5":
                await self.export_csv_report()
            elif choice == "6":
                await self.export_html_report()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_general_analytics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        self.console.clear()
        
        with self.console.status("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
            time.sleep(1)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_panel = Panel(
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len([ch for ch in self.channels if ch.last_check])}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats.total_messages:,}\n"
            f"‚Ä¢ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: 2,345\n"
            f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: 1.2 –ì–ë\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç: {self.stats.last_export_time}",
            title="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            border_style="green"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤
        top_table = Table(title="–¢–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", box=box.ROUNDED)
        top_table.add_column("–ö–∞–Ω–∞–ª", style="cyan")
        top_table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="green", justify="right")
        top_table.add_column("–ú–µ–¥–∏–∞", style="yellow", justify="right")
        top_table.add_column("–†–∞–∑–º–µ—Ä (–ú–ë)", style="blue", justify="right")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        sorted_channels = sorted(self.channels, key=lambda x: x.total_messages, reverse=True)
        
        for i, channel in enumerate(sorted_channels[:5]):
            media_count = channel.total_messages // 10  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞
            size_mb = channel.total_messages * 0.1  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            top_table.add_row(
                channel.title,
                f"{channel.total_messages:,}",
                f"{media_count:,}",
                f"{size_mb:.1f}"
            )
        
        self.console.print(stats_panel)
        self.console.print(top_table)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channel_analysis(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right")
        
        for i, channel in enumerate(self.channels, 1):
            table.add_row(str(i), channel.title, f"{channel.total_messages:,}")
        
        self.console.print(table)
        
        try:
            choice = IntPrompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞",
                choices=[str(i) for i in range(1, len(self.channels) + 1)]
            )
            
            selected_channel = self.channels[choice - 1]
            
            with self.console.status(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ '{selected_channel.title}'..."):
                time.sleep(2)
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            analysis_panel = Panel(
                f"üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: {selected_channel.title}\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {selected_channel.total_messages:,}\n"
                f"‚Ä¢ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {selected_channel.total_messages // 10:,}\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä –º–µ–¥–∏–∞: {selected_channel.total_messages * 0.1:.1f} –ú–ë\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {selected_channel.total_messages / 30:.1f}\n"
                f"‚Ä¢ –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã: 10:00, 14:00, 18:00\n"
                f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: 8.7/10\n"
                f"‚Ä¢ –¢–µ–º–ø —Ä–æ—Å—Ç–∞: +12.3%\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {selected_channel.last_check or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
                f"–¢–æ–ø-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n"
                f"‚Ä¢ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (234)\n"
                f"‚Ä¢ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (189)\n"
                f"‚Ä¢ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (156)\n"
                f"‚Ä¢ –∫–æ–¥ (123)\n"
                f"‚Ä¢ –∞–ª–≥–æ—Ä–∏—Ç–º (98)",
                title=f"üìà –ê–Ω–∞–ª–∏–∑: {selected_channel.title}",
                border_style="blue"
            )
            
            self.console.print(analysis_panel)
            
        except (ValueError, IndexError):
            self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channel_comparison(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        with self.console.status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è..."):
            time.sleep(1)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        comparison_table = Table(title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤", box=box.ROUNDED)
        comparison_table.add_column("–ö–∞–Ω–∞–ª", style="cyan")
        comparison_table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="green", justify="right")
        comparison_table.add_column("–ú–µ–¥–∏–∞", style="yellow", justify="right")
        comparison_table.add_column("–†–∞–∑–º–µ—Ä (–ú–ë)", style="blue", justify="right")
        comparison_table.add_column("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/–¥–µ–Ω—å", style="magenta", justify="right")
        comparison_table.add_column("–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å", style="red", justify="right")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        sorted_channels = sorted(self.channels, key=lambda x: x.total_messages, reverse=True)
        
        for channel in sorted_channels:
            media_count = channel.total_messages // 10
            size_mb = channel.total_messages * 0.1
            activity_per_day = channel.total_messages / 30
            engagement = min(10, channel.total_messages / 500)
            
            comparison_table.add_row(
                channel.title,
                f"{channel.total_messages:,}",
                f"{media_count:,}",
                f"{size_mb:.1f}",
                f"{activity_per_day:.1f}",
                f"{engagement:.1f}"
            )
        
        self.console.print(comparison_table)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_json_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç JSON –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(2)
        
        # –°–æ–∑–¥–∞–µ–º JSON –æ—Ç—á–µ—Ç
        report_data = {
            "export_timestamp": datetime.now().isoformat(),
            "channels": [
                {
                    "name": ch.title,
                    "total_messages": ch.total_messages,
                    "media_files": ch.total_messages // 10,
                    "size_mb": ch.total_messages * 0.1,
                    "last_check": ch.last_check,
                    "export_errors": ch.export_errors
                }
                for ch in self.channels
            ],
            "statistics": {
                "total_channels": len(self.channels),
                "total_messages": self.stats.total_messages,
                "export_errors": self.stats.export_errors,
                "filtered_messages": self.stats.filtered_messages
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = Path("analytics_report.json")
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        self.console.print(f"[green]‚úÖ JSON –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}[/green]")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_csv_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç CSV –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(2)
        
        # –°–æ–∑–¥–∞–µ–º CSV –æ—Ç—á–µ—Ç
        output_file = Path("analytics_report.csv")
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("Channel,Total Messages,Media Files,Size MB,Last Check,Export Errors\n")
            for ch in self.channels:
                f.write(f"{ch.title},{ch.total_messages},{ch.total_messages // 10},{ch.total_messages * 0.1:.1f},{ch.last_check or 'Unknown'},{ch.export_errors}\n")
        
        self.console.print(f"[green]‚úÖ CSV –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}[/green]")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_html_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç HTML –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(3)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML –æ—Ç—á–µ—Ç
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .header {{ background: #f0f0f0; padding: 20px; border-radius: 10px; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }}
        .stat-card {{ background: #e3f2fd; padding: 15px; border-radius: 8px; text-align: center; }}
        table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
        th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
        th {{ background-color: #4CAF50; color: white; }}
        tr:nth-child(even) {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤</h1>
        <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}</p>
    </div>
    
    <div class="stats">
        <div class="stat-card">
            <h3>{len(self.channels)}</h3>
            <p>–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤</p>
        </div>
        <div class="stat-card">
            <h3>{self.stats.total_messages:,}</h3>
            <p>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
        </div>
        <div class="stat-card">
            <h3>{sum(ch.total_messages // 10 for ch in self.channels):,}</h3>
            <p>–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</p>
        </div>
        <div class="stat-card">
            <h3>{sum(ch.total_messages * 0.1 for ch in self.channels):.1f} –ú–ë</h3>
            <p>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä</p>
        </div>
    </div>
    
    <table>
        <thead>
            <tr>
                <th>–ö–∞–Ω–∞–ª</th>
                <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                <th>–ú–µ–¥–∏–∞</th>
                <th>–†–∞–∑–º–µ—Ä (–ú–ë)</th>
                <th>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞</th>
                <th>–û—à–∏–±–∫–∏</th>
            </tr>
        </thead>
        <tbody>
"""
        
        for ch in sorted(self.channels, key=lambda x: x.total_messages, reverse=True):
            html_content += f"""
            <tr>
                <td>{ch.title}</td>
                <td>{ch.total_messages:,}</td>
                <td>{ch.total_messages // 10:,}</td>
                <td>{ch.total_messages * 0.1:.1f}</td>
                <td>{ch.last_check or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                <td>{ch.export_errors}</td>
            </tr>
"""
        
        html_content += """
        </tbody>
    </table>
</body>
</html>
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = Path("analytics_report.html")
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        self.console.print(f"[green]‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}[/green]")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_dashboard(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        with self.console.status("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –∫–∞–Ω–∞–ª–æ–≤..."):
            time.sleep(1)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–Ω–∞–ª–æ–≤
        channels_table = Table(title="üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤", box=box.ROUNDED)
        channels_table.add_column("–ö–∞–Ω–∞–ª", style="cyan")
        channels_table.add_column("–°—Ç–∞—Ç—É—Å", style="green", justify="center")
        channels_table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right")
        channels_table.add_column("–†–∞–∑–º–µ—Ä (–ú–ë)", style="blue", justify="right")
        channels_table.add_column("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", style="dim")
        
        for channel in sorted(self.channels, key=lambda x: x.total_messages, reverse=True):
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if channel.last_check else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            size_mb = channel.total_messages * 0.1
            last_check = channel.last_check[:10] if channel.last_check else "–ù–∏–∫–æ–≥–¥–∞"
            
            channels_table.add_row(
                channel.title,
                status,
                f"{channel.total_messages:,}",
                f"{size_mb:.1f}",
                last_check
            )
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_panel = Panel(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç—ã\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len([ch for ch in self.channels if ch.last_check])}\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len([ch for ch in self.channels if not ch.last_check])}\n"
            f"‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: {len([ch for ch in self.channels if ch.export_errors > 0])}",
            title="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            border_style="blue"
        )
        
        self.console.print(channels_table)
        self.console.print(stats_panel)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_export_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_panel = Panel(
            "üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "1. üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "2. üéØ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
            "3. üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üîÑ –≠–∫—Å–ø–æ—Ä—Ç",
            border_style="green"
        )
        
        self.console.print(export_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞",
            choices=["1", "2", "3", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.export_all_channels()
            elif choice == "2":
                await self.export_selected_channels()
            elif choice == "3":
                await self.export_problematic_channels()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_all_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...[/green]")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤...", total=len(self.channels))
                
                for i, channel in enumerate(self.channels):
                    progress.update(task, description=f"–≠–∫—Å–ø–æ—Ä—Ç: {channel.title}")
                    time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    progress.advance(task)
            
            self.console.print("[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_selected_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
        
        for i, channel in enumerate(self.channels, 1):
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if channel.last_check else "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
            table.add_row(str(i), channel.title, status)
        
        self.console.print(table)
        
        selection = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5) –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö"
        )
        
        if selection.lower() == "all":
            selected_channels = self.channels
        else:
            try:
                indices = [int(x.strip()) - 1 for x in selection.split(",")]
                selected_channels = [self.channels[i] for i in indices if 0 <= i < len(self.channels)]
            except (ValueError, IndexError):
                self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
        
        if not selected_channels:
            self.console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(selected_channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...[/green]")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤...", total=len(selected_channels))
                
                for i, channel in enumerate(selected_channels):
                    progress.update(task, description=f"–≠–∫—Å–ø–æ—Ä—Ç: {channel.title}")
                    time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    progress.advance(task)
            
            self.console.print("[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_problematic_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        problematic_channels = [ch for ch in self.channels if ch.export_errors > 0 or not ch.last_check]
        
        if not problematic_channels:
            self.console.print("[green]–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/green]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        self.console.print(f"[yellow]–ù–∞–π–¥–µ–Ω–æ {len(problematic_channels)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
        
        if Confirm.ask("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞...[/green]")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...", total=len(problematic_channels))
                
                for i, channel in enumerate(problematic_channels):
                    progress.update(task, description=f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {channel.title}")
                    time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    progress.advance(task)
            
            self.console.print("[green]‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_settings_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.console.clear()
        
        settings_panel = Panel(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "1. üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n"
            "2. üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API\n"
            "3. ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
            "4. ‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebDAV\n"
            "5. üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            border_style="yellow"
        )
        
        self.console.print(settings_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            choices=["1", "2", "3", "4", "5", "0"]
        )
        
        if choice == "0":
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        self.console.print("[yellow]–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
        self.console.print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_logs_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–æ–≥–æ–≤"""
        self.console.clear()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–æ–≥–∏
        demo_logs = [
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} [INFO] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –≤–µ—Ä—Å–∏–∏",
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} [INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤",
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} [INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} [INFO] –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
        ]
        
        logs_text = "\n".join(demo_logs)
        
        logs_panel = Panel(
            logs_text,
            title="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞",
            border_style="blue"
        )
        
        self.console.print(logs_panel)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_simple_cli(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π CLI"""
        self.console.clear()
        
        self.console.print("[green]–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...[/green]")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π CLI
        from simple_cli import SimpleCLI
        simple_cli = SimpleCLI(self.console)
        await simple_cli.run(self.channels, self.stats)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console = Console()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        exporter = StandaloneEnhancedExporter()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_panel = Panel(
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é!\n\n"
            "–≠—Ç–∞ –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n"
            "‚Ä¢ üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "‚Ä¢ üìà –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ JSON/CSV/HTML\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞...",
            title="üéâ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è",
            border_style="green"
        )
        
        console.print(welcome_panel)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        await exporter.initialize()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await exporter.show_enhanced_menu()
        
    except KeyboardInterrupt:
        console.print("\n[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        console.print("[green]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")


if __name__ == "__main__":
    asyncio.run(main())
