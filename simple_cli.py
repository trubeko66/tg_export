#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –¥–ª—è Telegram Channel Exporter
"""

import asyncio
import time
from datetime import datetime
from pathlib import Path
from typing import List, Any, Optional

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich import box


class SimpleCLI:
    """–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI"""
    
    def __init__(self, console: Console):
        self.console = console
        
    def show_welcome(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        welcome_panel = Panel(
            "üöÄ –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏!\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.",
            title="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            border_style="green"
        )
        self.console.print(welcome_panel)
    
    def show_main_menu(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.console.clear()
        
        menu_panel = Panel(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "1. üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤\n"
            "2. üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n"
            "3. üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "5. üìã –õ–æ–≥–∏\n"
            "0. üö™ –í—ã—Ö–æ–¥",
            title="üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            border_style="blue"
        )
        
        self.console.print(menu_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            choices=["1", "2", "3", "4", "5", "0", "q", "quit"]
        )
        
        return choice
    
    def show_channels(self, channels: List[Any]):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if not channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        table = Table(title="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="blue")
        
        for i, channel in enumerate(channels, 1):
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if hasattr(channel, 'last_check') and channel.last_check else "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
            table.add_row(
                str(i),
                channel.title,
                f"{getattr(channel, 'total_messages', 0):,}",
                status
            )
        
        self.console.print(table)
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def show_export_menu(self, channels: List[Any]):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.console.clear()
        
        if not channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        export_panel = Panel(
            "üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "1. üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "2. üéØ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
            "3. üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞",
            border_style="green"
        )
        
        self.console.print(export_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞",
            choices=["1", "2", "3", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                self._export_all_channels(channels)
            elif choice == "2":
                self._export_selected_channels(channels)
            elif choice == "3":
                self._export_problematic_channels(channels)
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _export_all_channels(self, channels: List[Any]):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...[/green]")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤...", total=len(channels))
                
                for i, channel in enumerate(channels):
                    progress.update(task, description=f"–≠–∫—Å–ø–æ—Ä—Ç: {channel.title}")
                    time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    progress.advance(task)
            
            self.console.print("[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _export_selected_channels(self, channels: List[Any]):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
        
        for i, channel in enumerate(channels, 1):
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if hasattr(channel, 'last_check') and channel.last_check else "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
            table.add_row(str(i), channel.title, status)
        
        self.console.print(table)
        
        selection = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5) –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö"
        )
        
        if selection.lower() == "all":
            selected_channels = channels
        else:
            try:
                indices = [int(x.strip()) - 1 for x in selection.split(",")]
                selected_channels = [channels[i] for i in indices if 0 <= i < len(channels)]
            except (ValueError, IndexError):
                self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
        
        if not selected_channels:
            self.console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(selected_channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...[/green]")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤...", total=len(selected_channels))
                
                for i, channel in enumerate(selected_channels):
                    progress.update(task, description=f"–≠–∫—Å–ø–æ—Ä—Ç: {channel.title}")
                    time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    progress.advance(task)
            
            self.console.print("[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _export_problematic_channels(self, channels: List[Any]):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        problematic_channels = []
        for channel in channels:
            if (hasattr(channel, 'export_errors') and channel.export_errors > 0) or \
               (hasattr(channel, 'last_check') and not channel.last_check):
                problematic_channels.append(channel)
        
        if not problematic_channels:
            self.console.print("[green]–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/green]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        self.console.print(f"[yellow]–ù–∞–π–¥–µ–Ω–æ {len(problematic_channels)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
        
        if Confirm.ask("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞...[/green]")
            
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...", total=len(problematic_channels))
                
                for i, channel in enumerate(problematic_channels):
                    progress.update(task, description=f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {channel.title}")
                    time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    progress.advance(task)
            
            self.console.print("[green]‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def show_analytics(self, channels: List[Any], stats: Any):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        self.console.clear()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_panel = Panel(
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {getattr(stats, 'total_messages', 0):,}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞: {getattr(stats, 'export_errors', 0)}\n"
            f"‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {getattr(stats, 'filtered_messages', 0):,}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç: {getattr(stats, 'last_export_time', '–ù–∏–∫–æ–≥–¥–∞')}",
            title="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            border_style="green"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ø-–∫–∞–Ω–∞–ª–æ–≤
        if channels:
            top_table = Table(title="–¢–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", box=box.ROUNDED)
            top_table.add_column("–ö–∞–Ω–∞–ª", style="cyan")
            top_table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="green", justify="right")
            top_table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
            sorted_channels = sorted(channels, key=lambda x: getattr(x, 'total_messages', 0), reverse=True)
            
            for channel in sorted_channels[:5]:
                status = "–ê–∫—Ç–∏–≤–µ–Ω" if hasattr(channel, 'last_check') and channel.last_check else "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
                top_table.add_row(
                    channel.title,
                    f"{getattr(channel, 'total_messages', 0):,}",
                    status
                )
            
            self.console.print(stats_panel)
            self.console.print(top_table)
        else:
            self.console.print(stats_panel)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.console.clear()
        
        settings_panel = Panel(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n"
            "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n\n"
            "‚Ä¢ Telegram API: –ù–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚Ä¢ Bot API: –ù–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚Ä¢ WebDAV: –ù–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚Ä¢ –•—Ä–∞–Ω–∏–ª–∏—â–µ: –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ",
            title="‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            border_style="yellow"
        )
        
        self.console.print(settings_panel)
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def show_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
        self.console.clear()
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
        log_file = Path("export.log")
        if log_file.exists():
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-15:] if len(lines) > 15 else lines
            
            logs_text = "".join(recent_lines)
        else:
            logs_text = "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        logs_panel = Panel(
            logs_text,
            title="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞",
            border_style="blue"
        )
        
        self.console.print(logs_panel)
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def run(self, channels: List[Any], stats: Any):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ CLI"""
        try:
            self.show_welcome()
            
            while True:
                choice = self.show_main_menu()
                
                if choice in ["0", "q", "quit"]:
                    if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                        break
                    continue
                
                try:
                    if choice == "1":
                        self.show_channels(channels)
                    elif choice == "2":
                        self.show_export_menu(channels)
                    elif choice == "3":
                        self.show_analytics(channels, stats)
                    elif choice == "4":
                        self.show_settings()
                    elif choice == "5":
                        self.show_logs()
                        
                except KeyboardInterrupt:
                    if Confirm.ask("\n–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?"):
                        break
                except Exception as e:
                    self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
            # –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.console.clear()
            goodbye_panel = Panel(
                "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Simple CLI!\n\n"
                "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                title="üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                border_style="green"
            )
            self.console.print(goodbye_panel)
            
        except Exception as e:
            self.console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    console = Console()
    cli = SimpleCLI(console)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    class MockChannel:
        def __init__(self, title, messages=0):
            self.title = title
            self.total_messages = messages
            self.last_check = datetime.now().isoformat()
    
    class MockStats:
        def __init__(self):
            self.total_messages = 12345
            self.export_errors = 2
            self.filtered_messages = 567
            self.last_export_time = datetime.now().strftime("%Y-%m-%d %H:%M")
    
    channels = [
        MockChannel("IT News", 5000),
        MockChannel("Tech Updates", 3000),
        MockChannel("Programming", 2000),
        MockChannel("AI Research", 1500),
        MockChannel("Dev Tools", 1000)
    ]
    
    stats = MockStats()
    
    await cli.run(channels, stats)


if __name__ == "__main__":
    asyncio.run(main())
