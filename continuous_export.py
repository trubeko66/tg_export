#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import time
import threading
from datetime import datetime, timezone, timedelta
from pathlib import Path
from typing import List, Dict, Optional
import signal
import sys

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.layout import Layout
from rich.live import Live
from rich.table import Table
from rich import box

from telegram_exporter import TelegramExporter, ChannelInfo
from config_manager import ConfigManager
from content_filter import ContentFilter


class ContinuousExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, console: Console):
        self.console = console
        self.config_manager = ConfigManager()
        self.content_filter = ContentFilter()
        self.exporter = None
        self.channels = []
        self.is_running = False
        self.should_stop = False
        self.last_check_times = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        self.export_stats = {
            'total_channels': 0,
            'checked_channels': 0,
            'new_messages': 0,
            'filtered_messages': 0,
            'exported_messages': 0,
            'errors': 0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.console.print("\n[yellow]–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...[/yellow]")
        self.should_stop = True
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
            self.exporter = TelegramExporter()
            await self.exporter.initialize_client()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
            if self.config_manager.channels_file_exists():
                self.channels = self.config_manager.import_channels()
                self.console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤[/green]")
            else:
                self.console.print("[yellow]‚ö†Ô∏è –§–∞–π–ª –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω[/yellow]")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.export_stats['total_channels'] = len(self.channels)
            
            return True
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
            return False
    
    async def start_continuous_export(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        if not await self.initialize():
            return
        
        self.is_running = True
        self.should_stop = False
        
        self.console.print("[green]üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤[/green]")
        self.console.print("[yellow]üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞[/yellow]")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞
            await self._main_export_loop()
            
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
        finally:
            self.is_running = False
            await self._cleanup()
    
    async def _main_export_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        while not self.should_stop:
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω
                await self._show_export_status()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._check_channels_for_updates()
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}[/red]")
                await asyncio.sleep(5)
    
    async def _show_export_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω
            layout = self._create_continuous_export_display()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
            with Live(layout, refresh_per_second=1, console=self.console) as live:
                await asyncio.sleep(1)
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
    
    def _create_continuous_export_display(self) -> Layout:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=3)
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        current_time = datetime.now().strftime("%H:%M:%S")
        header_text = Text("üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤", style="bold magenta")
        header_text.append(f" | –í—Ä–µ–º—è: {current_time}", style="cyan")
        header_text.append(" | –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω", style="bold green")
        layout["header"].update(Panel(header_text, box=box.DOUBLE))
        
        # –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        layout["main"].split_row(
            Layout(name="left", ratio=2),
            Layout(name="right", ratio=1)
        )
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤
        channels_table = self._create_channels_status_table()
        layout["main"]["left"].update(Panel(channels_table, title="üìã –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤", box=box.ROUNDED, expand=True))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_content = self._create_continuous_stats()
        layout["main"]["right"].update(Panel(stats_content, title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", box=box.ROUNDED))
        
        # –ü–æ–¥–≤–∞–ª
        footer_content = self._create_continuous_footer()
        layout["footer"].update(Panel(footer_content, box=box.ROUNDED))
        
        return layout
    
    def _create_channels_status_table(self) -> Table:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        table = Table(
            box=box.ROUNDED,
            show_header=True,
            header_style="bold white",
            expand=True,
            min_width=60
        )
        
        table.add_column("‚Ññ", style="cyan", width=3, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green", ratio=3)
        table.add_column("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", style="blue", width=12)
        table.add_column("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", style="yellow", width=12)
        table.add_column("–°—Ç–∞—Ç—É—Å", style="magenta", justify="center", width=10)
        
        for i, channel in enumerate(self.channels):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            last_check = self.last_check_times.get(channel.id, "–ù–∏–∫–æ–≥–¥–∞")
            if isinstance(last_check, datetime):
                last_check = last_check.strftime("%H:%M:%S")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if channel.id in self.last_check_times:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                status_style = "green"
            else:
                status = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
                status_style = "yellow"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            new_messages = "0"
            
            table.add_row(
                str(i + 1),
                channel.title,
                last_check,
                new_messages,
                f"[{status_style}]{status}[/{status_style}]"
            )
        
        return table
    
    def _create_continuous_stats(self) -> Text:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        stats_text = Text()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n", style="bold cyan")
        stats_text.append(f"–ö–∞–Ω–∞–ª–æ–≤: {self.export_stats['total_channels']}\n", style="green")
        stats_text.append(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.export_stats['checked_channels']}\n", style="blue")
        stats_text.append(f"–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {self.export_stats['new_messages']}\n", style="yellow")
        stats_text.append(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.export_stats['filtered_messages']}\n", style="magenta")
        stats_text.append(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.export_stats['exported_messages']}\n", style="green")
        stats_text.append(f"–û—à–∏–±–æ–∫: {self.export_stats['errors']}\n\n", style="red")
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if hasattr(self, 'start_time'):
            uptime = datetime.now() - self.start_time
            stats_text.append("‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n\n", style="bold green")
            stats_text.append(f"{uptime}\n", style="blue")
        
        # –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        stats_text.append("üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n", style="bold yellow")
        next_check = datetime.now() + timedelta(seconds=30)
        stats_text.append(f"–ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥\n", style="blue")
        
        return stats_text
    
    def _create_continuous_footer(self) -> Text:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≤–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        footer_text = Text()
        footer_text.append("üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ v1.0", style="bold green")
        footer_text.append(" | ", style="dim")
        footer_text.append("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞", style="yellow")
        footer_text.append(" | ", style="dim")
        footer_text.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫", style="cyan")
        return footer_text
    
    async def _check_channels_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            for channel in self.channels:
                if self.should_stop:
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._check_single_channel(channel)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.last_check_times[channel.id] = datetime.now()
                self.export_stats['checked_channels'] += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                await asyncio.sleep(1)
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}[/red]")
            self.export_stats['errors'] += 1
    
    async def _check_single_channel(self, channel: ChannelInfo):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞
            # –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            await asyncio.sleep(0.1)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if channel.id % 3 == 0:  # –ö–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –∫–∞–Ω–∞–ª
                self.export_stats['new_messages'] += 1
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel.title}: {e}[/red]")
            self.export_stats['errors'] += 1
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            if self.exporter and hasattr(self.exporter, 'disconnect'):
                await self.exporter.disconnect()
            self.console.print("[green]‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}[/red]")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    console = Console()
    
    try:
        exporter = ContinuousExporter(console)
        await exporter.start_continuous_export()
        
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        console.print("[green]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")


if __name__ == "__main__":
    asyncio.run(main())
