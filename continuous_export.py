#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import time
import threading
import logging
from datetime import datetime, timezone, timedelta
from pathlib import Path
from typing import List, Dict, Optional
import signal
import sys

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.layout import Layout
from rich.live import Live
from rich.table import Table
from rich import box

from telegram_exporter import TelegramExporter, ChannelInfo
from config_manager import ConfigManager
from content_filter import ContentFilter
from telegram_notifications import TelegramNotifier


class ContinuousExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, console: Console):
        self.console = console
        self.config_manager = ConfigManager()
        self.content_filter = ContentFilter()
        self.telegram_notifier = TelegramNotifier(console)
        self.exporter = None
        self.channels = []
        self.is_running = False
        self.should_stop = False
        self.telegram_connected = False  # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
        self.last_check_times = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        self.export_stats = {
            'total_channels': 0,
            'checked_channels': 0,
            'new_messages': 0,
            'filtered_messages': 0,
            'exported_messages': 0,
            'errors': 0
        }
        self.channel_new_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.channel_filtered_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.channel_useful_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.check_interval = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
        self.channels_state_file = Path("channels_state.json")  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self._setup_filter_logger()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _setup_filter_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.filter_logger = logging.getLogger('ads_filter')
        self.filter_logger.setLevel(logging.DEBUG)
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        for handler in self.filter_logger.handlers[:]:
            self.filter_logger.removeHandler(handler)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ ads.log
        file_handler = logging.FileHandler('ads.log', encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - [%(name)s] - %(funcName)s:%(lineno)d - %(message)s')
        file_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
        self.filter_logger.addHandler(file_handler)
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.filter_logger.propagate = False
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.console.print("\n[yellow]–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...[/yellow]")
        self.should_stop = True
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        self._save_channels_state()
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å–Ω–∞—á–∞–ª–∞
            if self.config_manager.channels_file_exists():
                self.channels = self.config_manager.import_channels()
                self.console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤[/green]")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ (last_message_id –∏ —Ç.–¥.)
                self._load_channels_state()
            else:
                self.console.print("[yellow]‚ö†Ô∏è –§–∞–π–ª –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω[/yellow]")
                return False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            self.console.print(f"[blue]üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:[/blue]")
            self.console.print(f"[blue]  - –§–∏–ª—å—Ç—Ä —Ä–µ–∫–ª–∞–º—ã: {'–≤–∫–ª—é—á–µ–Ω' if self.content_filter.config.filter_ads else '–æ—Ç–∫–ª—é—á–µ–Ω'}[/blue]")
            self.console.print(f"[blue]  - –§–∏–ª—å—Ç—Ä IT-—à–∫–æ–ª: {'–≤–∫–ª—é—á–µ–Ω' if self.content_filter.config.filter_schools else '–æ—Ç–∫–ª—é—á–µ–Ω'}[/blue]")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            self.filter_logger.info(f"FILTER_SETTINGS: ads_filter={self.content_filter.config.filter_ads}, schools_filter={self.content_filter.config.filter_schools}")
            self.filter_logger.debug(f"Filter initialization completed. Channels loaded: {len(self.channels)}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.export_stats['total_channels'] = len(self.channels)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç
            try:
                self.console.print("[blue]üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...[/blue]")
                self.exporter = TelegramExporter()
                await self.exporter.initialize_client(force_reauth=False)
                self.console.print("[green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ[/green]")
                self.telegram_connected = True
                
            except Exception as telegram_error:
                self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram: {telegram_error}[/yellow]")
                self.console.print("[blue]üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º...[/blue]")
                self.exporter = None
                self.telegram_connected = False
            
            return True
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
            return False
    
    async def start_continuous_export(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        if not await self.initialize():
            return
        
        self.is_running = True
        self.should_stop = False
        self.start_time = datetime.now()
        
        self.console.print("[green]üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤[/green]")
        self.console.print("[yellow]üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞[/yellow]")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞
            await self._main_export_loop()
            
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
        finally:
            self.is_running = False
            await self._cleanup()
    
    async def _main_export_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            self.console.print("[blue]üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...[/blue]")
            await self._check_channels_for_updates()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while not self.should_stop:
                try:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    await self._show_export_status()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                    await self._check_channels_for_updates()
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(self.check_interval)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                    
                except KeyboardInterrupt:
                    self.console.print("\n[yellow]–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...[/yellow]")
                    self.should_stop = True
                    break
                except Exception as e:
                    self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}[/red]")
                    await asyncio.sleep(5)
                    
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            self.should_stop = True
        except Exception as e:
            self.console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}[/red]")
            self.should_stop = True
    
    async def _show_export_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
            # –í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥
            display_time = min(self.check_interval, 10)
            
            for remaining in range(display_time, 0, -1):
                layout = self._create_continuous_export_display(remaining)
                
                with Live(layout, refresh_per_second=1, console=self.console) as live:
                    await asyncio.sleep(1)
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
    
    def _create_continuous_export_display(self, countdown: int = 0) -> Layout:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=3)
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        current_time = datetime.now().strftime("%H:%M:%S")
        mode_text = "–î–µ–º–æ-—Ä–µ–∂–∏–º" if not self.telegram_connected else "–†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"
        mode_style = "yellow" if not self.telegram_connected else "green"
        
        header_text = Text("üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤", style="bold magenta")
        header_text.append(f" | –í—Ä–µ–º—è: {current_time}", style="cyan")
        header_text.append(f" | –†–µ–∂–∏–º: {mode_text}", style=f"bold {mode_style}")
        header_text.append(" | –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω", style="bold green")
        layout["header"].update(Panel(header_text, box=box.DOUBLE))
        
        # –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        layout["main"].split_row(
            Layout(name="left", ratio=2),
            Layout(name="right", ratio=1)
        )
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤
        channels_table = self._create_channels_status_table()
        layout["main"]["left"].update(Panel(channels_table, title="üìã –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤", box=box.ROUNDED, expand=True))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_content = self._create_continuous_stats(countdown)
        layout["main"]["right"].update(Panel(stats_content, title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", box=box.ROUNDED))
        
        # –ü–æ–¥–≤–∞–ª
        footer_content = self._create_continuous_footer()
        layout["footer"].update(Panel(footer_content, box=box.ROUNDED))
        
        return layout
    
    def _create_channels_status_table(self) -> Table:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        table = Table(
            box=box.ROUNDED,
            show_header=True,
            header_style="bold white",
            expand=True,
            min_width=80
        )
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        animation_chars = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
        current_time = int(time.time() * 2) % len(animation_chars)
        animation = animation_chars[current_time]
        
        table.add_column("", style="cyan", width=2, justify="center")  # –ê–Ω–∏–º–∞—Ü–∏—è
        table.add_column("‚Ññ", style="cyan", width=3, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green", ratio=3)
        table.add_column("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", style="blue", width=12)
        table.add_column("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", style="yellow", width=12)
        table.add_column("–°—Ç–∞—Ç—É—Å", style="magenta", justify="center", width=20)  # –£–≤–µ–ª–∏—á–µ–Ω
        
        for i, channel in enumerate(self.channels):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            last_check = self.last_check_times.get(channel.id, "–ù–∏–∫–æ–≥–¥–∞")
            if isinstance(last_check, datetime):
                last_check = last_check.strftime("%H:%M:%S")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∞–Ω–∏–º–∞—Ü–∏—é
            if channel.id in self.last_check_times:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ–¥–∞–≤–Ω–æ –ª–∏ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
                if isinstance(last_check, datetime):
                    time_diff = datetime.now() - last_check
                    if time_diff.total_seconds() < 300:  # 5 –º–∏–Ω—É—Ç
                        status = f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω ({time_diff.seconds//60}–º –Ω–∞–∑–∞–¥)"
                        status_style = "green"
                        channel_animation = "üîÑ"
                    else:
                        status = f"‚è∏Ô∏è –ü–∞—É–∑–∞ ({time_diff.seconds//60}–º –Ω–∞–∑–∞–¥)"
                        status_style = "yellow"
                        channel_animation = "‚è∏Ô∏è"
                else:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                    status_style = "green"
                    channel_animation = "üîÑ"
            else:
                status = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
                status_style = "dim"
                channel_animation = animation
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            new_messages = str(self.channel_new_messages.get(channel.id, 0))
            
            table.add_row(
                channel_animation,
                str(i + 1),
                channel.title,
                last_check,
                new_messages,
                f"[{status_style}]{status}[/{status_style}]"
            )
        
        return table
    
    def _create_continuous_stats(self, countdown: int = 0) -> Text:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        stats_text = Text()
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        animation_chars = ["üìä", "üìà", "üìâ", "üìä"]
        current_time = int(time.time() * 2) % len(animation_chars)
        animation = animation_chars[current_time]
        
        stats_text.append(f"{animation} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n", style="bold cyan")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        stats_text.append("üìã ", style="green")
        stats_text.append(f"–ö–∞–Ω–∞–ª–æ–≤: {self.export_stats['total_channels']}\n", style="green")
        
        stats_text.append("‚úÖ ", style="blue")
        stats_text.append(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.export_stats['checked_channels']}\n", style="blue")
        
        stats_text.append("üÜï ", style="yellow")
        stats_text.append(f"–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {self.export_stats['new_messages']}\n", style="yellow")
        
        stats_text.append("üîç ", style="magenta")
        stats_text.append(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.export_stats['filtered_messages']}\n", style="magenta")
        
        stats_text.append("üíæ ", style="green")
        stats_text.append(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.export_stats['exported_messages']}\n", style="green")
        
        stats_text.append("‚ùå ", style="red")
        stats_text.append(f"–û—à–∏–±–æ–∫: {self.export_stats['errors']}\n\n", style="red")
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if hasattr(self, 'start_time'):
            uptime = datetime.now() - self.start_time
            hours, remainder = divmod(int(uptime.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            
            stats_text.append("‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n\n", style="bold green")
            stats_text.append(f"üïê {hours:02d}:{minutes:02d}:{seconds:02d}\n", style="blue")
        
        # –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        stats_text.append("üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n", style="bold yellow")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        if hasattr(self, '_last_check_time'):
            time_since_last = (datetime.now() - self._last_check_time).total_seconds()
            remaining = max(0, 30 - time_since_last)
            stats_text.append(f"‚è∞ –ß–µ—Ä–µ–∑ {int(remaining)} —Å–µ–∫\n", style="blue")
        else:
            stats_text.append("‚è∞ –ß–µ—Ä–µ–∑ 30 —Å–µ–∫\n", style="blue")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        stats_text.append("\nüñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n", style="bold magenta")
        if self.is_running:
            stats_text.append("üü¢ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞\n", style="green")
        else:
            stats_text.append("üî¥ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n", style="red")
        
        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if self.telegram_connected:
            stats_text.append("üì° Telegram: –ø–æ–¥–∫–ª—é—á–µ–Ω\n", style="green")
        else:
            stats_text.append("üì° Telegram: –¥–µ–º–æ-—Ä–µ–∂–∏–º\n", style="yellow")
        
        return stats_text
    
    def _create_continuous_footer(self) -> Text:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≤–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        footer_text = Text()
        footer_text.append("üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ v1.0", style="bold green")
        footer_text.append(" | ", style="dim")
        footer_text.append("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞", style="yellow")
        footer_text.append(" | ", style="dim")
        footer_text.append("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫", style="cyan")
        return footer_text
    
    async def _show_checking_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏
            layout = self._create_checking_display()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            with Live(layout, refresh_per_second=2, console=self.console) as live:
                await asyncio.sleep(2)
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
    
    async def _show_final_check_status(self):
        """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω
            layout = self._create_final_check_display()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            with Live(layout, refresh_per_second=1, console=self.console) as live:
                await asyncio.sleep(3)
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
    
    def _create_checking_display(self) -> Layout:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=3)
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        current_time = datetime.now().strftime("%H:%M:%S")
        header_text = Text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", style="bold yellow")
        header_text.append(f" | –í—Ä–µ–º—è: {current_time}", style="cyan")
        header_text.append(" | –°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞", style="bold green")
        layout["header"].update(Panel(header_text, box=box.DOUBLE))
        
        # –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        layout["main"].split_row(
            Layout(name="left", ratio=2),
            Layout(name="right", ratio=1)
        )
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        channels_table = self._create_checking_channels_table()
        layout["main"]["left"].update(Panel(channels_table, title="üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã", box=box.ROUNDED, expand=True))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        stats_content = self._create_checking_stats()
        layout["main"]["right"].update(Panel(stats_content, title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", box=box.ROUNDED))
        
        # –ü–æ–¥–≤–∞–ª
        footer_content = self._create_checking_footer()
        layout["footer"].update(Panel(footer_content, box=box.ROUNDED))
        
        return layout
    
    def _create_final_check_display(self) -> Layout:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=3)
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        current_time = datetime.now().strftime("%H:%M:%S")
        header_text = Text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", style="bold green")
        header_text.append(f" | –í—Ä–µ–º—è: {current_time}", style="cyan")
        header_text.append(" | –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–æ", style="bold blue")
        layout["header"].update(Panel(header_text, box=box.DOUBLE))
        
        # –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        layout["main"].split_row(
            Layout(name="left", ratio=2),
            Layout(name="right", ratio=1)
        )
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_table = self._create_results_table()
        layout["main"]["left"].update(Panel(results_table, title="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏", box=box.ROUNDED, expand=True))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = self._create_final_stats()
        layout["main"]["right"].update(Panel(final_stats, title="üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", box=box.ROUNDED))
        
        # –ü–æ–¥–≤–∞–ª
        footer_content = self._create_final_footer()
        layout["footer"].update(Panel(footer_content, box=box.ROUNDED))
        
        return layout
    
    def _create_checking_channels_table(self) -> Table:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–Ω–∞–ª–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        table = Table(
            box=box.ROUNDED,
            show_header=True,
            header_style="bold white",
            expand=True,
            min_width=80
        )
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        animation_chars = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
        current_time = int(time.time() * 4) % len(animation_chars)
        animation = animation_chars[current_time]
        
        table.add_column("", style="cyan", width=2, justify="center")  # –ê–Ω–∏–º–∞—Ü–∏—è
        table.add_column("‚Ññ", style="cyan", width=3, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green", ratio=3)
        table.add_column("–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏", style="yellow", width=15)
        table.add_column("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", style="blue", width=12)
        table.add_column("–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏", style="magenta", width=12)
        
        for i, channel in enumerate(self.channels):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
            if channel.id in self.last_check_times:
                status = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω"
                status_style = "green"
                check_time = self.last_check_times[channel.id].strftime("%H:%M:%S") if isinstance(self.last_check_times[channel.id], datetime) else "‚Äî"
            else:
                status = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
                status_style = "yellow"
                check_time = "‚Äî"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            new_messages = str(self.channel_new_messages.get(channel.id, 0))
            
            table.add_row(
                animation,
                str(i + 1),
                channel.title,
                f"[{status_style}]{status}[/{status_style}]",
                new_messages,
                check_time
            )
        
        return table
    
    def _create_checking_stats(self) -> Text:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        stats_text = Text()
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        animation_chars = ["üîç", "üîé", "üîç", "üîé"]
        current_time = int(time.time() * 2) % len(animation_chars)
        animation = animation_chars[current_time]
        
        stats_text.append(f"{animation} –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤\n\n", style="bold yellow")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checked_count = len(self.last_check_times)
        total_count = len(self.channels)
        
        stats_text.append("üìã ", style="green")
        stats_text.append(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_count}\n", style="green")
        
        stats_text.append("‚úÖ ", style="blue")
        stats_text.append(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked_count}\n", style="blue")
        
        stats_text.append("‚è≥ ", style="yellow")
        stats_text.append(f"–û—Å—Ç–∞–ª–æ—Å—å: {total_count - checked_count}\n", style="yellow")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if total_count > 0:
            progress = (checked_count / total_count) * 100
            stats_text.append(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n", style="cyan")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_length = 20
            filled_length = int(bar_length * progress / 100)
            bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
            stats_text.append(f"[{bar}] {progress:.1f}%\n", style="cyan")
        
        # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if hasattr(self, '_last_check_time'):
            check_duration = (datetime.now() - self._last_check_time).total_seconds()
            stats_text.append(f"\n‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_duration:.1f}—Å\n", style="blue")
        
        return stats_text
    
    def _create_checking_footer(self) -> Text:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≤–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        footer_text = Text()
        footer_text.append("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", style="bold yellow")
        footer_text.append(" | ", style="dim")
        footer_text.append("–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", style="cyan")
        footer_text.append(" | ", style="dim")
        footer_text.append("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", style="green")
        return footer_text
    
    def _create_results_table(self) -> Table:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        table = Table(
            box=box.ROUNDED,
            show_header=True,
            header_style="bold white",
            expand=True,
            min_width=80
        )
        
        table.add_column("‚Ññ", style="cyan", width=3, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green", ratio=3)
        table.add_column("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", style="yellow", width=12, justify="center")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="blue", width=15, justify="center")
        table.add_column("–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏", style="magenta", width=12)
        
        total_new_messages = 0
        channels_with_messages = 0
        
        for i, channel in enumerate(self.channels):
            new_messages = self.channel_new_messages.get(channel.id, 0)
            total_new_messages += new_messages
            
            if new_messages > 0:
                channels_with_messages += 1
                status = f"‚úÖ {new_messages} –Ω–æ–≤—ã—Ö"
                status_style = "green"
            else:
                status = "‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö"
                status_style = "blue"
            
            check_time = self.last_check_times[channel.id].strftime("%H:%M:%S") if channel.id in self.last_check_times and isinstance(self.last_check_times[channel.id], datetime) else "‚Äî"
            
            table.add_row(
                str(i + 1),
                channel.title,
                str(new_messages),
                f"[{status_style}]{status}[/{status_style}]",
                check_time
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Ç–æ–≥–∞–º–∏
        table.add_section()
        table.add_row(
            "–ò–¢–û–ì–û:",
            f"{len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤",
            str(total_new_messages),
            f"‚úÖ {channels_with_messages} —Å –Ω–æ–≤—ã–º–∏",
            ""
        )
        
        return table
    
    def _create_final_stats(self) -> Text:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_text = Text()
        
        stats_text.append("üìä –ò—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n", style="bold green")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_channels = len(self.channels)
        total_new_messages = sum(self.channel_new_messages.values())
        channels_with_messages = sum(1 for count in self.channel_new_messages.values() if count > 0)
        
        stats_text.append("üìã ", style="green")
        stats_text.append(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n", style="green")
        
        stats_text.append("üÜï ", style="yellow")
        stats_text.append(f"–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {total_new_messages}\n", style="yellow")
        
        stats_text.append("‚úÖ ", style="blue")
        stats_text.append(f"–ö–∞–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤—ã–º–∏: {channels_with_messages}\n", style="blue")
        
        stats_text.append("‚ÑπÔ∏è ", style="cyan")
        stats_text.append(f"–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_channels - channels_with_messages}\n", style="cyan")
        
        # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if hasattr(self, '_last_check_time'):
            check_duration = (datetime.now() - self._last_check_time).total_seconds()
            stats_text.append(f"\n‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_duration:.1f}—Å\n", style="blue")
        
        # –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        stats_text.append("\nüîÑ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n", style="bold yellow")
        stats_text.append(f"‚è∞ –ß–µ—Ä–µ–∑ {self.check_interval} —Å–µ–∫—É–Ω–¥\n", style="blue")
        
        return stats_text
    
    def _create_final_footer(self) -> Text:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–≤–∞–ª–∞"""
        footer_text = Text()
        footer_text.append("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", style="bold green")
        footer_text.append(" | ", style="dim")
        footer_text.append("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", style="cyan")
        footer_text.append(" | ", style="dim")
        footer_text.append("Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞", style="yellow")
        return footer_text
    
    async def _check_channels_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            self._last_check_time = datetime.now()
            self.filter_logger.debug(f"Starting channels check at {self._last_check_time}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            await self._show_checking_status()
            
            for i, channel in enumerate(self.channels):
                if self.should_stop:
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.last_check_times[channel.id] = datetime.now()
                self.filter_logger.debug(f"Checking channel {i+1}/{len(self.channels)}: {channel.title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                useful_messages, filtered_messages = await self._check_single_channel(channel)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞
                self.channel_new_messages[channel.id] = useful_messages + filtered_messages
                self.channel_useful_messages[channel.id] = useful_messages
                self.channel_filtered_messages[channel.id] = filtered_messages
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ MD —Ñ–∞–π–ª
                if useful_messages > 0 and self.telegram_connected and self.exporter:
                    self.console.print(f"[blue]üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç {useful_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {channel.title}[/blue]")
                    await self._export_new_messages_to_md(channel, useful_messages)
                elif useful_messages > 0 and not self.telegram_connected:
                    self.console.print(f"[yellow]‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {channel.title}, –Ω–æ Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–¥–µ–º–æ-—Ä–µ–∂–∏–º)[/yellow]")
                elif useful_messages == 0 and filtered_messages > 0:
                    mode = "–¥–µ–º–æ-—Ä–µ–∂–∏–º" if not self.telegram_connected else "—Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"
                    self.console.print(f"[dim]‚ÑπÔ∏è –í {channel.title} –Ω–∞–π–¥–µ–Ω—ã {filtered_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã ({mode})[/dim]")
                    self.console.print(f"[dim]   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏[/dim]")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.export_stats['checked_channels'] += 1
                if useful_messages > 0 or filtered_messages > 0:
                    self.export_stats['new_messages'] += useful_messages + filtered_messages
                    self.export_stats['filtered_messages'] += filtered_messages
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                await asyncio.sleep(0.5)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self._save_channels_state()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await self._show_final_check_status()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ Telegram
            await self._send_check_summary()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            total_useful = sum(self.channel_useful_messages.values())
            total_filtered = sum(self.channel_filtered_messages.values())
            self.filter_logger.debug(f"Channels check completed. Total useful: {total_useful}, total filtered: {total_filtered}")
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}[/red]")
            self.filter_logger.error(f"Error during channels check: {e}")
            self.export_stats['errors'] += 1
    
    async def _check_single_channel(self, channel: ChannelInfo) -> tuple:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            self.filter_logger.debug(f"Checking single channel: {channel.title}, last_message_id: {channel.last_message_id}")
            
            # –ï—Å–ª–∏ Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
            if not self.telegram_connected or not self.exporter or not self.exporter.client:
                self.filter_logger.debug(f"Working in demo mode for {channel.title}")
                await asyncio.sleep(0.1)  # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–π 5-–π –∫–∞–Ω–∞–ª)
                if channel.id % 5 == 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    channel.last_message_id += 1
                    channel.last_check = datetime.now().isoformat()
                    channel.last_message_date = datetime.now().isoformat()
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: 70% –ø–æ–ª–µ–∑–Ω—ã—Ö, 30% –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                    total_messages = 1
                    useful_messages = int(total_messages * 0.7)
                    filtered_messages = total_messages - useful_messages
                    self.filter_logger.debug(f"Demo mode simulation for {channel.title}: useful={useful_messages}, filtered={filtered_messages}")
                    return (useful_messages, filtered_messages)
                return (0, 0)
            
            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API
            try:
                self.filter_logger.debug(f"Getting entity for channel {channel.title}")
                entity = await self.exporter.client.get_entity(channel.id)
                messages = await self.exporter.client.get_messages(entity, limit=1)
                
                if messages and len(messages) > 0:
                    last_message = messages[0]
                    self.console.print(f"[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {channel.title}: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID={last_message.id}, –∏–∑–≤–µ—Å—Ç–Ω—ã–π ID={channel.last_message_id}[/blue]")
                    self.filter_logger.debug(f"Last message ID: {last_message.id}, known ID: {channel.last_message_id}")
                    
                    if last_message.id > channel.last_message_id:
                        new_messages_count = last_message.id - channel.last_message_id
                        self.console.print(f"[green]‚úÖ –ù–∞–π–¥–µ–Ω–æ {new_messages_count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {channel.title}[/green]")
                        self.filter_logger.debug(f"Found {new_messages_count} new messages in {channel.title}")
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
                        useful_messages = 0
                        filtered_messages = 0
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                        # min_id=channel.last_message_id –æ–∑–Ω–∞—á–∞–µ—Ç "—Å–æ–æ–±—â–µ–Ω–∏—è —Å ID –±–æ–ª—å—à–µ last_message_id"
                        new_messages = await self.exporter.client.get_messages(
                            entity, 
                            min_id=channel.last_message_id,
                            limit=new_messages_count
                        )
                        
                        for message in new_messages:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                            message_text = getattr(message, 'text', '') or getattr(message, 'message', '') or ''
                            
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
                            message_date = self._format_message_date(message)
                            
                            message_id = str(getattr(message, 'id', 'unknown'))
                            self.filter_logger.debug(f"Processing message from {channel.title}, ID: {message_id}, date: {message_date}")
                            
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            self._test_message_filtering(message_text, channel.title, message_date, message_id)
                            
                            should_filter, filter_reason = self.content_filter.should_filter_message(message_text)
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
                            self.filter_logger.debug(f"Main loop filter result: should_filter={should_filter}, reason='{filter_reason}'")
                            
                            if should_filter:
                                filtered_messages += 1
                                date_info = f" –æ—Ç {message_date}" if message_date else ""
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º filter_reason –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
                                if not filter_reason or filter_reason.strip() == "":
                                    self.filter_logger.error(f"CRITICAL: Empty filter_reason in main loop! Channel: {channel.title}, Message ID: {message_id}")
                                    filter_reason = "–û–®–ò–ë–ö–ê: –ü—Ä–∏—á–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                                
                                self.console.print(f"[red]‚ùå –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û: {channel.title}{date_info} - {filter_reason}[/red]")
                                
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                self._log_filtered_message(channel.title, message_date, message_text, filter_reason, message_id)
                            else:
                                useful_messages += 1
                                date_info = f" –æ—Ç {message_date}" if message_date else ""
                                self.console.print(f"[green]‚úÖ –ü–†–ò–ù–Ø–¢–û: {channel.title}{date_info}[/green]")
                                
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                self._log_passed_message(channel.title, message_date, message_text, message_id)
                        
                        self.console.print(f"[cyan]üìä {channel.title}: –ø–æ–ª–µ–∑–Ω—ã—Ö={useful_messages}, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ={filtered_messages}[/cyan]")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª—É
                        if useful_messages > 0 or filtered_messages > 0:
                            self.filter_logger.info(f"CHANNEL_STATS: {channel.title} - useful={useful_messages}, filtered={filtered_messages}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                        channel.last_message_id = last_message.id
                        channel.last_check = datetime.now().isoformat()
                        channel.last_message_date = last_message.date.isoformat()
                        return (useful_messages, filtered_messages)
                    else:
                        self.console.print(f"[dim]‚ÑπÔ∏è {channel.title}: –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç[/dim]")
                else:
                    self.console.print(f"[yellow]‚ö†Ô∏è {channel.title}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è[/yellow]")
                
                return (0, 0)
                
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                await asyncio.sleep(0.1)
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–π 5-–π –∫–∞–Ω–∞–ª)
                if channel.id % 5 == 0:
                    channel.last_message_id += 1
                    channel.last_check = datetime.now().isoformat()
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: 70% –ø–æ–ª–µ–∑–Ω—ã—Ö, 30% –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                    total_messages = 1
                    useful_messages = int(total_messages * 0.7)
                    filtered_messages = total_messages - useful_messages
                    return (useful_messages, filtered_messages)
                return (0, 0)
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel.title}: {e}[/red]")
            self.export_stats['errors'] += 1
            return (0, 0)
    
    def _format_message_date(self, message) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not hasattr(message, 'date') or not message.date:
            return ""
        
        try:
            from datetime import datetime
            if isinstance(message.date, datetime):
                return message.date.strftime("%Y-%m-%d %H:%M")
            else:
                return str(message.date)
        except Exception:
            return str(getattr(message, 'date', ''))
    
    def _log_filtered_message(self, channel_title: str, message_date: str, message_text: str, filter_reason: str, message_id: str = ""):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ads.log"""
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
        truncated_text = message_text[:200] + "..." if len(message_text) > 200 else message_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º filter_reason
        if not filter_reason or filter_reason.strip() == "":
            filter_reason = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            self.filter_logger.warning(f"Empty filter_reason for message from {channel_title}, ID: {message_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        log_entry = f"FILTERED_MESSAGE | Channel: {channel_title} | Date: {message_date} | ID: {message_id} | Reason: {filter_reason} | Text: {truncated_text}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å —É—Ä–æ–≤–Ω–µ–º INFO –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.filter_logger.info(log_entry)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Å —É—Ä–æ–≤–Ω–µ–º DEBUG –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.filter_logger.debug(f"Full filtered message details - Channel: {channel_title}, Date: {message_date}, ID: {message_id}, Reason: {filter_reason}, Full text: {message_text}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.filter_logger.debug(f"Filter reason debug - Original reason: '{filter_reason}', Length: {len(filter_reason)}, Type: {type(filter_reason)}")
    
    def _log_passed_message(self, channel_title: str, message_date: str, message_text: str, message_id: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä"""
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
        truncated_text = message_text[:200] + "..." if len(message_text) > 200 else message_text
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        log_entry = f"PASSED_MESSAGE | Channel: {channel_title} | Date: {message_date} | ID: {message_id} | Text: {truncated_text}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å —É—Ä–æ–≤–Ω–µ–º INFO
        self.filter_logger.info(log_entry)
    
    def _test_message_filtering(self, message_text: str, channel_title: str = "", message_date: str = "", message_id: str = "") -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        self.filter_logger.debug(f"Testing message filtering for channel: {channel_title}, date: {message_date}, ID: {message_id}")
        
        if not message_text or message_text.strip() == "":
            self.console.print(f"[yellow]‚ö†Ô∏è –ü–£–°–¢–û–ï –°–û–û–ë–©–ï–ù–ò–ï –≤ {channel_title}[/yellow]")
            self.filter_logger.warning(f"Empty message detected in channel: {channel_title}")
            return
            
        should_filter, filter_reason = self.content_filter.should_filter_message(message_text)
        date_info = f" –æ—Ç {message_date}" if message_date else ""
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.filter_logger.debug(f"Filter result: should_filter={should_filter}, reason='{filter_reason}'")
        self.filter_logger.debug(f"Filter reason details - Value: '{filter_reason}', Length: {len(filter_reason) if filter_reason else 0}, Type: {type(filter_reason)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ filter_reason –Ω–µ –ø—É—Å—Ç–æ–π
        if should_filter and (not filter_reason or filter_reason.strip() == ""):
            self.filter_logger.error(f"CRITICAL: Message should be filtered but filter_reason is empty! Channel: {channel_title}, Text: {message_text[:100]}")
            filter_reason = "–û–®–ò–ë–ö–ê: –ü—Ä–∏—á–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        
        if should_filter:
            self.console.print(f"[yellow]üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: {channel_title}{date_info} - {filter_reason}[/yellow]")
            self.console.print(f"[dim]üìù –¢–µ–∫—Å—Ç: {message_text[:200]}...[/dim]")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self._log_filtered_message(channel_title, message_date, message_text, filter_reason, message_id)
        else:
            self.console.print(f"[green]‚úÖ –ü–†–û–ô–î–ï–¢ –§–ò–õ–¨–¢–†: {channel_title}{date_info}[/green]")
            self.console.print(f"[dim]üìù –¢–µ–∫—Å—Ç: {message_text[:200]}...[/dim]")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self._log_passed_message(channel_title, message_date, message_text, message_id)
    
    async def _export_new_messages_to_md(self, channel: ChannelInfo, useful_messages_count: int):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ MD —Ñ–∞–π–ª"""
        try:
            if not self.exporter or not self.exporter.client:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            entity = await self.exporter.client.get_entity(channel.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            # min_id=channel.last_message_id –æ–∑–Ω–∞—á–∞–µ—Ç "—Å–æ–æ–±—â–µ–Ω–∏—è —Å ID –±–æ–ª—å—à–µ last_message_id"
            new_messages = []
            messages = await self.exporter.client.get_messages(
                entity, 
                min_id=channel.last_message_id - useful_messages_count,  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å –Ω—É–∂–Ω–æ–≥–æ ID
                limit=useful_messages_count * 2  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ (–Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            self.filter_logger.debug(f"Starting export filtering for {channel.title}, need {useful_messages_count} useful messages")
            
            for message in messages:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                message_text = getattr(message, 'text', '') or getattr(message, 'message', '') or ''
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
                message_date = self._format_message_date(message)
                message_id = str(getattr(message, 'id', 'unknown'))
                
                self.filter_logger.debug(f"Export filtering message ID {message_id} from {channel.title}")
                
                should_filter, filter_reason = self.content_filter.should_filter_message(message_text)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                self.filter_logger.debug(f"Export filter result: should_filter={should_filter}, reason='{filter_reason}'")
                
                if not should_filter:
                    new_messages.append(message)
                    self.filter_logger.debug(f"Message ID {message_id} added to export queue")
                    if len(new_messages) >= useful_messages_count:
                        self.filter_logger.debug(f"Reached target count {useful_messages_count} for export")
                        break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∫–æ–≥–¥–∞ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                else:
                    date_info = f" –æ—Ç {message_date}" if message_date else ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º filter_reason –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    if not filter_reason or filter_reason.strip() == "":
                        self.filter_logger.error(f"CRITICAL: Empty filter_reason in export! Channel: {channel.title}, Message ID: {message_id}")
                        filter_reason = "–û–®–ò–ë–ö–ê: –ü—Ä–∏—á–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                    
                    self.console.print(f"[dim]üîç –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ{date_info}: {filter_reason}[/dim]")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ
                    self._log_filtered_message(channel.title, message_date, message_text, f"EXPORT_FILTER: {filter_reason}", message_id)
            
            if not new_messages:
                self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ {channel.title}[/yellow]")
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞
            from pathlib import Path
            try:
                storage_cfg = self.config_manager.config.storage
                base_dir = getattr(storage_cfg, 'export_base_dir', 'exports') or 'exports'
            except Exception:
                base_dir = 'exports'
            
            base_path = Path(base_dir)
            base_path.mkdir(parents=True, exist_ok=True)
            sanitized_title = self.exporter._sanitize_channel_filename(channel.title)
            channel_dir = base_path / sanitized_title
            channel_dir.mkdir(exist_ok=True)
            
            # –ü—É—Ç—å –∫ MD —Ñ–∞–π–ª—É
            md_file_path = channel_dir / f"{sanitized_title}.md"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            from exporters import MarkdownExporter
            md_exporter = MarkdownExporter(str(channel_dir), sanitized_title)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_data = []
            for message in new_messages:
                message_data = self.exporter._convert_message_to_dict(message, entity)
                if message_data:
                    messages_data.append(message_data)
            
            if messages_data:
                self.console.print(f"[blue]üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {channel.title}[/blue]")
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –¥–æ–ø–∏—Å—ã–≤–∞–Ω–∏—è
                md_file = md_exporter.export_messages(messages_data, append_mode=True)
                
                if md_file and Path(md_file).exists():
                    self.console.print(f"[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(messages_data)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {channel.title}[/green]")
                    self.export_stats['exported_messages'] += len(messages_data)
                else:
                    self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {channel.title}[/yellow]")
            else:
                self.console.print(f"[yellow]‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ {channel.title}[/yellow]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {channel.title}: {e}[/red]")
            self.export_stats['errors'] += 1
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            if self.telegram_connected and self.exporter and hasattr(self.exporter, 'disconnect'):
                self.console.print("[blue]üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...[/blue]")
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                await self.exporter.disconnect()
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
                await asyncio.sleep(2)
                
                self.console.print("[green]‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω[/green]")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
            self.should_stop = True
            
            self.console.print("[green]‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}[/red]")
    
    async def _send_check_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            if self.should_stop:
                return
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–∫–∏
            check_duration = (datetime.now() - self._last_check_time).total_seconds() if hasattr(self, '_last_check_time') else 0
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            channels_with_updates = []
            total_useful_messages = 0
            total_filtered_messages = 0
            channels_with_messages = 0
            
            for channel in self.channels:
                useful_messages = self.channel_useful_messages.get(channel.id, 0)
                filtered_messages = self.channel_filtered_messages.get(channel.id, 0)
                total_messages = useful_messages + filtered_messages
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if useful_messages > 0:
                    channel_info = {
                        'channel': channel.title,
                        'new_messages': total_messages,
                        'useful_messages': useful_messages
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if filtered_messages > 0:
                        channel_info['filtered_messages'] = filtered_messages
                    
                    channels_with_updates.append(channel_info)
                    total_useful_messages += useful_messages
                    total_filtered_messages += filtered_messages
                    channels_with_messages += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            total_new_messages = total_useful_messages + total_filtered_messages
            
            if total_new_messages == 0:
                self.console.print("[blue]‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è[/blue]")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–¥–∫–∏
            check_results = {
                'total_channels': len(self.channels),
                'checked_channels': len(self.channels),
                'new_messages': total_new_messages,
                'useful_messages': total_useful_messages,
                'filtered_messages': total_filtered_messages,
                'channels_with_messages': channels_with_messages,
                'channels_with_updates': channels_with_updates,
                'check_duration': check_duration,
                'check_interval': self.check_interval
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.telegram_notifier.send_continuous_check_summary(check_results)
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}[/red]")
    
    def _save_channels_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            if not self.channels:
                return
            
            state_data = {}
            for channel in self.channels:
                state_data[str(channel.id)] = {
                    'last_message_id': channel.last_message_id,
                    'last_check': channel.last_check,
                    'title': channel.title,
                    'username': getattr(channel, 'username', ''),
                    'description': getattr(channel, 'description', ''),
                    'subscribers_count': getattr(channel, 'subscribers_count', 0),
                    'total_messages': getattr(channel, 'total_messages', 0),
                    'media_size_mb': getattr(channel, 'media_size_mb', 0.0)
                }
            
            import json
            with open(self.channels_state_file, 'w', encoding='utf-8') as f:
                json.dump(state_data, f, ensure_ascii=False, indent=2)
            
            self.console.print(f"[green]‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}[/red]")
    
    def _load_channels_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º last_message_id –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            for channel in self.channels:
                if not hasattr(channel, 'last_message_id') or channel.last_message_id is None:
                    channel.last_message_id = 0
            
            if not self.channels_state_file.exists():
                self.console.print("[blue]‚ÑπÔ∏è –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω—É–ª—è[/blue]")
                return
            
            import json
            with open(self.channels_state_file, 'r', encoding='utf-8') as f:
                state_data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
            updated_count = 0
            for channel in self.channels:
                channel_id_str = str(channel.id)
                if channel_id_str in state_data:
                    state = state_data[channel_id_str]
                    channel.last_message_id = state.get('last_message_id', channel.last_message_id)
                    channel.last_check = state.get('last_check', channel.last_check)
                    updated_count += 1
                else:
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º last_message_id –∫–∞–∫ 0
                    # —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if not hasattr(channel, 'last_message_id') or channel.last_message_id is None:
                        channel.last_message_id = 0
            
            if updated_count > 0:
                self.console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {updated_count} –∫–∞–Ω–∞–ª–æ–≤[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}[/red]")
    
    def _add_channel_to_state(self, channel: ChannelInfo):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state_data = {}
            if self.channels_state_file.exists():
                import json
                with open(self.channels_state_file, 'r', encoding='utf-8') as f:
                    state_data = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            state_data[str(channel.id)] = {
                'last_message_id': channel.last_message_id,
                'last_check': channel.last_check,
                'title': channel.title,
                'username': getattr(channel, 'username', ''),
                'description': getattr(channel, 'description', ''),
                'subscribers_count': getattr(channel, 'subscribers_count', 0),
                'total_messages': getattr(channel, 'total_messages', 0),
                'media_size_mb': getattr(channel, 'media_size_mb', 0.0)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            import json
            with open(self.channels_state_file, 'w', encoding='utf-8') as f:
                json.dump(state_data, f, ensure_ascii=False, indent=2)
            
            self.console.print(f"[green]‚úÖ –ö–∞–Ω–∞–ª {channel.title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}[/red]")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    console = Console()
    
    try:
        exporter = ContinuousExporter(console)
        await exporter.start_continuous_export()
        
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        console.print("[green]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")


if __name__ == "__main__":
    asyncio.run(main())
