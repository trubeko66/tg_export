#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import time
from pathlib import Path
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.panel import Panel


class SettingsMethods:
    """–ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    def __init__(self, console, config_manager):
        self.console = console
        self.config_manager = config_manager
    
    async def show_config_management(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        self.console.clear()
        
        config_panel = Panel(
            "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n\n"
            "1. üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞\n"
            "2. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª\n"
            "3. üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
            "4. üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π",
            border_style="cyan"
        )
        
        self.console.print(config_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            choices=["1", "2", "3", "4", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                file_path = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                if Path(file_path).exists():
                    self.config_manager.config_file = Path(file_path)
                    self.config_manager.config = self.config_manager._load_config()
                    self.console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞[/green]")
                else:
                    self.console.print("[red]‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
            
            elif choice == "2":
                file_path = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", default=".config.json")
                self.config_manager.config_file = Path(file_path)
                self.config_manager.save_config()
                self.console.print(f"[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path}[/green]")
            
            elif choice == "3":
                self.config_manager.config = self.config_manager._load_config()
                self.console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞[/green]")
            
            elif choice == "4":
                self.console.print(f"[blue]üìÅ –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_manager.config_file.absolute()}[/blue]")
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_telegram_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API"""
        self.console.clear()
        
        config = self.config_manager.config
        
        telegram_panel = Panel(
            f"üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ API ID: {config.telegram.api_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ API Hash: {'*' * 8 if config.telegram.api_hash else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ Phone: {config.telegram.phone or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n"
            f"1. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å API ID\n"
            f"2. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å API Hash\n"
            f"3. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            f"4. üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
            f"5. üîê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
            f"6. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏\n"
            f"0. üîô –ù–∞–∑–∞–¥",
            title="üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API",
            border_style="green"
        )
        
        self.console.print(telegram_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            choices=["1", "2", "3", "4", "5", "6", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                new_api_id = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API ID")
                if new_api_id.isdigit():
                    config.telegram.api_id = int(new_api_id)
                    self.console.print("[green]‚úÖ API ID –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
                else:
                    self.console.print("[red]‚ùå API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º[/red]")
            
            elif choice == "2":
                new_api_hash = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API Hash")
                config.telegram.api_hash = new_api_hash
                self.console.print("[green]‚úÖ API Hash –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
            
            elif choice == "3":
                new_phone = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                config.telegram.phone = new_phone
                self.console.print("[green]‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
            
            elif choice == "4":
                if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram?"):
                    config.telegram.api_id = None
                    config.telegram.api_hash = None
                    config.telegram.phone = None
                    self.console.print("[green]‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Å–±—Ä–æ—à–µ–Ω—ã[/green]")
            
            elif choice == "5":
                await self.force_telegram_reauth()
            
            elif choice == "6":
                await self.clear_locked_sessions()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def force_telegram_reauth(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram"""
        self.console.clear()
        
        info_panel = Panel(
            "üîê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è:\n"
            "‚Ä¢ –£–¥–∞–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é Telegram\n"
            "‚Ä¢ –ó–∞—Å—Ç–∞–≤–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ—Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)\n"
            "‚Ä¢ –û–±–µ—Å–ø–µ—á–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –≤–∞—à–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            title="üîê –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            border_style="yellow"
        )
        
        self.console.print(info_panel)
        
        if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è?"):
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TelegramExporter –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏
                from telegram_exporter import TelegramExporter
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏
                temp_exporter = TelegramExporter()
                temp_exporter.config_manager = self.config_manager
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = self.config_manager.config
                if not config.telegram.api_id:
                    self.console.print("[red]‚ùå API ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
                    return
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                session_name = f'session_{config.telegram.api_id}'
                await temp_exporter._clear_session(session_name)
                
                self.console.print("[green]‚úÖ –°–µ—Å—Å–∏—è Telegram –æ—á–∏—â–µ–Ω–∞[/green]")
                self.console.print("[yellow]‚ö†Ô∏è –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è[/yellow]")
                
            except Exception as e:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}[/red]")
        else:
            self.console.print("[blue]–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞[/blue]")
    
    async def clear_locked_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        self.console.clear()
        
        info_panel = Panel(
            "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è:\n"
            "‚Ä¢ –ù–∞–π–¥–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π Telegram\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\n"
            "‚Ä¢ –£–¥–∞–ª–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ –û—á–∏—Å—Ç–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!",
            title="üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π",
            border_style="yellow"
        )
        
        self.console.print(info_panel)
        
        if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏?"):
            try:
                from pathlib import Path
                import glob
                
                # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
                session_files = glob.glob("session_*.session")
                session_files.extend(glob.glob("session_*.session-journal"))
                session_files.extend(glob.glob("session_*.session-wal"))
                
                if not session_files:
                    self.console.print("[blue]üìÅ –§–∞–π–ª—ã —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/blue]")
                    return
                
                self.console.print(f"[blue]üîç –ù–∞–π–¥–µ–Ω–æ {len(session_files)} —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π[/blue]")
                
                cleared_count = 0
                for session_file in session_files:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        with open(session_file, 'r+b') as f:
                            pass
                        self.console.print(f"[green]‚úÖ {session_file} - –¥–æ—Å—Ç—É–ø–µ–Ω[/green]")
                    except (PermissionError, OSError) as e:
                        if "database is locked" in str(e) or "Permission denied" in str(e):
                            try:
                                Path(session_file).unlink()
                                self.console.print(f"[yellow]üóëÔ∏è {session_file} - —É–¥–∞–ª–µ–Ω (–±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)[/yellow]")
                                cleared_count += 1
                            except Exception as delete_error:
                                self.console.print(f"[red]‚ùå {session_file} - –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {delete_error}[/red]")
                        else:
                            self.console.print(f"[red]‚ùå {session_file} - –æ—à–∏–±–∫–∞: {e}[/red]")
                
                if cleared_count > 0:
                    self.console.print(f"[green]‚úÖ –û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤[/green]")
                    self.console.print("[yellow]‚ö†Ô∏è –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è[/yellow]")
                else:
                    self.console.print("[blue]‚ÑπÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/blue]")
                
            except Exception as e:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}[/red]")
        else:
            self.console.print("[blue]–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞[/blue]")
    
    async def show_bot_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        self.console.clear()
        
        config = self.config_manager.config
        
        bot_panel = Panel(
            f"ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ Bot Token: {'*' * 8 if config.bot.token else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ Chat ID: {config.bot.chat_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ Notifications: {config.bot.notifications}\n\n"
            f"1. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Bot Token\n"
            f"2. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Chat ID\n"
            f"3. üîî –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            f"4. üß™ –¢–µ—Å—Ç –±–æ—Ç–∞\n"
            f"0. üîô –ù–∞–∑–∞–¥",
            title="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞",
            border_style="magenta"
        )
        
        self.console.print(bot_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            choices=["1", "2", "3", "4", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                new_token = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Bot Token")
                config.bot.token = new_token
                self.console.print("[green]‚úÖ Bot Token –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
            
            elif choice == "2":
                new_chat_id = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Chat ID")
                if new_chat_id.lstrip('-').isdigit():
                    config.bot.chat_id = int(new_chat_id)
                    self.console.print("[green]‚úÖ Chat ID –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
                else:
                    self.console.print("[red]‚ùå Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º[/red]")
            
            elif choice == "3":
                config.bot.notifications = not config.bot.notifications
                status = "–≤–∫–ª—é—á–µ–Ω—ã" if config.bot.notifications else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
                self.console.print(f"[green]‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}[/green]")
            
            elif choice == "4":
                await self.test_bot()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_webdav_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebDAV"""
        self.console.clear()
        
        config = self.config_manager.config
        
        webdav_panel = Panel(
            f"‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebDAV\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ URL: {config.webdav.url or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ Username: {config.webdav.username or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ Password: {'*' * 8 if config.webdav.password else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            f"‚Ä¢ Enabled: {config.webdav.enabled}\n\n"
            f"1. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            f"2. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Username\n"
            f"3. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Password\n"
            f"4. üîÑ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å WebDAV\n"
            f"5. üß™ –¢–µ—Å—Ç WebDAV\n"
            f"0. üîô –ù–∞–∑–∞–¥",
            title="‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebDAV",
            border_style="blue"
        )
        
        self.console.print(webdav_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            choices=["1", "2", "3", "4", "5", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                new_url = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL")
                config.webdav.url = new_url
                self.console.print("[green]‚úÖ URL –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
            
            elif choice == "2":
                new_username = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Username")
                config.webdav.username = new_username
                self.console.print("[green]‚úÖ Username –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
            
            elif choice == "3":
                new_password = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Password", password=True)
                config.webdav.password = new_password
                self.console.print("[green]‚úÖ Password –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
            
            elif choice == "4":
                config.webdav.enabled = not config.webdav.enabled
                status = "–≤–∫–ª—é—á–µ–Ω" if config.webdav.enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
                self.console.print(f"[green]‚úÖ WebDAV {status}[/green]")
            
            elif choice == "5":
                await self.test_webdav()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_storage_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        self.console.clear()
        
        config = self.config_manager.config
        
        storage_panel = Panel(
            f"üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ Export Directory: {config.storage.export_base_dir}\n"
            f"‚Ä¢ Media Threads: {config.storage.media_download_threads}\n"
            f"‚Ä¢ Adaptive Download: {config.storage.adaptive_download}\n"
            f"‚Ä¢ Min Delay: {config.storage.min_download_delay}s\n"
            f"‚Ä¢ Max Delay: {config.storage.max_download_delay}s\n\n"
            f"1. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
            f"2. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤\n"
            f"3. ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏\n"
            f"4. üîÑ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É\n"
            f"5. üìÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
            f"0. üîô –ù–∞–∑–∞–¥",
            title="üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è",
            border_style="yellow"
        )
        
        self.console.print(storage_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            choices=["1", "2", "3", "4", "5", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                new_dir = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞", default=config.storage.export_base_dir)
                config.storage.export_base_dir = new_dir
                self.console.print(f"[green]‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_dir}[/green]")
            
            elif choice == "2":
                new_threads = IntPrompt.ask("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤", default=config.storage.media_download_threads)
                if 1 <= new_threads <= 32:
                    config.storage.media_download_threads = new_threads
                    self.console.print(f"[green]‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_threads}[/green]")
                else:
                    self.console.print("[red]‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 32[/red]")
            
            elif choice == "3":
                min_delay = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (—Å–µ–∫—É–Ω–¥—ã)", default=str(config.storage.min_download_delay))
                max_delay = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (—Å–µ–∫—É–Ω–¥—ã)", default=str(config.storage.max_download_delay))
                try:
                    config.storage.min_download_delay = float(min_delay)
                    config.storage.max_download_delay = float(max_delay)
                    self.console.print("[green]‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã[/green]")
                except ValueError:
                    self.console.print("[red]‚ùå –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏[/red]")
            
            elif choice == "4":
                config.storage.adaptive_download = not config.storage.adaptive_download
                status = "–≤–∫–ª—é—á–µ–Ω–∞" if config.storage.adaptive_download else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
                self.console.print(f"[green]‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {status}[/green]")
            
            elif choice == "5":
                export_dir = Path(config.storage.export_base_dir)
                if export_dir.exists():
                    self.console.print(f"[green]‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {export_dir.absolute()}[/green]")
                    self.console.print(f"[blue]üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {len(list(export_dir.iterdir()))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤[/blue]")
                else:
                    self.console.print(f"[yellow]‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {export_dir.absolute()}[/yellow]")
                    if Confirm.ask("–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é?"):
                        export_dir.mkdir(parents=True, exist_ok=True)
                        self.console.print("[green]‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞[/green]")
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def reset_settings(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.console.clear()
        
        if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"):
            self.config_manager.config = self.config_manager._load_config()
            self.console.print("[green]‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é[/green]")
        else:
            self.console.print("[yellow]–û—Ç–º–µ–Ω–µ–Ω–æ[/yellow]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.console.clear()
        
        try:
            self.config_manager.save_config()
            self.console.print("[green]‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã[/green]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def test_settings(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.console.clear()
        
        self.console.print("[blue]üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...[/blue]")
        
        config = self.config_manager.config
        
        # –¢–µ—Å—Ç Telegram API
        if config.telegram.api_id and config.telegram.api_hash:
            self.console.print("[green]‚úÖ Telegram API: –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/green]")
        else:
            self.console.print("[red]‚ùå Telegram API: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
        
        # –¢–µ—Å—Ç –±–æ—Ç–∞
        if config.bot.token and config.bot.chat_id:
            self.console.print("[green]‚úÖ Bot: –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/green]")
        else:
            self.console.print("[red]‚ùå Bot: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
        
        # –¢–µ—Å—Ç WebDAV
        if config.webdav.enabled and config.webdav.url:
            self.console.print("[green]‚úÖ WebDAV: –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/green]")
        else:
            self.console.print("[yellow]‚ö†Ô∏è WebDAV: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω[/yellow]")
        
        # –¢–µ—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        export_dir = Path(config.storage.export_base_dir)
        if export_dir.exists():
            self.console.print(f"[green]‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_dir.absolute()}[/green]")
        else:
            self.console.print(f"[red]‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def test_bot(self):
        """–¢–µ—Å—Ç –±–æ—Ç–∞"""
        self.console.clear()
        
        config = self.config_manager.config
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not config.bot.token:
            self.console.print("[red]‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
            self.console.print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if not config.bot.chat_id:
            self.console.print("[red]‚ùå Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
            self.console.print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_panel = Panel(
            f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>\n"
            f"üîë <b>–¢–æ–∫–µ–Ω:</b> {config.bot.token[:10]}...{config.bot.token[-5:]}\n"
            f"üí¨ <b>Chat ID:</b> {config.bot.chat_id}\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if config.bot.notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}",
            title="üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            border_style="blue"
        )
        
        self.console.print(settings_panel)
        self.console.print("[blue]üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞...[/blue]")
        
        try:
            import requests
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{config.bot.token}/sendMessage"
            data = {
                'chat_id': config.bot.chat_id,
                'text': 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram Channel Exporter',
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                self.console.print("[green]‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ[/green]")
            else:
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                error_info = self._parse_telegram_error(response)
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}[/red]")
                self.console.print(f"[red]‚ùå {error_info}[/red]")
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _parse_telegram_error(self, response) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–∫–∏ –æ—Ç Telegram API"""
        try:
            import json
            error_data = response.json()
            
            if 'description' in error_data:
                error_desc = error_data['description']
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
                if 'chat not found' in error_desc.lower():
                    return "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Chat ID –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç."
                elif 'bot was blocked' in error_desc.lower():
                    return "–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ."
                elif 'invalid token' in error_desc.lower():
                    return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
                elif 'chat_id is empty' in error_desc.lower():
                    return "Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞."
                elif 'message is too long' in error_desc.lower():
                    return "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç."
                elif 'parse_mode' in error_desc.lower():
                    return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–≥–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."
                else:
                    return error_desc
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {response.text}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {response.text}"
    
    async def test_webdav(self):
        """–¢–µ—Å—Ç WebDAV"""
        self.console.clear()
        
        config = self.config_manager.config
        
        if not config.webdav.enabled or not config.webdav.url:
            self.console.print("[red]‚ùå WebDAV –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        self.console.print("[blue]üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebDAV...[/blue]")
        
        try:
            import requests
            from requests.auth import HTTPBasicAuth
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            auth = HTTPBasicAuth(config.webdav.username, config.webdav.password)
            response = requests.request('PROPFIND', config.webdav.url, auth=auth, timeout=10)
            
            if response.status_code in [200, 207]:
                self.console.print("[green]‚úÖ WebDAV –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ[/green]")
            else:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}[/red]")
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebDAV: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
