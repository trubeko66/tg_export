#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import schedule
import time
import threading
from datetime import datetime, timezone, timedelta
from pathlib import Path
from typing import List, Dict, Optional

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich import box

from telegram_exporter import TelegramExporter, ChannelInfo
from config_manager import ConfigManager
from content_filter import ContentFilter


class DailyChannelChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, console: Console):
        self.console = console
        self.config_manager = ConfigManager()
        self.content_filter = ContentFilter()
        self.exporter = None
        self.channels = []
        # –ü–µ—Ä–º—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+5)
        self.perm_timezone = timezone(timedelta(hours=5))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.daily_stats = {
            'date': None,
            'total_channels': 0,
            'checked_channels': 0,
            'new_channels': 0,
            'new_messages': 0,
            'filtered_messages': 0,
            'exported_messages': 0,
            'errors': 0,
            'channels_with_updates': []
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—â–∏–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
            self.exporter = TelegramExporter()
            await self.exporter.initialize_client(force_reauth=False)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
            if self.config_manager.channels_file_exists():
                self.channels = self.config_manager.import_channels()
                self.console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏[/green]")
            else:
                self.console.print("[yellow]‚ö†Ô∏è –§–∞–π–ª –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω[/yellow]")
                return False
            
            return True
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
            return False
    
    def schedule_daily_check(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ 8:00 –ø–æ –ü–µ—Ä–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 8:00 –ø–æ –ü–µ—Ä–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            schedule.every().day.at("08:00").do(self._run_daily_check)
            
            self.console.print("[green]‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 8:00 –ø–æ –ü–µ—Ä–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏[/green]")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
            scheduler_thread.start()
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
    
    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def _run_daily_check(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–π–Ω–æ–º —Ü–∏–∫–ª–µ
            asyncio.run(self._perform_daily_check())
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
    
    async def _perform_daily_check(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            if not await self.initialize():
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.daily_stats = {
                'date': datetime.now(self.perm_timezone).strftime("%Y-%m-%d"),
                'total_channels': len(self.channels),
                'checked_channels': 0,
                'new_channels': 0,
                'new_messages': 0,
                'filtered_messages': 0,
                'exported_messages': 0,
                'errors': 0,
                'channels_with_updates': []
            }
            
            self.console.print(f"[blue]üîÑ –ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ - {self.daily_stats['date']}[/blue]")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            for channel in self.channels:
                try:
                    await self._check_channel_for_new_messages(channel)
                    self.daily_stats['checked_channels'] += 1
                    
                except Exception as e:
                    self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel.title}: {e}[/red]")
                    self.daily_stats['errors'] += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
            await self._send_daily_report()
            
            self.console.print(f"[green]‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
        finally:
            if self.exporter and hasattr(self.exporter, 'disconnect'):
                await self.exporter.disconnect()
    
    async def _check_channel_for_new_messages(self, channel: ChannelInfo):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
            last_message = await self._get_last_message_from_channel(channel)
            
            if not last_message:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if last_message.id > channel.last_message_id:
                new_messages_count = last_message.id - channel.last_message_id
                self.daily_stats['new_messages'] += new_messages_count
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                new_messages = await self._get_new_messages(channel, channel.last_message_id, last_message.id)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                filtered_messages = await self._apply_content_filtering(new_messages)
                self.daily_stats['filtered_messages'] += len(filtered_messages)
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if filtered_messages:
                    await self._export_new_messages(channel, filtered_messages)
                    self.daily_stats['exported_messages'] += len(filtered_messages)
                    self.daily_stats['channels_with_updates'].append({
                        'channel': channel.title,
                        'new_messages': len(filtered_messages)
                    })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel.last_message_id = last_message.id
                channel.last_check = datetime.now().isoformat()
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel.title}: {e}[/red]")
            raise
    
    async def _get_last_message_from_channel(self, channel: ChannelInfo):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return None
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}[/red]")
            return None
    
    async def _get_new_messages(self, channel: ChannelInfo, from_id: int, to_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return []
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}[/red]")
            return []
    
    async def _apply_content_filtering(self, messages: List):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        try:
            filtered_messages = []
            
            for message in messages:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                if self.content_filter.should_export_message(message):
                    filtered_messages.append(message)
            
            return filtered_messages
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}[/red]")
            return messages
    
    async def _export_new_messages(self, channel: ChannelInfo, messages: List):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π MD —Ñ–∞–π–ª"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–∞
            export_dir = Path(self.config_manager.config.storage.export_base_dir)
            channel_dir = export_dir / self._sanitize_filename(channel.title)
            md_file = channel_dir / "messages.md"
            
            if not md_file.exists():
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                await self._create_new_md_file(channel, messages, md_file)
            else:
                # –î–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                await self._append_to_existing_md_file(messages, md_file)
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}[/red]")
            raise
    
    async def _create_new_md_file(self, channel: ChannelInfo, messages: List, md_file: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ MD —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            md_file.parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
            content = f"# {channel.title}\n\n"
            content += f"**–ö–∞–Ω–∞–ª:** {channel.title}\n"
            content += f"**Username:** @{channel.username}\n"
            content += f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            content += "---\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for message in messages:
                content += self._format_message_for_md(message)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(md_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.console.print(f"[green]‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π MD —Ñ–∞–π–ª: {md_file}[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MD —Ñ–∞–π–ª–∞: {e}[/red]")
            raise
    
    async def _append_to_existing_md_file(self, messages: List, md_file: Path):
        """–î–æ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π MD —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            with open(md_file, 'r', encoding='utf-8') as f:
                existing_content = f.read()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_content = "\n\n---\n\n"
            new_content += f"## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            
            for message in messages:
                new_content += self._format_message_for_md(message)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(md_file, 'w', encoding='utf-8') as f:
                f.write(existing_content + new_content)
            
            self.console.print(f"[green]‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω MD —Ñ–∞–π–ª: {md_file}[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MD —Ñ–∞–π–ª–∞: {e}[/red]")
            raise
    
    def _format_message_for_md(self, message) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è MD —Ñ–∞–π–ª–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return f"**–°–æ–æ–±—â–µ–Ω–∏–µ {message.id}:** {message.text}\n\n"
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}[/red]")
            return ""
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        import re
        sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
        if len(sanitized) > 100:
            sanitized = sanitized[:100] + "..."
        return sanitized
    
    async def _send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –≤ Telegram"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            report = self._create_daily_report()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–±–µ–∑—É—Å–ª–æ–≤–Ω–æ)
            await self._send_telegram_message(report)
            
            self.console.print("[green]‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}[/red]")
    
    def _create_daily_report(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            report = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
            report += f"üìÖ –î–∞—Ç–∞: {self.daily_stats['date']}\n\n"
            
            report += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            report += f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {self.daily_stats['total_channels']}\n"
            report += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {self.daily_stats['checked_channels']}\n"
            report += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {self.daily_stats['new_messages']}\n"
            report += f"‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.daily_stats['filtered_messages']}\n"
            report += f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.daily_stats['exported_messages']}\n"
            report += f"‚Ä¢ –û—à–∏–±–æ–∫: {self.daily_stats['errors']}\n\n"
            
            if self.daily_stats['channels_with_updates']:
                report += f"üîÑ –ö–∞–Ω–∞–ª—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏:\n"
                for channel_info in self.daily_stats['channels_with_updates']:
                    report += f"‚Ä¢ {channel_info['channel']}: {channel_info['new_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                report += f"‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
            
            return report
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}[/red]")
            return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏"
    
    async def _send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            import requests
            
            config = self.config_manager.config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞
            if not self.config_manager.is_bot_configured():
                self.console.print("[yellow]‚ö†Ô∏è Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥[/yellow]")
                self._save_report_to_log(message)
                return
            
            url = f"https://api.telegram.org/bot{config.bot.token}/sendMessage"
            data = {
                'chat_id': config.bot.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code != 200:
                raise Exception(f"HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}[/red]")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self._save_report_to_log(message)
            raise
    
    def _save_report_to_log(self, message: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –ª–æ–≥ —Ñ–∞–π–ª"""
        try:
            from datetime import datetime
            log_file = Path("daily_reports.log")
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(f"\n{'='*50}\n")
                f.write(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ - {timestamp}\n")
                f.write(f"{'='*50}\n")
                f.write(message)
                f.write(f"\n{'='*50}\n")
            
            self.console.print(f"[blue]üìù –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {log_file}[/blue]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–≥: {e}[/red]")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    console = Console()
    
    try:
        checker = DailyChannelChecker(console)
        checker.schedule_daily_check()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        console.print("[green]üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω[/green]")
        console.print("[blue]üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 8:00 –ø–æ –ü–µ—Ä–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏[/blue]")
        console.print("[yellow]üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞[/yellow]")
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        while True:
            await asyncio.sleep(60)
            
    except KeyboardInterrupt:
        console.print("\n[yellow]–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        console.print("[green]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")


if __name__ == "__main__":
    asyncio.run(main())
