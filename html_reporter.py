#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–æ–≤ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
"""

import json
import base64
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import asdict

from analytics import AnalyticsEngine, ChannelAnalytics, ExportAnalytics


class HTMLReporter:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä HTML –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        self.analytics_engine = AnalyticsEngine(None)  # –ë–µ–∑ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è HTML
    
    def generate_html_report(self, channels_data: List[Tuple[Path, str]], output_file: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            analytics_data = []
            for channel_dir, channel_name in channels_data:
                analytics = self.analytics_engine.analyze_channel(channel_dir, channel_name)
                analytics_data.append(analytics)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
            html_content = self._create_html_template(analytics_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print(f"HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _create_html_template(self, analytics_data: List[ChannelAnalytics]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML —à–∞–±–ª–æ–Ω–∞"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        chart_data = self._prepare_chart_data(analytics_data)
        
        html_template = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        
        .header p {{
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1em;
        }}
        
        .content {{
            padding: 30px;
        }}
        
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .stat-card {{
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }}
        
        .stat-card h3 {{
            margin: 0 0 10px 0;
            font-size: 2em;
            font-weight: bold;
        }}
        
        .stat-card p {{
            margin: 0;
            opacity: 0.9;
        }}
        
        .chart-container {{
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }}
        
        .chart-title {{
            font-size: 1.5em;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
            text-align: center;
        }}
        
        .table-container {{
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            overflow-x: auto;
        }}
        
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }}
        
        th, td {{
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        
        th {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            font-weight: 600;
        }}
        
        tr:hover {{
            background-color: #f5f5f5;
        }}
        
        .footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #666;
            border-top: 1px solid #eee;
        }}
        
        .loading {{
            text-align: center;
            padding: 50px;
            color: #666;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤</h1>
            <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}</p>
        </div>
        
        <div class="content">
            <!-- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div class="stats-grid">
                <div class="stat-card">
                    <h3>{len(analytics_data)}</h3>
                    <p>–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤</p>
                </div>
                <div class="stat-card">
                    <h3>{sum(a.total_messages for a in analytics_data):,}</h3>
                    <p>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                </div>
                <div class="stat-card">
                    <h3>{sum(a.total_media_files for a in analytics_data):,}</h3>
                    <p>–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</p>
                </div>
                <div class="stat-card">
                    <h3>{sum(a.total_size_mb for a in analytics_data):.1f} –ú–ë</h3>
                    <p>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä</p>
                </div>
            </div>
            
            <!-- –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤ -->
            <div class="chart-container">
                <div class="chart-title">üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤</div>
                <div id="activityChart" style="height: 400px;"></div>
            </div>
            
            <!-- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–µ–¥–∏–∞ -->
            <div class="chart-container">
                <div class="chart-title">üíæ –†–∞–∑–º–µ—Ä—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</div>
                <div id="mediaChart" style="height: 400px;"></div>
            </div>
            
            <!-- –ì—Ä–∞—Ñ–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ -->
            <div class="chart-container">
                <div class="chart-title">üéØ –£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏</div>
                <div id="engagementChart" style="height: 400px;"></div>
            </div>
            
            <!-- –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ -->
            <div class="table-container">
                <div class="chart-title">üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                <table>
                    <thead>
                        <tr>
                            <th>–ö–∞–Ω–∞–ª</th>
                            <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                            <th>–ú–µ–¥–∏–∞</th>
                            <th>–†–∞–∑–º–µ—Ä (–ú–ë)</th>
                            <th>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/–¥–µ–Ω—å</th>
                            <th>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</th>
                            <th>–†–æ—Å—Ç (%)</th>
                            <th>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</th>
                        </tr>
                    </thead>
                    <tbody>
                        {self._generate_table_rows(analytics_data)}
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="footer">
            <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Telegram Channel Exporter v1.2.0</p>
        </div>
    </div>
    
    <script>
        // –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
        var activityData = {{
            x: {chart_data['channel_names']},
            y: {chart_data['message_counts']},
            type: 'bar',
            marker: {{
                color: 'rgba(102, 126, 234, 0.8)',
                line: {{
                    color: 'rgba(102, 126, 234, 1.0)',
                    width: 1
                }}
            }}
        }};
        
        var activityLayout = {{
            title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º',
            xaxis: {{ title: '–ö–∞–Ω–∞–ª—ã' }},
            yaxis: {{ title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π' }},
            plot_bgcolor: 'rgba(0,0,0,0)',
            paper_bgcolor: 'rgba(0,0,0,0)'
        }};
        
        Plotly.newPlot('activityChart', [activityData], activityLayout);
        
        // –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–µ–¥–∏–∞
        var mediaData = {{
            x: {chart_data['channel_names']},
            y: {chart_data['media_sizes']},
            type: 'bar',
            marker: {{
                color: 'rgba(240, 147, 251, 0.8)',
                line: {{
                    color: 'rgba(240, 147, 251, 1.0)',
                    width: 1
                }}
            }}
        }};
        
        var mediaLayout = {{
            title: '–†–∞–∑–º–µ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º',
            xaxis: {{ title: '–ö–∞–Ω–∞–ª—ã' }},
            yaxis: {{ title: '–†–∞–∑–º–µ—Ä (–ú–ë)' }},
            plot_bgcolor: 'rgba(0,0,0,0)',
            paper_bgcolor: 'rgba(0,0,0,0)'
        }};
        
        Plotly.newPlot('mediaChart', [mediaData], mediaLayout);
        
        // –ì—Ä–∞—Ñ–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        var engagementData = {{
            x: {chart_data['channel_names']},
            y: {chart_data['engagement_rates']},
            type: 'scatter',
            mode: 'markers+lines',
            marker: {{
                size: 12,
                color: 'rgba(245, 87, 108, 0.8)',
                line: {{
                    color: 'rgba(245, 87, 108, 1.0)',
                    width: 2
                }}
            }},
            line: {{
                color: 'rgba(245, 87, 108, 0.6)',
                width: 3
            }}
        }};
        
        var engagementLayout = {{
            title: '–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º',
            xaxis: {{ title: '–ö–∞–Ω–∞–ª—ã' }},
            yaxis: {{ title: '–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏' }},
            plot_bgcolor: 'rgba(0,0,0,0)',
            paper_bgcolor: 'rgba(0,0,0,0)'
        }};
        
        Plotly.newPlot('engagementChart', [engagementData], engagementLayout);
    </script>
</body>
</html>
        """
        
        return html_template
    
    def _prepare_chart_data(self, analytics_data: List[ChannelAnalytics]) -> Dict[str, List]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        channel_names = [a.channel_name for a in analytics_data]
        message_counts = [a.total_messages for a in analytics_data]
        media_sizes = [a.total_size_mb for a in analytics_data]
        engagement_rates = [a.engagement_rate for a in analytics_data]
        
        return {
            'channel_names': json.dumps(channel_names, ensure_ascii=False),
            'message_counts': json.dumps(message_counts),
            'media_sizes': json.dumps(media_sizes),
            'engagement_rates': json.dumps(engagement_rates)
        }
    
    def _generate_table_rows(self, analytics_data: List[ChannelAnalytics]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã"""
        rows = []
        for analytics in analytics_data:
            last_activity = analytics.last_activity.strftime('%d.%m.%Y %H:%M') if analytics.last_activity else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            row = f"""
                <tr>
                    <td><strong>{analytics.channel_name}</strong></td>
                    <td>{analytics.total_messages:,}</td>
                    <td>{analytics.total_media_files:,}</td>
                    <td>{analytics.total_size_mb:.1f}</td>
                    <td>{analytics.avg_messages_per_day:.1f}</td>
                    <td>{analytics.engagement_rate:.1f}</td>
                    <td>{analytics.growth_rate:.1f}</td>
                    <td>{last_activity}</td>
                </tr>
            """
            rows.append(row)
        
        return ''.join(rows)
    
    def generate_detailed_html_report(self, channels_data: List[Tuple[Path, str]], output_file: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ HTML –æ—Ç—á–µ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            analytics_data = []
            for channel_dir, channel_name in channels_data:
                analytics = self.analytics_engine.analyze_channel(channel_dir, channel_name)
                analytics_data.append(analytics)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π HTML
            html_content = self._create_detailed_html_template(analytics_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print(f"–î–µ—Ç–∞–ª—å–Ω—ã–π HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ HTML –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _create_detailed_html_template(self, analytics_data: List[ChannelAnalytics]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ HTML —à–∞–±–ª–æ–Ω–∞"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        chart_data = self._prepare_detailed_chart_data(analytics_data)
        
        html_template = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        
        .header p {{
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1em;
        }}
        
        .content {{
            padding: 30px;
        }}
        
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .stat-card {{
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }}
        
        .stat-card h3 {{
            margin: 0 0 10px 0;
            font-size: 1.8em;
            font-weight: bold;
        }}
        
        .stat-card p {{
            margin: 0;
            opacity: 0.9;
            font-size: 0.9em;
        }}
        
        .charts-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }}
        
        .chart-container {{
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }}
        
        .chart-title {{
            font-size: 1.3em;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
            text-align: center;
        }}
        
        .table-container {{
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            overflow-x: auto;
        }}
        
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }}
        
        th, td {{
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
            font-size: 0.9em;
        }}
        
        th {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            font-weight: 600;
        }}
        
        tr:hover {{
            background-color: #f5f5f5;
        }}
        
        .footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #666;
            border-top: 1px solid #eee;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤</h1>
            <p>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}</p>
        </div>
        
        <div class="content">
            <!-- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div class="stats-grid">
                <div class="stat-card">
                    <h3>{len(analytics_data)}</h3>
                    <p>–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤</p>
                </div>
                <div class="stat-card">
                    <h3>{sum(a.total_messages for a in analytics_data):,}</h3>
                    <p>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                </div>
                <div class="stat-card">
                    <h3>{sum(a.total_media_files for a in analytics_data):,}</h3>
                    <p>–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</p>
                </div>
                <div class="stat-card">
                    <h3>{sum(a.total_size_mb for a in analytics_data):.1f} –ú–ë</h3>
                    <p>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä</p>
                </div>
                <div class="stat-card">
                    <h3>{sum(a.avg_messages_per_day for a in analytics_data):.1f}</h3>
                    <p>–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/–¥–µ–Ω—å</p>
                </div>
                <div class="stat-card">
                    <h3>{sum(a.engagement_rate for a in analytics_data) / len(analytics_data) if analytics_data else 0:.1f}</h3>
                    <p>–°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</p>
                </div>
            </div>
            
            <!-- –°–µ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ -->
            <div class="charts-grid">
                <!-- –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤ -->
                <div class="chart-container">
                    <div class="chart-title">üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤</div>
                    <div id="activityChart" style="height: 300px;"></div>
                </div>
                
                <!-- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–µ–¥–∏–∞ -->
                <div class="chart-container">
                    <div class="chart-title">üíæ –†–∞–∑–º–µ—Ä—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</div>
                    <div id="mediaChart" style="height: 300px;"></div>
                </div>
                
                <!-- –ì—Ä–∞—Ñ–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ -->
                <div class="chart-container">
                    <div class="chart-title">üéØ –£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏</div>
                    <div id="engagementChart" style="height: 300px;"></div>
                </div>
                
                <!-- –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ -->
                <div class="chart-container">
                    <div class="chart-title">üìä –¢–µ–º–ø —Ä–æ—Å—Ç–∞</div>
                    <div id="growthChart" style="height: 300px;"></div>
                </div>
            </div>
            
            <!-- –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ -->
            <div class="table-container">
                <div class="chart-title">üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                <table>
                    <thead>
                        <tr>
                            <th>–ö–∞–Ω–∞–ª</th>
                            <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                            <th>–ú–µ–¥–∏–∞</th>
                            <th>–†–∞–∑–º–µ—Ä (–ú–ë)</th>
                            <th>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/–¥–µ–Ω—å</th>
                            <th>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</th>
                            <th>–†–æ—Å—Ç (%)</th>
                            <th>–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã</th>
                            <th>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</th>
                        </tr>
                    </thead>
                    <tbody>
                        {self._generate_detailed_table_rows(analytics_data)}
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="footer">
            <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Telegram Channel Exporter v1.2.0</p>
        </div>
    </div>
    
    <script>
        // –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
        var activityData = {{
            x: {chart_data['channel_names']},
            y: {chart_data['message_counts']},
            type: 'bar',
            marker: {{
                color: 'rgba(102, 126, 234, 0.8)',
                line: {{
                    color: 'rgba(102, 126, 234, 1.0)',
                    width: 1
                }}
            }}
        }};
        
        var activityLayout = {{
            title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º',
            xaxis: {{ title: '–ö–∞–Ω–∞–ª—ã' }},
            yaxis: {{ title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π' }},
            plot_bgcolor: 'rgba(0,0,0,0)',
            paper_bgcolor: 'rgba(0,0,0,0)'
        }};
        
        Plotly.newPlot('activityChart', [activityData], activityLayout);
        
        // –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–µ–¥–∏–∞
        var mediaData = {{
            x: {chart_data['channel_names']},
            y: {chart_data['media_sizes']},
            type: 'bar',
            marker: {{
                color: 'rgba(240, 147, 251, 0.8)',
                line: {{
                    color: 'rgba(240, 147, 251, 1.0)',
                    width: 1
                }}
            }}
        }};
        
        var mediaLayout = {{
            title: '–†–∞–∑–º–µ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º',
            xaxis: {{ title: '–ö–∞–Ω–∞–ª—ã' }},
            yaxis: {{ title: '–†–∞–∑–º–µ—Ä (–ú–ë)' }},
            plot_bgcolor: 'rgba(0,0,0,0)',
            paper_bgcolor: 'rgba(0,0,0,0)'
        }};
        
        Plotly.newPlot('mediaChart', [mediaData], mediaLayout);
        
        // –ì—Ä–∞—Ñ–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        var engagementData = {{
            x: {chart_data['channel_names']},
            y: {chart_data['engagement_rates']},
            type: 'scatter',
            mode: 'markers+lines',
            marker: {{
                size: 12,
                color: 'rgba(245, 87, 108, 0.8)',
                line: {{
                    color: 'rgba(245, 87, 108, 1.0)',
                    width: 2
                }}
            }},
            line: {{
                color: 'rgba(245, 87, 108, 0.6)',
                width: 3
            }}
        }};
        
        var engagementLayout = {{
            title: '–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º',
            xaxis: {{ title: '–ö–∞–Ω–∞–ª—ã' }},
            yaxis: {{ title: '–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏' }},
            plot_bgcolor: 'rgba(0,0,0,0)',
            paper_bgcolor: 'rgba(0,0,0,0)'
        }};
        
        Plotly.newPlot('engagementChart', [engagementData], engagementLayout);
        
        // –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞
        var growthData = {{
            x: {chart_data['channel_names']},
            y: {chart_data['growth_rates']},
            type: 'bar',
            marker: {{
                color: 'rgba(76, 175, 80, 0.8)',
                line: {{
                    color: 'rgba(76, 175, 80, 1.0)',
                    width: 1
                }}
            }}
        }};
        
        var growthLayout = {{
            title: '–¢–µ–º–ø —Ä–æ—Å—Ç–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º',
            xaxis: {{ title: '–ö–∞–Ω–∞–ª—ã' }},
            yaxis: {{ title: '–¢–µ–º–ø —Ä–æ—Å—Ç–∞ (%)' }},
            plot_bgcolor: 'rgba(0,0,0,0)',
            paper_bgcolor: 'rgba(0,0,0,0)'
        }};
        
        Plotly.newPlot('growthChart', [growthData], growthLayout);
    </script>
</body>
</html>
        """
        
        return html_template
    
    def _prepare_detailed_chart_data(self, analytics_data: List[ChannelAnalytics]) -> Dict[str, List]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        channel_names = [a.channel_name for a in analytics_data]
        message_counts = [a.total_messages for a in analytics_data]
        media_sizes = [a.total_size_mb for a in analytics_data]
        engagement_rates = [a.engagement_rate for a in analytics_data]
        growth_rates = [a.growth_rate for a in analytics_data]
        
        return {
            'channel_names': json.dumps(channel_names, ensure_ascii=False),
            'message_counts': json.dumps(message_counts),
            'media_sizes': json.dumps(media_sizes),
            'engagement_rates': json.dumps(engagement_rates),
            'growth_rates': json.dumps(growth_rates)
        }
    
    def _generate_detailed_table_rows(self, analytics_data: List[ChannelAnalytics]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        rows = []
        for analytics in analytics_data:
            last_activity = analytics.last_activity.strftime('%d.%m.%Y %H:%M') if analytics.last_activity else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            peak_hours = ', '.join(map(str, analytics.peak_hours)) if analytics.peak_hours else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            
            row = f"""
                <tr>
                    <td><strong>{analytics.channel_name}</strong></td>
                    <td>{analytics.total_messages:,}</td>
                    <td>{analytics.total_media_files:,}</td>
                    <td>{analytics.total_size_mb:.1f}</td>
                    <td>{analytics.avg_messages_per_day:.1f}</td>
                    <td>{analytics.engagement_rate:.1f}</td>
                    <td>{analytics.growth_rate:.1f}</td>
                    <td>{peak_hours}</td>
                    <td>{last_activity}</td>
                </tr>
            """
            rows.append(row)
        
        return ''.join(rows)
