#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
"""

import json
import html
import re
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from telethon.tl.types import Message, MessageMediaPhoto, MessageMediaDocument


@dataclass
class MessageData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è"""
    id: int
    date: datetime
    text: str
    author: Optional[str] = None
    media_type: Optional[str] = None
    media_path: Optional[str] = None
    views: int = 0
    forwards: int = 0
    replies: int = 0
    edited: Optional[datetime] = None


class BaseExporter:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤"""
    
    def __init__(self, channel_name: str, output_dir: Path):
        self.channel_name = channel_name
        self.output_dir = output_dir
        self.output_dir.mkdir(exist_ok=True)
    
    def sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        if len(sanitized) > 100:
            sanitized = sanitized[:100] + "..."
        return sanitized
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —ç–º–æ–¥–∑–∏, –Ω–æ —É–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        cleaned = re.sub(r'[\u200d\ufe0f]', '', text)  # –£–¥–∞–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —ç–º–æ–¥–∑–∏
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã
        cleaned = re.sub(r'[\u2060-\u206f]', '', cleaned)  # Word joiner –∏ –¥—Ä—É–≥–∏–µ
        
        return cleaned.strip()


class JSONExporter(BaseExporter):
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
    
    def export_messages(self, messages: List[MessageData]) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ JSON"""
        output_file = self.output_dir / f"{self.sanitize_filename(self.channel_name)}.json"
        
        data = {
            "channel_name": self.channel_name,
            "export_date": datetime.now().isoformat(),
            "total_messages": len(messages),
            "messages": []
        }
        
        for msg in messages:
            message_dict = {
                "id": msg.id,
                "date": msg.date.isoformat() if msg.date else None,
                "text": self.clean_text(msg.text),
                "author": msg.author,
                "media_type": msg.media_type,
                "media_path": msg.media_path,
                "views": msg.views,
                "forwards": msg.forwards,
                "replies": msg.replies,
                "edited": msg.edited.isoformat() if msg.edited else None
            }
            data["messages"].append(message_dict)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return str(output_file)


class HTMLExporter(BaseExporter):
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –≤ HTML —Ñ–æ—Ä–º–∞—Ç"""
    
    def export_messages(self, messages: List[MessageData]) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ HTML"""
        output_file = self.output_dir / f"{self.sanitize_filename(self.channel_name)}.html"
        
        html_content = self._generate_html(messages)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return str(output_file)
    
    def _generate_html(self, messages: List[MessageData]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        html_template = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{channel_name} - –≠–∫—Å–ø–æ—Ä—Ç</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
        }}
        .message {{
            background: white;
            margin: 10px 0;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            border-left: 4px solid #667eea;
        }}
        .message-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            font-size: 0.9em;
            color: #666;
        }}
        .message-id {{
            font-weight: bold;
            color: #667eea;
        }}
        .message-date {{
            font-style: italic;
        }}
        .message-text {{
            line-height: 1.6;
            white-space: pre-wrap;
        }}
        .message-stats {{
            margin-top: 10px;
            font-size: 0.8em;
            color: #888;
            display: flex;
            gap: 15px;
        }}
        .media-info {{
            background: #e8f4fd;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            border-left: 3px solid #2196F3;
        }}
        .stats {{
            background: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>{channel_name}</h1>
        <p>–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç {export_date}</p>
    </div>
    
    <div class="stats">
        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <p>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <strong>{total_messages}</strong></p>
    </div>
    
    <div class="messages">
        {messages_html}
    </div>
</body>
</html>"""
        
        messages_html = ""
        for msg in messages:
            message_html = f"""
        <div class="message">
            <div class="message-header">
                <span class="message-id">#{msg.id}</span>
                <span class="message-date">{msg.date.strftime('%Y-%m-%d %H:%M:%S') if msg.date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
            </div>
            """
            
            if msg.text:
                escaped_text = html.escape(self.clean_text(msg.text))
                message_html += f'<div class="message-text">{escaped_text}</div>'
            
            if msg.media_type:
                message_html += f"""
            <div class="media-info">
                <strong>–ú–µ–¥–∏–∞:</strong> {msg.media_type}
                {f'<br><strong>–§–∞–π–ª:</strong> {msg.media_path}' if msg.media_path else ''}
            </div>"""
            
            stats_parts = []
            if msg.views > 0:
                stats_parts.append(f"üëÅ {msg.views}")
            if msg.forwards > 0:
                stats_parts.append(f"üîÑ {msg.forwards}")
            if msg.replies > 0:
                stats_parts.append(f"üí¨ {msg.replies}")
            
            if stats_parts:
                message_html += f'<div class="message-stats">{" | ".join(stats_parts)}</div>'
            
            message_html += "</div>"
            messages_html += message_html
        
        return html_template.format(
            channel_name=html.escape(self.channel_name),
            export_date=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            total_messages=len(messages),
            messages_html=messages_html
        )


class MarkdownExporter(BaseExporter):
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –≤ Markdown —Ñ–æ—Ä–º–∞—Ç"""
    
    def export_messages(self, messages: List[MessageData]) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Markdown"""
        output_file = self.output_dir / f"{self.sanitize_filename(self.channel_name)}.md"
        
        markdown_content = self._generate_markdown(messages)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        return str(output_file)
    
    def _generate_markdown(self, messages: List[MessageData]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        md_content = f"""# {self.channel_name}

**–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {len(messages)}

---

"""
        
        for msg in messages:
            md_content += f"\n## –°–æ–æ–±—â–µ–Ω–∏–µ #{msg.id}\n\n"
            
            # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            if msg.date:
                md_content += f"**–î–∞—Ç–∞:** {msg.date.strftime('%Y-%m-%d %H:%M:%S')}  \n"
            
            # –ê–≤—Ç–æ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if msg.author:
                md_content += f"**–ê–≤—Ç–æ—Ä:** {msg.author}  \n"
            
            # –ú–µ–¥–∏–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if msg.media_type:
                md_content += f"**–ú–µ–¥–∏–∞:** {msg.media_type}  \n"
                if msg.media_path:
                    md_content += f"**–§–∞–π–ª:** `{msg.media_path}`  \n"
            
            md_content += "\n"
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if msg.text:
                cleaned_text = self.clean_text(msg.text)
                # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
                cleaned_text = self._escape_markdown(cleaned_text)
                md_content += f"{cleaned_text}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_parts = []
            if msg.views > 0:
                stats_parts.append(f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {msg.views}")
            if msg.forwards > 0:
                stats_parts.append(f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {msg.forwards}")
            if msg.replies > 0:
                stats_parts.append(f"üí¨ –û—Ç–≤–µ—Ç—ã: {msg.replies}")
            
            if stats_parts:
                md_content += f"*{' | '.join(stats_parts)}*\n\n"
            
            if msg.edited:
                md_content += f"*–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {msg.edited.strftime('%Y-%m-%d %H:%M:%S')}*\n\n"
            
            md_content += "---\n"
        
        return md_content
    
    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown"""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        special_chars = ['\\', '`', '*', '_', '{', '}', '[', ']', '(', ')', '#', '+', '-', '.', '!']
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        return text


class MediaDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, output_dir: Path):
        self.output_dir = output_dir
        self.media_dir = output_dir / "media"
        self.media_dir.mkdir(exist_ok=True)
    
    async def download_media(self, client, message: Message) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message.media:
            return None
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            if isinstance(message.media, MessageMediaPhoto):
                extension = ".jpg"
                media_type = "photo"
            elif isinstance(message.media, MessageMediaDocument):
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                extension = ".bin"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                media_type = "document"
                
                if hasattr(message.media.document, 'attributes'):
                    for attr in message.media.document.attributes:
                        if hasattr(attr, 'file_name') and attr.file_name:
                            extension = Path(attr.file_name).suffix or ".bin"
                            break
            else:
                return None
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = f"msg_{message.id}_{media_type}{extension}"
            file_path = self.media_dir / filename
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            await client.download_media(message, file_path)
            
            return f"media/{filename}"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            return None
    
    def get_file_size_mb(self, file_path: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –ú–ë"""
        try:
            size_bytes = Path(file_path).stat().st_size
            return size_bytes / (1024 * 1024)
        except:
            return 0.0