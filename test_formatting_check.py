#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test to check if excessive formatting symbols are preserved in Markdown export
"""

import re

def clean_text(text: str) -> str:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è clean_text –∏–∑ BaseExporter"""
    if not text:
        return ""
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cleaned = re.sub(r'[\u200d\ufe0f]', '', text)  # –£–¥–∞–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —ç–º–æ–¥–∑–∏
    cleaned = re.sub(r'[\u2060-\u206f]', '', cleaned)  # Word joiner –∏ –¥—Ä—É–≥–∏–µ
    
    # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏ KaTeX
    # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    katex_problematic_patterns = [
        (r'\\-', '-'),              # \- –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –¥–µ—Ñ–∏—Å  
        (r'\\\+', '+'),            # \+ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–ª—é—Å
        (r'\\\*', '*'),            # \* –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—É—é –∑–≤–µ–∑–¥–æ—á–∫—É
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ LaTeX –∫–æ–º–∞–Ω–¥—ã –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        (r'\$\\[a-zA-Z]+\$', ''),  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ $\command$ (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)
        (r'\\begin\{[^}]+\}', ''), # –£–¥–∞–ª—è–µ–º \begin{environment}
        (r'\\end\{[^}]+\}', ''),   # –£–¥–∞–ª—è–µ–º \end{environment}
    ]
    
    for pattern, replacement in katex_problematic_patterns:
        cleaned = re.sub(pattern, replacement, cleaned)
    
    return cleaned.strip()

def safe_markdown_text_current(text: str) -> str:
    """–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è _safe_markdown_text"""
    if not text:
        return ""
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cleaned = clean_text(text)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞—â–∏—â–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
    code_blocks = []
    code_counter = 0
    
    # –ó–∞—â–∏—â–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ (```)
    def protect_multiline_code(match):
        nonlocal code_counter
        code_blocks.append(match.group(0))
        placeholder = f"MDCODEBLOCK{code_counter}PLACEHOLDER"
        code_counter += 1
        return placeholder
    
    # –ó–∞—â–∏—â–∞–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ (`code`)
    def protect_inline_code(match):
        nonlocal code_counter
        code_blocks.append(match.group(0))
        placeholder = f"MDCODEBLOCK{code_counter}PLACEHOLDER"
        code_counter += 1
        return placeholder
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞—â–∏—â–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    cleaned = re.sub(r'```[\s\S]*?```', protect_multiline_code, cleaned)
    
    # –ó–∞—Ç–µ–º –∑–∞—â–∏—â–∞–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    cleaned = re.sub(r'`[^`\n]+`', protect_inline_code, cleaned)
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ KaTeX
    # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º Markdown —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏ (*, _, [, ])
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ä–µ—à–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤), –Ω–æ –Ω–µ –≤ –±–ª–æ–∫–∞—Ö –∫–æ–¥–∞
    # cleaned = re.sub(r'^#', '\\#', cleaned, flags=re.MULTILINE)  # –û—Ç–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    for i, code_block in enumerate(code_blocks):
        placeholder = f"MDCODEBLOCK{i}PLACEHOLDER"
        cleaned = cleaned.replace(placeholder, code_block)
    
    return cleaned

def test_excessive_formatting():
    """–¢–µ—Å—Ç –Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Markdown...")
    
    test_cases = [
        {
            "name": "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏",
            "input": "–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –¥–µ–ª–∞? üòä",
            "expected_preserved": ["üëã", "üòä"],
            "should_be_clean": True
        },
        {
            "name": "Telegram —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤)",
            "input": "**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ *–∫—É—Ä—Å–∏–≤–Ω—ã–π* —Ç–µ–∫—Å—Ç",
            "expected_preserved": ["**", "*"],
            "should_be_clean": True
        },
        {
            "name": "–°—Å—ã–ª–∫–∏",
            "input": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ [—Å–∞–π—Ç](https://example.com) –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏",
            "expected_preserved": ["[", "]", "(", ")"],
            "should_be_clean": True
        },
        {
            "name": "KaTeX –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
            "input": "–ö–æ–º–∞–Ω–¥–∞: find \\. \\-type f \\-mtime \\+30 \\-delete",
            "expected_cleaned": ["\\.", "\\-", "\\+"],
            "should_be_clean": True
        },
        {
            "name": "LaTeX –∫–æ–º–∞–Ω–¥—ã",
            "input": "–§–æ—Ä–º—É–ª–∞: \\$E\\=mc\\^2\\$ –∏ \\alpha \\beta \\gamma",
            "expected_cleaned": ["\\$", "\\=", "\\^", "\\alpha", "\\beta", "\\gamma"],
            "should_be_clean": True
        },
        {
            "name": "–°–ª–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Unicode",
            "input": "–¢–µ–∫—Å—Ç —Å\u200d\ufe0f –∞–Ω–∏–º–∞—Ü–∏–µ–π\u2060–∏\u2061—Å–∫—Ä—ã—Ç—ã–º–∏\u206f —Å–∏–º–≤–æ–ª–∞–º–∏",
            "expected_cleaned": ["\u200d", "\ufe0f", "\u2060", "\u2061", "\u206f"],
            "should_be_clean": True
        },
        {
            "name": "–ö–æ–¥ –±–ª–æ–∫–∏",
            "input": "–ö–æ–º–∞–Ω–¥–∞ `ls -la` –∏ –±–ª–æ–∫:\n```bash\necho 'hello'\n```",
            "expected_preserved": ["`", "```"],
            "should_be_clean": True
        },
        {
            "name": "–ó–∞–≥–æ–ª–æ–≤–∫–∏",
            "input": "# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1\n## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2\n### –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3",
            "expected_preserved": ["#"],
            "should_be_clean": True
        },
        {
            "name": "–ò–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML",
            "input": "&lt;div&gt;&amp;nbsp;&lt;/div&gt;",
            "expected_preserved": ["&lt;", "&gt;", "&amp;"],  # –≠—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–±—Ä–∞–Ω—ã
            "should_be_clean": True
        }
    ]
    
    issues_found = []
    
    for i, test_case in enumerate(test_cases):
        print(f"\nüìù –¢–µ—Å—Ç {i+1}: {test_case['name']}")
        
        original = test_case['input']
        result = safe_markdown_text_current(original)
        
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π: {repr(original)}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {repr(result)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        if 'expected_preserved' in test_case:
            missing_symbols = []
            for symbol in test_case['expected_preserved']:
                if symbol not in result:
                    missing_symbols.append(symbol)
            
            if missing_symbols:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã: {missing_symbols}")
                issues_found.append(f"–¢–µ—Å—Ç {i+1}: –ø—Ä–æ–ø—É—â–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã {missing_symbols}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —É–±—Ä–∞–Ω—ã
        if 'expected_cleaned' in test_case:
            remaining_symbols = []
            for symbol in test_case['expected_cleaned']:
                if symbol in result:
                    remaining_symbols.append(symbol)
            
            if remaining_symbols:
                print(f"‚úÖ –£–±—Ä–∞–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {set(test_case['expected_cleaned']) - set(remaining_symbols)}")
                if remaining_symbols:
                    print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å —Å–∏–º–≤–æ–ª—ã: {remaining_symbols}")
                    issues_found.append(f"–¢–µ—Å—Ç {i+1}: –æ—Å—Ç–∞–ª–∏—Å—å —Å–∏–º–≤–æ–ª—ã {remaining_symbols}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
        if len(result) < len(original) * 0.5:  # –ï—Å–ª–∏ —É–±—Ä–∞–Ω–æ –±–æ–ª–µ–µ 50% - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: {len(original)} ‚Üí {len(result)}")
            issues_found.append(f"–¢–µ—Å—Ç {i+1}: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ {len(original)} ‚Üí {len(result)}")
        
        if not issues_found or len(issues_found) == 0:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    if issues_found:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues_found:
            print(f"  ‚Ä¢ {issue}")
        return False
    else:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print("‚úÖ –ò–∑–±—ã—Ç–æ—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        return True

if __name__ == "__main__":
    success = test_excessive_formatting()
    exit(0 if success else 1)