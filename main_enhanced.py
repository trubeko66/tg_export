#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram Channel Exporter —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
"""

import asyncio
import sys
import time
import json
from pathlib import Path
from typing import List, Any, Optional, Tuple
from datetime import datetime

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.layout import Layout
from rich.text import Text
from rich import box
from rich.live import Live

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
from telegram_exporter import TelegramExporter, ChannelInfo
from config_manager import ConfigManager
from analytics import AnalyticsReporter
from channel_dashboard import ChannelDashboard
from html_reporter import HTMLReporter
from simple_cli import SimpleCLI
from settings_methods import SettingsMethods
from continuous_export import ContinuousExporter
from telegram_notifications import TelegramNotifier


class EnhancedTelegramExporter(TelegramExporter):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TelegramExporter —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.analytics_reporter = AnalyticsReporter(self.console)
        self.dashboard = ChannelDashboard(self.console)
        self.html_reporter = HTMLReporter()
        self.simple_cli = SimpleCLI(self.console)
        self.config_manager = ConfigManager()
        self.settings_methods = SettingsMethods(self.console, self.config_manager)
        self.telegram_notifier = TelegramNotifier(self.console)
        self.check_interval = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
        self._current_export_index = -1  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
            await self.initialize_client(force_reauth=False)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            self.console.print("[green]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...[/green]")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if not self.channels:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞
                if self.config_manager.channels_file_exists():
                    self.console.print("[blue]–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞...[/blue]")
                    imported_channels = self.config_manager.import_channels()
                    if imported_channels:
                        self.channels = imported_channels
                        self.console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(imported_channels)} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞[/green]")
                    else:
                        self.console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞[/yellow]")
                else:
                    self.console.print("[yellow]–ö–∞–Ω–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.[/yellow]")
            
            self.console.print("[green]‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
            
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
            raise
    
    async def show_enhanced_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.console.clear()
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header_text = Text("üöÄ Telegram Channel Exporter", style="bold blue")
            header_text.append(" - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è", style="green")
            header_panel = Panel(
                header_text,
                box=box.DOUBLE,
                border_style="blue",
                padding=(0, 1)
            )
            self.console.print(header_panel)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            await self._show_enhanced_status()
            
            
            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                choices=["1", "2", "3", "4", "5", "6", "7", "8", "0", "q", "quit"]
            )
            
            if choice in ["0", "q", "quit"]:
                if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
                    self.console.print("[blue]üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...[/blue]")
                    await self._cleanup_resources()
                    break
                continue
            
            try:
                if choice == "1":
                    await self.show_analytics_menu()
                elif choice == "2":
                    await self.show_dashboard()
                elif choice == "3":
                    await self.show_export_menu()
                elif choice == "4":
                    await self.show_settings_menu()
                elif choice == "5":
                    await self.show_logs_menu()
                elif choice == "6":
                    await self.show_enhanced_cli()
                elif choice == "7":
                    await self.show_channels_import_export_menu()
                elif choice == "8":
                    await self.show_continuous_export_menu()
                    
            except KeyboardInterrupt:
                if Confirm.ask("\n–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?"):
                    break
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_analytics_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.console.clear()
        
        analytics_panel = Panel(
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n\n"
            "1. üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "2. üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "3. üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
            "4. üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ JSON\n"
            "5. üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ CSV\n"
            "6. üåê –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ HTML\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            border_style="cyan"
        )
        
        self.console.print(analytics_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            choices=["1", "2", "3", "4", "5", "6", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.show_general_analytics()
            elif choice == "2":
                await self.show_channel_analysis()
            elif choice == "3":
                await self.show_channel_comparison()
            elif choice == "4":
                await self.export_json_report()
            elif choice == "5":
                await self.export_csv_report()
            elif choice == "6":
                await self.export_html_report()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_general_analytics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        self.console.clear()
        
        with self.console.status("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
            time.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/yellow]")
            self.console.print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç 7 - –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        try:
            report = self.analytics_reporter.generate_export_report(self.channels, self.stats)
            self.console.print(report)
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}[/red]")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._show_simple_analytics()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _show_simple_analytics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
        self.console.clear()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        table = Table(title="üìä –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", box=box.ROUNDED)
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        total_messages = sum(channel.total_messages for channel in self.channels)
        total_size = sum(channel.media_size_mb for channel in self.channels)
        
        table.add_row("–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤", f"{len(self.channels):,}")
        table.add_row("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", f"{total_messages:,}")
        table.add_row("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{total_size:.1f} –ú–ë")
        table.add_row("–û—à–∏–±–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"{self.stats.export_errors:,}")
        table.add_row("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ", f"{self.stats.filtered_messages:,}")
        
        if self.stats.last_export_time:
            table.add_row("–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç", str(self.stats.last_export_time))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        sorted_channels = sorted(self.channels, key=lambda x: x.total_messages, reverse=True)[:5]
        
        self.console.print(table)
        
        if sorted_channels:
            top_table = Table(title="üèÜ –¢–æ–ø-5 –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º", box=box.ROUNDED)
            top_table.add_column("‚Ññ", style="cyan", width=3, justify="center")
            top_table.add_column("–ö–∞–Ω–∞–ª", style="green")
            top_table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right")
            top_table.add_column("–†–∞–∑–º–µ—Ä (–ú–ë)", style="blue", justify="right")
            
            for i, channel in enumerate(sorted_channels, 1):
                top_table.add_row(
                    str(i),
                    channel.title[:40] + "..." if len(channel.title) > 40 else channel.title,
                    f"{channel.total_messages:,}",
                    f"{channel.media_size_mb:.1f}"
                )
            
            self.console.print(top_table)
    
    async def show_channel_analysis(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right")
        
        for i, channel in enumerate(self.channels, 1):
            table.add_row(str(i), channel.title, f"{getattr(channel, 'total_messages', 0):,}")
        
        self.console.print(table)
        
        try:
            choice = IntPrompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞",
                choices=[str(i) for i in range(1, len(self.channels) + 1)]
            )
            
            selected_channel = self.channels[choice - 1]
            
            with self.console.status(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ '{selected_channel.title}'..."):
                time.sleep(2)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª—É
            export_base_dir = Path(self.config_manager.config.storage.export_base_dir)
            channel_dir = export_base_dir / self._sanitize_filename(selected_channel.title)
            
            if channel_dir.exists():
                report = self.analytics_reporter.generate_channel_report(channel_dir, selected_channel.title)
                self.console.print(report)
            else:
                self.console.print(f"[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{selected_channel.title}'[/yellow]")
                
        except (ValueError, IndexError):
            self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channel_comparison(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        with self.console.status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è..."):
            time.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        channels_data = self._get_channels_data()
        
        if len(channels_data) < 2:
            self.console.print("[yellow]–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞)[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = self.analytics_reporter.generate_comparison_report(channels_data)
        self.console.print(report)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_json_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç JSON –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        channels_data = self._get_channels_data()
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        output_file = Path("analytics_report.json")
        self.analytics_reporter.export_analytics_to_json(channels_data, output_file)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_csv_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç CSV –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        channels_data = self._get_channels_data()
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        output_file = Path("analytics_report.csv")
        self.analytics_reporter.export_analytics_to_csv(channels_data, output_file)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_html_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç HTML –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        channels_data = self._get_channels_data()
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML
        output_file = Path("analytics_report.html")
        self.html_reporter.generate_html_report(channels_data, output_file)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_dashboard(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        with self.console.status("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –∫–∞–Ω–∞–ª–æ–≤..."):
            time.sleep(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤
        export_base_dir = Path(self.config_manager.config.storage.export_base_dir)
        self.dashboard.update_channels_status(self.channels, self.stats, export_base_dir)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥
        self.dashboard.show_static_dashboard(self.channels, self.stats, export_base_dir)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_export_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_panel = Panel(
            "üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "1. üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "2. üéØ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
            "3. üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üîÑ –≠–∫—Å–ø–æ—Ä—Ç",
            border_style="green"
        )
        
        self.console.print(export_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞",
            choices=["1", "2", "3", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.export_all_channels()
            elif choice == "2":
                await self.export_selected_channels()
            elif choice == "3":
                await self.export_problematic_channels()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_all_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            await self._export_all_channels_with_progress()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def _export_all_channels_with_progress(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_channels = len(self.channels)
            completed_channels = 0
            total_messages = sum(channel.total_messages for channel in self.channels)
            exported_messages = 0
            total_size_mb = sum(channel.media_size_mb for channel in self.channels)
            errors = 0
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω
            with Live(self.create_export_status_display(
                total_channels=total_channels,
                completed_channels=completed_channels,
                total_messages=total_messages,
                exported_messages=exported_messages,
                total_size_mb=total_size_mb,
                errors=errors,
                channels=self.channels,
                current_channel_index=-1
            ), refresh_per_second=2, console=self.console) as live:
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
                for i, channel in enumerate(self.channels):
                    current_channel = f"–≠–∫—Å–ø–æ—Ä—Ç: {channel.title}"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    live.update(self.create_export_status_display(
                        current_channel=current_channel,
                        progress=0,
                        total_channels=total_channels,
                        completed_channels=completed_channels,
                        total_messages=total_messages,
                        exported_messages=exported_messages,
                        total_size_mb=total_size_mb,
                        errors=errors,
                        channels=self.channels,
                        current_channel_index=i
                    ))
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–∞
                    for progress in range(0, 101, 20):
                        live.update(self.create_export_status_display(
                            current_channel=current_channel,
                            progress=progress,
                            total_channels=total_channels,
                            completed_channels=completed_channels,
                            total_messages=total_messages,
                            exported_messages=exported_messages,
                            total_size_mb=total_size_mb,
                            errors=errors,
                            channels=self.channels,
                            current_channel_index=i
                        ))
                        time.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    completed_channels += 1
                    exported_messages += channel.total_messages
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞
                    live.update(self.create_export_status_display(
                        current_channel=f"–ó–∞–≤–µ—Ä—à–µ–Ω: {channel.title}",
                        progress=100,
                        total_channels=total_channels,
                        completed_channels=completed_channels,
                        total_messages=total_messages,
                        exported_messages=exported_messages,
                        total_size_mb=total_size_mb,
                        errors=errors,
                        channels=self.channels,
                        current_channel_index=i
                    ))
                    
                    time.sleep(0.3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                live.update(self.create_export_status_display(
                    current_channel="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!",
                    progress=100,
                    total_channels=total_channels,
                    completed_channels=completed_channels,
                    total_messages=total_messages,
                    exported_messages=exported_messages,
                    total_size_mb=total_size_mb,
                    errors=errors,
                    channels=self.channels,
                    current_channel_index=len(self.channels)
                ))
                
                time.sleep(1)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.console.print(f"[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω![/green]")
            self.console.print(f"[blue]üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤, {exported_messages:,} —Å–æ–æ–±—â–µ–Ω–∏–π, {total_size_mb:.1f} –ú–ë[/blue]")
            self.console.print("[yellow]üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã[/yellow]")
                
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
    
    async def export_selected_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
        
        for i, channel in enumerate(self.channels, 1):
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if hasattr(channel, 'last_check') and channel.last_check else "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
            table.add_row(str(i), channel.title, status)
        
        self.console.print(table)
        
        selection = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5) –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö"
        )
        
        if selection.lower() == "all":
            selected_channels = self.channels
        else:
            try:
                indices = [int(x.strip()) - 1 for x in selection.split(",")]
                selected_channels = [self.channels[i] for i in indices if 0 <= i < len(self.channels)]
            except (ValueError, IndexError):
                self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
        
        if not selected_channels:
            self.console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(selected_channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            await self._export_selected_channels_with_progress(selected_channels)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def _export_selected_channels_with_progress(self, selected_channels):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_channels = len(selected_channels)
            completed_channels = 0
            total_messages = sum(channel.total_messages for channel in selected_channels)
            exported_messages = 0
            total_size_mb = sum(channel.media_size_mb for channel in selected_channels)
            errors = 0
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω
            with Live(self.create_export_status_display(
                total_channels=total_channels,
                completed_channels=completed_channels,
                total_messages=total_messages,
                exported_messages=exported_messages,
                total_size_mb=total_size_mb,
                errors=errors,
                channels=selected_channels,
                current_channel_index=-1
            ), refresh_per_second=2, console=self.console) as live:
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
                for i, channel in enumerate(selected_channels):
                    current_channel = f"–≠–∫—Å–ø–æ—Ä—Ç: {channel.title}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    self._current_export_index = i
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    live.update(self.create_export_status_display(
                        current_channel=current_channel,
                        progress=0,
                        total_channels=total_channels,
                        completed_channels=completed_channels,
                        total_messages=total_messages,
                        exported_messages=exported_messages,
                        total_size_mb=total_size_mb,
                        errors=errors,
                        channels=selected_channels,
                        current_channel_index=i
                    ))
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–∞
                    for progress in range(0, 101, 25):
                        live.update(self.create_export_status_display(
                            current_channel=current_channel,
                            progress=progress,
                            total_channels=total_channels,
                            completed_channels=completed_channels,
                            total_messages=total_messages,
                            exported_messages=exported_messages,
                            total_size_mb=total_size_mb,
                            errors=errors,
                            channels=selected_channels,
                            current_channel_index=i
                        ))
                        time.sleep(0.15)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    completed_channels += 1
                    exported_messages += channel.total_messages
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞
                    live.update(self.create_export_status_display(
                        current_channel=f"–ó–∞–≤–µ—Ä—à–µ–Ω: {channel.title}",
                        progress=100,
                        total_channels=total_channels,
                        completed_channels=completed_channels,
                        total_messages=total_messages,
                        exported_messages=exported_messages,
                        total_size_mb=total_size_mb,
                        errors=errors,
                        channels=selected_channels,
                        current_channel_index=i
                    ))
                    
                    time.sleep(0.2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                live.update(self.create_export_status_display(
                    current_channel="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!",
                    progress=100,
                    total_channels=total_channels,
                    completed_channels=completed_channels,
                    total_messages=total_messages,
                    exported_messages=exported_messages,
                    total_size_mb=total_size_mb,
                    errors=errors,
                    channels=selected_channels,
                    current_channel_index=len(selected_channels)
                ))
                
                time.sleep(1)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.console.print(f"[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω![/green]")
            self.console.print(f"[blue]üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(selected_channels)} –∫–∞–Ω–∞–ª–æ–≤, {exported_messages:,} —Å–æ–æ–±—â–µ–Ω–∏–π, {total_size_mb:.1f} –ú–ë[/blue]")
            self.console.print("[yellow]üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã[/yellow]")
                
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
    
    async def export_problematic_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        problematic_channels = []
        for channel in self.channels:
            if (hasattr(channel, 'export_errors') and channel.export_errors > 0) or \
               (hasattr(channel, 'last_check') and not channel.last_check):
                problematic_channels.append(channel)
        
        if not problematic_channels:
            self.console.print("[green]–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/green]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        self.console.print(f"[yellow]–ù–∞–π–¥–µ–Ω–æ {len(problematic_channels)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
        
        if Confirm.ask("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤?"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            await self._export_problematic_channels_with_progress(problematic_channels)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def _export_problematic_channels_with_progress(self, problematic_channels):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_channels = len(problematic_channels)
            completed_channels = 0
            total_messages = sum(channel.total_messages for channel in problematic_channels)
            exported_messages = 0
            total_size_mb = sum(channel.media_size_mb for channel in problematic_channels)
            errors = 0
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω
            with Live(self.create_export_status_display(
                total_channels=total_channels,
                completed_channels=completed_channels,
                total_messages=total_messages,
                exported_messages=exported_messages,
                total_size_mb=total_size_mb,
                errors=errors,
                channels=problematic_channels,
                current_channel_index=-1
            ), refresh_per_second=2, console=self.console) as live:
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
                for i, channel in enumerate(problematic_channels):
                    current_channel = f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {channel.title}"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    live.update(self.create_export_status_display(
                        current_channel=current_channel,
                        progress=0,
                        total_channels=total_channels,
                        completed_channels=completed_channels,
                        total_messages=total_messages,
                        exported_messages=exported_messages,
                        total_size_mb=total_size_mb,
                        errors=errors,
                        channels=problematic_channels,
                        current_channel_index=i
                    ))
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–∞
                    for progress in range(0, 101, 30):
                        live.update(self.create_export_status_display(
                            current_channel=current_channel,
                            progress=progress,
                            total_channels=total_channels,
                            completed_channels=completed_channels,
                            total_messages=total_messages,
                            exported_messages=exported_messages,
                            total_size_mb=total_size_mb,
                            errors=errors,
                            channels=problematic_channels,
                            current_channel_index=i
                        ))
                        time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    completed_channels += 1
                    exported_messages += channel.total_messages
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞
                    live.update(self.create_export_status_display(
                        current_channel=f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {channel.title}",
                        progress=100,
                        total_channels=total_channels,
                        completed_channels=completed_channels,
                        total_messages=total_messages,
                        exported_messages=exported_messages,
                        total_size_mb=total_size_mb,
                        errors=errors,
                        channels=problematic_channels,
                        current_channel_index=i
                    ))
                    
                    time.sleep(0.25)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                live.update(self.create_export_status_display(
                    current_channel="–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!",
                    progress=100,
                    total_channels=total_channels,
                    completed_channels=completed_channels,
                    total_messages=total_messages,
                    exported_messages=exported_messages,
                    total_size_mb=total_size_mb,
                    errors=errors,
                    channels=problematic_channels,
                    current_channel_index=len(problematic_channels)
                ))
                
                time.sleep(1)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.console.print(f"[green]‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω![/green]")
            self.console.print(f"[blue]üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(problematic_channels)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, {exported_messages:,} —Å–æ–æ–±—â–µ–Ω–∏–π, {total_size_mb:.1f} –ú–ë[/blue]")
            self.console.print("[yellow]üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã[/yellow]")
                
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
    
    async def show_settings_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        while True:
            self.console.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config = self.config_manager.config
            
            current_settings_panel = Panel(
                f"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                f"‚Ä¢ Telegram API ID: {config.telegram.api_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ Telegram API Hash: {'*' * 8 if config.telegram.api_hash else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ Bot Token: {'*' * 8 if config.bot.token else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ Chat ID: {config.bot.chat_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ WebDAV URL: {config.webdav.url or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ Export Directory: {config.storage.export_base_dir}\n"
                f"‚Ä¢ First Run: {config.first_run}",
                title="‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                border_style="blue"
            )
            
            settings_panel = Panel(
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n"
                "1. üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n"
                "2. üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API\n"
                "3. ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
                "4. ‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebDAV\n"
                "5. üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è\n"
                "6. üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "7. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "8. üß™ –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                "0. üîô –ù–∞–∑–∞–¥",
                title="‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                border_style="yellow"
            )
            
            self.console.print(current_settings_panel)
            self.console.print(settings_panel)
            
            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                choices=["1", "2", "3", "4", "5", "6", "7", "8", "0"]
            )
            
            if choice == "0":
                break
            
            try:
                if choice == "1":
                    await self.settings_methods.show_config_management()
                elif choice == "2":
                    await self.settings_methods.show_telegram_settings()
                elif choice == "3":
                    await self.settings_methods.show_bot_settings()
                elif choice == "4":
                    await self.settings_methods.show_webdav_settings()
                elif choice == "5":
                    await self.settings_methods.show_storage_settings()
                elif choice == "6":
                    await self.settings_methods.reset_settings()
                elif choice == "7":
                    await self.settings_methods.save_settings()
                elif choice == "8":
                    await self.settings_methods.test_settings()
                    
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_logs_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–æ–≥–æ–≤"""
        self.console.clear()
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
        log_file = Path("export.log")
        if log_file.exists():
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-20:] if len(lines) > 20 else lines
            
            logs_text = "".join(recent_lines)
        else:
            logs_text = "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        logs_panel = Panel(
            logs_text,
            title="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞",
            border_style="blue"
        )
        
        self.console.print(logs_panel)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_enhanced_cli(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π CLI"""
        self.console.clear()
        
        self.console.print("[green]–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...[/green]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π CLI
        await self.simple_cli.run(self.channels, self.stats)
    
    def _get_channels_data(self) -> List[Tuple[Path, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        channels_data = []
        export_base_dir = Path(self.config_manager.config.storage.export_base_dir)
        
        for channel in self.channels:
            channel_dir = export_base_dir / self._sanitize_filename(channel.title)
            if channel_dir.exists():
                channels_data.append((channel_dir, channel.title))
        
        return channels_data
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        import re
        sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
        if len(sanitized) > 100:
            sanitized = sanitized[:100] + "..."
        return sanitized
    
    def create_export_status_display(self, current_channel: str = "", progress: float = 0.0, 
                                   total_channels: int = 0, completed_channels: int = 0,
                                   total_messages: int = 0, exported_messages: int = 0,
                                   total_size_mb: float = 0.0, errors: int = 0,
                                   channels: list = None, current_channel_index: int = -1) -> Layout:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=3)
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_text = Text("üöÄ Telegram Channel Exporter - –≠–∫—Å–ø–æ—Ä—Ç", style="bold magenta")
        header_text.append(" | –°—Ç–∞—Ç—É—Å: –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω", style="bold green")
        if current_channel:
            header_text.append(f" | {current_channel}", style="yellow")
        layout["header"].update(Panel(header_text, box=box.DOUBLE))
        
        # –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª–∏ (2:1)
        layout["main"].split_row(
            Layout(name="left", ratio=2),
            Layout(name="right", ratio=1)
        )
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
        channels_table = self._create_channels_export_table(
            channels or [], current_channel_index, progress
        )
        layout["main"]["left"].update(Panel(channels_table, title="üìã –ö–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", box=box.ROUNDED, expand=True))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –æ–±—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        stats_content = self._create_export_statistics_with_progress(
            total_messages, exported_messages, total_size_mb, errors,
            total_channels, completed_channels, current_channel, progress
        )
        layout["main"]["right"].update(Panel(stats_content, title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å", box=box.ROUNDED))
        
        # –ü–æ–¥–≤–∞–ª
        footer_content = self._create_export_footer_info()
        layout["footer"].update(Panel(footer_content, box=box.ROUNDED))
        
        return layout
    
    def _create_channels_export_table(self, channels: list, current_channel_index: int, progress: float) -> Table:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        table = Table(
            box=box.ROUNDED,
            show_header=True,
            header_style="bold white",
            expand=True,
            min_width=60
        )
        
        table.add_column("‚Ññ", style="cyan", width=3, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green", ratio=3)
        table.add_column("–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö", style="yellow", justify="right", width=12)
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="blue", justify="right", width=10)
        table.add_column("–°—Ç–∞—Ç—É—Å", style="magenta", justify="center", width=12)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        max_visible_rows = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫
        total_channels = len(channels)
        
        if total_channels <= max_visible_rows:
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –º–∞–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
            start_index = 0
            end_index = total_channels
            show_scroll_info = False
        else:
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –º–Ω–æ–≥–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if current_channel_index < 0:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ
                start_index = 0
                end_index = max_visible_rows
            else:
                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
                half_visible = max_visible_rows // 2
                start_index = max(0, current_channel_index - half_visible)
                end_index = min(total_channels, start_index + max_visible_rows)
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
                if end_index - start_index < max_visible_rows:
                    start_index = max(0, end_index - max_visible_rows)
            
            show_scroll_info = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if show_scroll_info:
            table.title = f"üìã –ö–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ({start_index + 1}-{end_index} –∏–∑ {total_channels})"
        else:
            table.title = f"üìã –ö–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ({total_channels})"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤ –≤–∏–¥–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        for i in range(start_index, end_index):
            channel = channels[i]
            display_index = i + 1  # –ù–æ–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Å—Ç—Ä–æ–∫–∏
            if i == current_channel_index:
                # –ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª - –≤—ã–¥–µ–ª—è–µ–º
                row_style = "bold yellow on blue"
            elif i < current_channel_index:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                row_style = "green"
            else:
                # –û–∂–∏–¥–∞—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
                row_style = "dim"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if i < current_channel_index:
                status = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
                status_style = "green"
            elif i == current_channel_index:
                if progress >= 100:
                    status = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
                    status_style = "green"
                else:
                    status = "‚ö° –≠–∫—Å–ø–æ—Ä—Ç"
                    status_style = "yellow"
            else:
                status = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
                status_style = "dim"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            volume = f"{channel.media_size_mb:.1f} –ú–ë" if channel.media_size_mb > 0 else "‚Äî"
            messages = f"{channel.total_messages:,}" if channel.total_messages > 0 else "‚Äî"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            table.add_row(
                str(display_index),
                channel.title,
                volume,
                messages,
                f"[{status_style}]{status}[/{status_style}]",
                style=row_style
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if show_scroll_info and current_channel_index >= 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if current_channel_index < start_index:
                # –ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –≤—ã—à–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
                table.add_row(
                    "‚Üë", 
                    f"[dim]–ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –≤—ã—à–µ (–ø–æ–∑–∏—Ü–∏—è {current_channel_index + 1})[/dim]", 
                    "", "", "", 
                    style="dim"
                )
            elif current_channel_index >= end_index:
                # –ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
                table.add_row(
                    "‚Üì", 
                    f"[dim]–ê–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∏–∂–µ (–ø–æ–∑–∏—Ü–∏—è {current_channel_index + 1})[/dim]", 
                    "", "", "", 
                    style="dim"
                )
        
        return table
    
    def _create_export_statistics_with_progress(self, total_messages: int, exported_messages: int, 
                                             total_size_mb: float, errors: int,
                                             total_channels: int, completed_channels: int,
                                             current_channel: str, progress: float) -> Text:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ–±—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        stats_text = Text()
        
        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        stats_text.append("üéØ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n", style="bold cyan")
        if total_channels > 0:
            progress_percent = (completed_channels / total_channels) * 100
            stats_text.append(f"–ö–∞–Ω–∞–ª–æ–≤: {completed_channels}/{total_channels} ({progress_percent:.1f}%)\n", style="green")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_length = 25
            filled_length = int(bar_length * progress_percent / 100)
            bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
            stats_text.append(f"[{bar}] {progress_percent:.1f}%\n\n", style="green")
        else:
            stats_text.append("–ö–∞–Ω–∞–ª–æ–≤: 0/0 (0.0%)\n\n", style="green")
        
        # –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        if current_channel:
            stats_text.append("‚ö° –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª\n\n", style="bold yellow")
            stats_text.append(f"{current_channel}\n", style="yellow")
            
            # –ü–æ–∑–∏—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–Ω–¥–µ–∫—Å–µ)
            if hasattr(self, '_current_export_index') and self._current_export_index >= 0:
                current_pos = self._current_export_index + 1
                stats_text.append(f"–ü–æ–∑–∏—Ü–∏—è: {current_pos}/{total_channels}\n", style="cyan")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            if progress > 0:
                stats_text.append(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n", style="blue")
                bar_length = 20
                filled_length = int(bar_length * progress / 100)
                bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
                stats_text.append(f"[{bar}] {progress:.1f}%\n\n", style="blue")
        else:
            stats_text.append("‚ö° –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª\n\n", style="bold yellow")
            stats_text.append("–û–∂–∏–¥–∞–Ω–∏–µ...\n\n", style="dim")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        stats_text.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n", style="bold cyan")
        stats_text.append(f"–°–æ–æ–±—â–µ–Ω–∏–π: {exported_messages:,}\n", style="green")
        if total_messages > 0:
            stats_text.append(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_messages:,}\n", style="cyan")
        stats_text.append(f"–î–∞–Ω–Ω—ã—Ö: {total_size_mb:.1f} –ú–ë\n", style="yellow")
        stats_text.append(f"–û—à–∏–±–æ–∫: {errors}\n\n", style="red")
        
        # –°–∫–æ—Ä–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if exported_messages > 0 and total_size_mb > 0:
            stats_text.append("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n", style="bold green")
            stats_text.append("–°–∫–æ—Ä–æ—Å—Ç—å: ~100 —Å–æ–æ–±—â/–º–∏–Ω\n", style="blue")
            stats_text.append("–°–∫–æ—Ä–æ—Å—Ç—å: ~5 –ú–ë/–º–∏–Ω\n", style="blue")
        
        return stats_text
    
    def _create_export_progress_display(self, current_channel: str, progress: float, 
                                      total_channels: int, completed_channels: int) -> Text:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        progress_text = Text()
        
        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_text.append("üéØ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n", style="bold cyan")
        if total_channels > 0:
            progress_percent = (completed_channels / total_channels) * 100
            progress_text.append(f"–ö–∞–Ω–∞–ª–æ–≤: {completed_channels}/{total_channels} ({progress_percent:.1f}%)\n", style="green")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_length = 30
            filled_length = int(bar_length * progress_percent / 100)
            bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
            progress_text.append(f"[{bar}] {progress_percent:.1f}%\n\n", style="green")
        else:
            progress_text.append("–ö–∞–Ω–∞–ª–æ–≤: 0/0 (0.0%)\n\n", style="green")
        
        # –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        if current_channel:
            progress_text.append("‚ö° –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª\n\n", style="bold yellow")
            progress_text.append(f"{current_channel}\n", style="yellow")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            if progress > 0:
                progress_text.append(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n", style="blue")
                bar_length = 20
                filled_length = int(bar_length * progress / 100)
                bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
                progress_text.append(f"[{bar}] {progress:.1f}%\n", style="blue")
        else:
            progress_text.append("‚ö° –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª\n\n", style="bold yellow")
            progress_text.append("–û–∂–∏–¥–∞–Ω–∏–µ...\n", style="dim")
        
        return progress_text
    
    def _create_export_statistics(self, total_messages: int, exported_messages: int, 
                                total_size_mb: float, errors: int) -> Text:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        stats_text = Text()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n", style="bold cyan")
        stats_text.append(f"–°–æ–æ–±—â–µ–Ω–∏–π: {exported_messages:,}\n", style="green")
        if total_messages > 0:
            stats_text.append(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_messages:,}\n", style="cyan")
        stats_text.append(f"–î–∞–Ω–Ω—ã—Ö: {total_size_mb:.1f} –ú–ë\n", style="yellow")
        stats_text.append(f"–û—à–∏–±–æ–∫: {errors}\n\n", style="red")
        
        # –°–∫–æ—Ä–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if exported_messages > 0 and total_size_mb > 0:
            stats_text.append("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n", style="bold green")
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
            stats_text.append("–°–∫–æ—Ä–æ—Å—Ç—å: ~100 —Å–æ–æ–±—â/–º–∏–Ω\n", style="blue")
            stats_text.append("–°–∫–æ—Ä–æ—Å—Ç—å: ~5 –ú–ë/–º–∏–Ω\n", style="blue")
        
        return stats_text
    
    def _create_export_footer_info(self) -> Text:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–≤–∞–ª–∞"""
        footer_text = Text()
        footer_text.append("üöÄ Telegram Channel Exporter v1.2.0", style="bold green")
        footer_text.append(" | ", style="dim")
        footer_text.append("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", style="yellow")
        footer_text.append(" | ", style="dim")
        footer_text.append("‚ö° –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω", style="green")
        return footer_text
    
    async def show_channels_import_export_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        while True:
            self.console.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∫–∞–Ω–∞–ª–æ–≤
            channels_file = self.config_manager.get_channels_file_path()
            file_exists = self.config_manager.channels_file_exists()
            
            info_panel = Panel(
                f"üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
                f"–§–∞–π–ª –∫–∞–Ω–∞–ª–æ–≤: {channels_file}\n"
                f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if file_exists else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels) if self.channels else 0}",
                title="üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö",
                border_style="blue"
            )
            
            menu_panel = Panel(
                "üìÅ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
                "1. üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª\n"
                "2. üì• –ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞\n"
                "3. üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞\n"
                "4. üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
                "5. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
                "6. üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–æ–≤\n"
                "0. üîô –ù–∞–∑–∞–¥",
                title="üìÅ –ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤",
                border_style="green"
            )
            
            self.console.print(info_panel)
            self.console.print(menu_panel)
            
            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                choices=["1", "2", "3", "4", "5", "6", "0"]
            )
            
            if choice == "0":
                break
            
            try:
                if choice == "1":
                    await self.export_channels_to_file()
                elif choice == "2":
                    await self.import_channels_from_file()
                elif choice == "3":
                    await self.reload_channels_from_file()
                elif choice == "4":
                    await self.show_channels_list()
                elif choice == "5":
                    await self.clear_channels_list()
                elif choice == "6":
                    await self.change_channels_file_path()
                    
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_channels_to_file(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        table = Table(title="üì§ –ö–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        table.add_column("‚Ññ", style="cyan", width=3)
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
        table.add_column("Username", style="blue")
        table.add_column("ID", style="yellow")
        
        for i, channel in enumerate(self.channels, 1):
            table.add_row(
                str(i),
                channel.title,
                channel.username or "‚Äî",
                str(channel.id) if channel.id else "‚Äî"
            )
        
        self.console.print(table)
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        default_file = self.config_manager.get_channels_file_path()
        file_path = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
            default=default_file
        )
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ {file_path}?"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            await self._export_channels_with_progress(file_path)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def _export_channels_with_progress(self, file_path: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_channels = len(self.channels)
            completed_channels = 0
            total_messages = sum(channel.total_messages for channel in self.channels)
            exported_messages = 0
            total_size_mb = sum(channel.media_size_mb for channel in self.channels)
            errors = 0
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–∫—Ä–∞–Ω
            with Live(self.create_export_status_display(
                total_channels=total_channels,
                completed_channels=completed_channels,
                total_messages=total_messages,
                exported_messages=exported_messages,
                total_size_mb=total_size_mb,
                errors=errors,
                channels=self.channels,
                current_channel_index=-1
            ), refresh_per_second=2, console=self.console) as live:
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
                for i, channel in enumerate(self.channels):
                    current_channel = f"–≠–∫—Å–ø–æ—Ä—Ç: {channel.title}"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    live.update(self.create_export_status_display(
                        current_channel=current_channel,
                        progress=0,
                        total_channels=total_channels,
                        completed_channels=completed_channels,
                        total_messages=total_messages,
                        exported_messages=exported_messages,
                        total_size_mb=total_size_mb,
                        errors=errors,
                        channels=self.channels,
                        current_channel_index=i
                    ))
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–∞
                    for progress in range(0, 101, 10):
                        live.update(self.create_export_status_display(
                            current_channel=current_channel,
                            progress=progress,
                            total_channels=total_channels,
                            completed_channels=completed_channels,
                            total_messages=total_messages,
                            exported_messages=exported_messages,
                            total_size_mb=total_size_mb,
                            errors=errors,
                            channels=self.channels,
                            current_channel_index=i
                        ))
                        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    completed_channels += 1
                    exported_messages += channel.total_messages
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–Ω–∞–ª–∞
                    live.update(self.create_export_status_display(
                        current_channel=f"–ó–∞–≤–µ—Ä—à–µ–Ω: {channel.title}",
                        progress=100,
                        total_channels=total_channels,
                        completed_channels=completed_channels,
                        total_messages=total_messages,
                        exported_messages=exported_messages,
                        total_size_mb=total_size_mb,
                        errors=errors,
                        channels=self.channels,
                        current_channel_index=i
                    ))
                    
                    time.sleep(0.2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                live.update(self.create_export_status_display(
                    current_channel="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!",
                    progress=100,
                    total_channels=total_channels,
                    completed_channels=completed_channels,
                    total_messages=total_messages,
                    exported_messages=exported_messages,
                    total_size_mb=total_size_mb,
                    errors=errors,
                    channels=self.channels,
                    current_channel_index=len(self.channels)
                ))
                
                time.sleep(1)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
            success = self.config_manager.export_channels(self.channels, file_path)
            if success:
                self.console.print(f"[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {file_path}[/green]")
                self.console.print(f"[blue]üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤, {exported_messages:,} —Å–æ–æ–±—â–µ–Ω–∏–π, {total_size_mb:.1f} –ú–ë[/blue]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞[/red]")
                
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
    
    async def _import_channels_with_progress(self, file_path: str):
        """–ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            with self.console.status(f"[blue]–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ {file_path}...[/blue]", spinner="dots"):
                time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            imported_channels = self.config_manager.import_channels(file_path)
            
            if imported_channels:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                with Live(self.create_import_progress_display(
                    total_channels=len(imported_channels),
                    processed_channels=0
                ), refresh_per_second=2, console=self.console) as live:
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–Ω–∞–ª–æ–≤
                    for i in range(len(imported_channels) + 1):
                        live.update(self.create_import_progress_display(
                            total_channels=len(imported_channels),
                            processed_channels=i
                        ))
                        time.sleep(0.1)
            
            return imported_channels
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}[/red]")
            return []
    
    def create_import_progress_display(self, total_channels: int, processed_channels: int) -> Layout:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=3)
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_text = Text("üì• –ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤", style="bold cyan")
        header_text.append(" | –°—Ç–∞—Ç—É—Å: –ò–º–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω", style="bold green")
        layout["header"].update(Panel(header_text, box=box.DOUBLE))
        
        # –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        progress_text = Text()
        progress_text.append("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞\n\n", style="bold cyan")
        
        if total_channels > 0:
            progress_percent = (processed_channels / total_channels) * 100
            progress_text.append(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_channels}/{total_channels} ({progress_percent:.1f}%)\n", style="green")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_length = 30
            filled_length = int(bar_length * progress_percent / 100)
            bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
            progress_text.append(f"[{bar}] {progress_percent:.1f}%\n\n", style="green")
            
            if processed_channels < total_channels:
                progress_text.append("‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...", style="yellow")
            else:
                progress_text.append("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!", style="green")
        else:
            progress_text.append("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/0 (0.0%)\n", style="green")
            progress_text.append("–û–∂–∏–¥–∞–Ω–∏–µ...", style="dim")
        
        layout["main"].update(Panel(progress_text, title="üì• –ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤", box=box.ROUNDED))
        
        # –ü–æ–¥–≤–∞–ª
        footer_text = Text()
        footer_text.append("üöÄ Telegram Channel Exporter v1.2.0", style="bold green")
        footer_text.append(" | ", style="dim")
        footer_text.append("–ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤", style="cyan")
        layout["footer"].update(Panel(footer_text, box=box.ROUNDED))
        
        return layout
    
    async def import_channels_from_file(self):
        """–ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        self.console.clear()
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        default_file = self.config_manager.get_channels_file_path()
        file_path = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞",
            default=default_file
        )
        
        if not Path(file_path).exists():
            self.console.print(f"[red]‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        imported_channels = await self._import_channels_with_progress(file_path)
        
        if imported_channels:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            table = Table(title="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
            table.add_column("‚Ññ", style="cyan", width=3)
            table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
            table.add_column("Username", style="blue")
            table.add_column("ID", style="yellow")
            
            for i, channel in enumerate(imported_channels, 1):
                table.add_row(
                    str(i),
                    channel.title,
                    channel.username or "‚Äî",
                    str(channel.id) if channel.id else "‚Äî"
                )
            
            self.console.print(table)
            
            if Confirm.ask(f"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ({len(self.channels) if self.channels else 0}) –Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ({len(imported_channels)})?"):
                self.channels = imported_channels
                self.console.print("[green]‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
            else:
                self.console.print("[yellow]–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω[/yellow]")
        else:
            self.console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def reload_channels_from_file(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        self.console.clear()
        
        channels_file = self.config_manager.get_channels_file_path()
        
        if not self.config_manager.channels_file_exists():
            self.console.print(f"[red]‚ùå –§–∞–π–ª –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {channels_file}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ {channels_file}?"):
            imported_channels = self.config_manager.import_channels()
            if imported_channels:
                self.channels = imported_channels
                self.console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(imported_channels)} –∫–∞–Ω–∞–ª–æ–≤[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channels_list(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        table = Table(title=f"üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ({len(self.channels)})", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=3, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green", ratio=2)
        table.add_column("Username", style="blue", width=15)
        table.add_column("ID", style="yellow", width=12)
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="magenta", justify="right", width=10)
        table.add_column("–†–∞–∑–º–µ—Ä (–ú–ë)", style="red", justify="right", width=10)
        table.add_column("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", style="dim", width=15)
        
        total_messages = 0
        total_size = 0.0
        
        for i, channel in enumerate(self.channels, 1):
            messages = channel.total_messages or 0
            size = channel.media_size_mb or 0.0
            last_check = channel.last_check or "–ù–∏–∫–æ–≥–¥–∞"
            
            total_messages += messages
            total_size += size
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            title = channel.title[:40] + "..." if len(channel.title) > 40 else channel.title
            username = (channel.username or "‚Äî")[:12] + "..." if channel.username and len(channel.username) > 12 else (channel.username or "‚Äî")
            last_check_short = last_check[:12] + "..." if len(last_check) > 12 else last_check
            
            table.add_row(
                str(i),
                title,
                username,
                str(channel.id) if channel.id else "‚Äî",
                f"{messages:,}",
                f"{size:.1f}",
                last_check_short
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Ç–æ–≥–∞–º–∏
        table.add_section()
        table.add_row(
            "–ò–¢–û–ì–û:",
            f"{len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤",
            "",
            "",
            f"{total_messages:,}",
            f"{total_size:.1f}",
            ""
        )
        
        self.console.print(table)
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def clear_channels_list(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –ø—É—Å—Ç[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            self.channels = []
            self.console.print("[green]‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ—á–∏—â–µ–Ω[/green]")
        else:
            self.console.print("[yellow]–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞[/yellow]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def change_channels_file_path(self):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        current_path = self.config_manager.get_channels_file_path()
        
        new_path = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–æ–≤",
            default=current_path
        )
        
        if new_path != current_path:
            self.config_manager.config.storage.channels_path = new_path
            self.console.print(f"[green]‚úÖ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω: {new_path}[/green]")
            
            if Confirm.ask("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏?"):
                self.config_manager.save_config()
                self.console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞[/green]")
        else:
            self.console.print("[yellow]–ü—É—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è[/yellow]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_continuous_export_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç[/yellow]")
            self.console.print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç 7 - –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
        info_panel = Panel(
            "üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:\n"
            "‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –î–æ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ MD —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö\n\n"
            "üí° –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C",
            title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            border_style="blue"
        )
        
        menu_panel = Panel(
            "üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç\n"
            "2. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "3. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤\n"
            "4. üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram\n"
            "5. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üîÑ –ú–µ–Ω—é –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞",
            border_style="green"
        )
        
        self.console.print(info_panel)
        self.console.print(menu_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            choices=["1", "2", "3", "4", "5", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.start_continuous_export()
            elif choice == "2":
                await self.show_interval_settings()
            elif choice == "3":
                await self.show_channels_statistics()
            elif choice == "4":
                await self.test_telegram_notifications()
            elif choice == "5":
                await self.add_channel_to_monitoring()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def start_continuous_export(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.console.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_panel = Panel(
            f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥\n"
            f"–ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(self.channels) if self.channels else 0}\n\n"
            f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç:\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ {self.check_interval} —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
            f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ª–æ–≥\n\n"
            f"–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C",
            title="üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞",
            border_style="green"
        )
        
        self.console.print(settings_panel)
        
        if Confirm.ask("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤?"):
            try:
                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
                continuous_exporter = ContinuousExporter(self.console)
                continuous_exporter.check_interval = self.check_interval  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await continuous_exporter.start_continuous_export()
                
            except Exception as e:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channels_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        table = Table(title=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ ({len(self.channels)})", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=3, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green", ratio=2)
        table.add_column("Username", style="blue", width=15)
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right", width=10)
        table.add_column("–†–∞–∑–º–µ—Ä (–ú–ë)", style="magenta", justify="right", width=10)
        table.add_column("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", style="dim", width=15)
        table.add_column("–°—Ç–∞—Ç—É—Å", style="red", width=12, justify="center")
        
        total_messages = 0
        total_size = 0.0
        active_channels = 0
        
        for i, channel in enumerate(self.channels, 1):
            messages = channel.total_messages or 0
            size = channel.media_size_mb or 0.0
            last_check = channel.last_check or "–ù–∏–∫–æ–≥–¥–∞"
            
            total_messages += messages
            total_size += size
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
            if last_check != "–ù–∏–∫–æ–≥–¥–∞":
                active_channels += 1
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                status_style = "green"
            else:
                status = "‚è≥ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
                status_style = "yellow"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            title = channel.title[:35] + "..." if len(channel.title) > 35 else channel.title
            username = (channel.username or "‚Äî")[:12] + "..." if channel.username and len(channel.username) > 12 else (channel.username or "‚Äî")
            last_check_short = last_check[:12] + "..." if len(last_check) > 12 else last_check
            
            table.add_row(
                str(i),
                title,
                username,
                f"{messages:,}",
                f"{size:.1f}",
                last_check_short,
                f"[{status_style}]{status}[/{status_style}]"
            )
        
        self.console.print(table)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        avg_messages = total_messages // len(self.channels) if self.channels else 0
        avg_size = total_size / len(self.channels) if self.channels else 0.0
        inactive_channels = len(self.channels) - active_channels
        
        summary_panel = Panel(
            f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {active_channels}\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {inactive_channels}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages:,}\n"
            f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} –ú–ë\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª: {avg_messages:,}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–∞–ª–∞: {avg_size:.1f} –ú–ë",
            title="üìä –°–≤–æ–¥–∫–∞",
            border_style="blue"
        )
        
        self.console.print(summary_panel)
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def test_telegram_notifications(self):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
        self.console.clear()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        config = self.config_manager.config
        
        if not config.bot.token:
            self.console.print("[red]‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
            self.console.print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç 4 - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí 3. ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if not config.bot.chat_id:
            self.console.print("[red]‚ùå Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
            self.console.print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Chat ID —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç 4 - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí 3. ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_panel = Panel(
            f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>\n"
            f"üîë <b>–¢–æ–∫–µ–Ω:</b> {config.bot.token[:10]}...{config.bot.token[-5:]}\n"
            f"üí¨ <b>Chat ID:</b> {config.bot.chat_id}\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if config.bot.notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
            f"‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {'–í–∫–ª—é—á–µ–Ω' if config.bot.enabled else '–û—Ç–∫–ª—é—á–µ–Ω'}",
            title="üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            border_style="blue"
        )
        
        self.console.print(settings_panel)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        self.console.print(f"[blue]üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:[/blue]")
        self.console.print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if config.bot.token else '‚ùå'}")
        self.console.print(f"   ‚Ä¢ Chat ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if config.bot.chat_id else '‚ùå'}")
        self.console.print(f"   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {'‚úÖ' if config.bot.notifications else '‚ùå'}")
        self.console.print(f"   ‚Ä¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if config.bot.enabled else '‚ùå'}")
        self.console.print(f"   ‚Ä¢ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.config_manager.is_bot_configured() else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        info_panel = Panel(
            "üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram\n\n"
            "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç:\n"
            "‚Ä¢ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ\n"
            "‚Ä¢ –¢–µ—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç —Ä–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!",
            title="üß™ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ",
            border_style="blue"
        )
        
        self.console.print(info_panel)
        
        if not Confirm.ask("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?"):
            self.console.print("[yellow]–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        try:
            # –¢–µ—Å—Ç 1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
            self.console.print("[blue]üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ...[/blue]")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
            test_channel = ChannelInfo(
                id=999999,
                title="üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª",
                username="test_channel",
                last_message_id=1,
                total_messages=100,
                last_check=datetime.now().isoformat(),
                media_size_mb=5.5
            )
            
            success1 = await self.telegram_notifier.send_new_channel_notification(test_channel)
            
            if success1:
                self.console.print("[green]‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ[/red]")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(2)
            
            # –¢–µ—Å—Ç 2: –°–≤–æ–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.console.print("[blue]üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...[/blue]")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–¥–∫–∏
            test_check_results = {
                'total_channels': len(self.channels) if self.channels else 3,
                'checked_channels': len(self.channels) if self.channels else 3,
                'new_messages': 5,
                'channels_with_messages': 2,
                'channels_with_updates': [
                    {'channel': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª 1', 'new_messages': 3},
                    {'channel': '–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª 2', 'new_messages': 2}
                ],
                'check_duration': 2.5,
                'check_interval': self.check_interval
            }
            
            success2 = await self.telegram_notifier.send_continuous_check_summary(test_check_results)
            
            if success2:
                self.console.print("[green]‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏[/red]")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            if success1 and success2:
                result_panel = Panel(
                    "üéâ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
                    "‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n\n"
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
                    title="üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞",
                    border_style="green"
                )
            elif success1 or success2:
                result_panel = Panel(
                    "‚ö†Ô∏è –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ\n\n"
                    f"{'‚úÖ' if success1 else '‚ùå'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ\n"
                    f"{'‚úÖ' if success2 else '‚ùå'} –°–≤–æ–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞!",
                    title="‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞",
                    border_style="yellow"
                )
            else:
                result_panel = Panel(
                    "‚ùå –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –ø—Ä–æ—à–µ–ª\n\n"
                    "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ - –æ—à–∏–±–∫–∞\n"
                    "‚ùå –°–≤–æ–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ—à–∏–±–∫–∞\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É!",
                    title="‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞",
                    border_style="red"
                )
            
            self.console.print(result_panel)
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_interval_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.console.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings_panel = Panel(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval} —Å–µ–∫—É–Ω–¥\n"
            f"–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {self.check_interval} —Å–µ–∫—É–Ω–¥\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:\n"
            f"‚Ä¢ 10-30 —Å–µ–∫—É–Ω–¥ - –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            f"‚Ä¢ 60-300 —Å–µ–∫—É–Ω–¥ - –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            f"‚Ä¢ 600+ —Å–µ–∫—É–Ω–¥ - –¥–ª—è —Ä–µ–¥–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
            title="‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            border_style="blue"
        )
        
        self.console.print(current_settings_panel)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        interval_options = [
            ("10 —Å–µ–∫—É–Ω–¥", 10),
            ("30 —Å–µ–∫—É–Ω–¥", 30),
            ("1 –º–∏–Ω—É—Ç–∞", 60),
            ("5 –º–∏–Ω—É—Ç", 300),
            ("10 –º–∏–Ω—É—Ç", 600),
            ("30 –º–∏–Ω—É—Ç", 1800),
            ("1 —á–∞—Å", 3600),
            ("–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", -1)
        ]
        
        table = Table(title="üìã –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=3, justify="center")
        table.add_column("–ò–Ω—Ç–µ—Ä–≤–∞–ª", style="green")
        table.add_column("–°–µ–∫—É–Ω–¥—ã", style="yellow", justify="right")
        
        for i, (name, seconds) in enumerate(interval_options, 1):
            table.add_row(str(i), name, str(seconds))
        
        self.console.print(table)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            choices=[str(i) for i in range(1, len(interval_options) + 1)]
        )
        
        try:
            choice_index = int(choice) - 1
            if 0 <= choice_index < len(interval_options):
                name, seconds = interval_options[choice_index]
                
                if seconds == -1:  # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    custom_seconds = IntPrompt.ask(
                        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                        default=self.check_interval
                    )
                    if custom_seconds > 0:
                        self.check_interval = custom_seconds
                        self.console.print(f"[green]‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {custom_seconds} —Å–µ–∫—É–Ω–¥[/green]")
                    else:
                        self.console.print("[red]‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0[/red]")
                else:
                    self.check_interval = seconds
                    self.console.print(f"[green]‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {name} ({seconds} —Å–µ–∫—É–Ω–¥)[/green]")
            else:
                self.console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä[/red]")
                
        except (ValueError, IndexError):
            self.console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def add_channel_to_monitoring(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.console.clear()
        
        info_panel = Panel(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n"
            "‚Ä¢ –ü–æ username (@channel_name)\n"
            "‚Ä¢ –ü–æ —Å—Å—ã–ª–∫–µ (https://t.me/channel_name)\n"
            "‚Ä¢ –ü–æ ID –∫–∞–Ω–∞–ª–∞\n\n"
            "–ö–∞–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª .channels –∏ –Ω–∞—á–Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è.",
            title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            border_style="blue"
        )
        
        self.console.print(info_panel)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_input = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ username, —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞")
        
        if not channel_input.strip():
            self.console.print("[red]‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel_id = None
            username = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            if channel_input.startswith('@'):
                username = channel_input[1:]  # –£–±–∏—Ä–∞–µ–º @
            elif channel_input.startswith('https://t.me/'):
                username = channel_input.replace('https://t.me/', '')
            elif channel_input.startswith('t.me/'):
                username = channel_input.replace('t.me/', '')
            elif channel_input.isdigit():
                channel_id = int(channel_input)
            else:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ username –±–µ–∑ @
                username = channel_input
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            self.console.print("[blue]üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ...[/blue]")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            from telegram_exporter import TelegramExporter
            
            temp_exporter = TelegramExporter()
            await temp_exporter.initialize_client(force_reauth=False)
            
            try:
                if channel_id:
                    entity = await temp_exporter.client.get_entity(channel_id)
                else:
                    entity = await temp_exporter.client.get_entity(username)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel_info = {
                    'id': entity.id,
                    'title': entity.title,
                    'username': getattr(entity, 'username', ''),
                    'description': getattr(entity, 'about', ''),
                    'subscribers_count': getattr(entity, 'participants_count', 0),
                    'last_message_id': 0,  # –ù–∞—á–∏–Ω–∞–µ–º —Å 0
                    'last_check': datetime.now().isoformat(),
                    'total_messages': 0,
                    'media_size_mb': 0.0
                }
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel_panel = Panel(
                    f"üì∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_info['title']}\n"
                    f"üîó <b>Username:</b> @{channel_info['username'] if channel_info['username'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üÜî <b>ID:</b> {channel_info['id']}\n"
                    f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {channel_info['subscribers_count']:,}\n"
                    f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {channel_info['description'][:100] if channel_info['description'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}...",
                    title="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ",
                    border_style="green"
                )
                
                self.console.print(channel_panel)
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                if Confirm.ask("–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥?"):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Ñ–∞–π–ª .channels
                    self.config_manager.add_channel_to_file(channel_info)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                    self.channels = self.config_manager.import_channels()
                    
                    self.console.print(f"[green]‚úÖ –ö–∞–Ω–∞–ª '{channel_info['title']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥[/green]")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
                    if self.config_manager.is_bot_configured():
                        from telegram_notifications import TelegramNotifier
                        notifier = TelegramNotifier(self.console)
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ChannelInfo –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        from telegram_exporter import ChannelInfo
                        channel_obj = ChannelInfo(
                            id=channel_info['id'],
                            title=channel_info['title'],
                            username=channel_info['username'],
                            description=channel_info['description'],
                            subscribers_count=channel_info['subscribers_count'],
                            last_message_id=channel_info['last_message_id'],
                            last_check=channel_info['last_check'],
                            total_messages=channel_info['total_messages'],
                            media_size_mb=channel_info['media_size_mb']
                        )
                        
                        await notifier.send_new_channel_notification(channel_obj)
                        self.console.print("[green]‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ[/green]")
                    
                else:
                    self.console.print("[yellow]–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ[/yellow]")
                
            except Exception as e:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}[/red]")
                self.console.print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            
            finally:
                # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                if hasattr(temp_exporter, 'disconnect'):
                    await temp_exporter.disconnect()
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def _show_enhanced_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        from rich.layout import Layout
        from rich.align import Align
        from rich.columns import Columns
        from rich.progress import Progress, BarColumn, TextColumn, TimeElapsedColumn
        from rich.live import Live
        import time
        
        # –°–æ–∑–¥–∞–µ–º layout –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        layout = Layout()
        layout.split_column(
            Layout(name="stats", size=8),
            Layout(name="channels", size=10),
            Layout(name="menu", size=12)
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        total_messages = sum(channel.total_messages for channel in self.channels) if self.channels else 0
        total_size = sum(channel.media_size_mb for channel in self.channels) if self.channels else 0.0
        channels_count = len(self.channels) if self.channels else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        stats_layout = Layout()
        stats_layout.split_row(
            Layout(name="left_stats", ratio=1),
            Layout(name="right_stats", ratio=1)
        )
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        left_stats = Panel(
            f"üìä [bold green]–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞[/bold green]\n\n"
            f"üì∫ [cyan]–ö–∞–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ:[/cyan] [bold]{channels_count}[/bold]\n"
            f"üí¨ [yellow]–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:[/yellow] [bold]{total_messages:,}[/bold]\n"
            f"üìÅ [magenta]–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:[/magenta] [bold]{total_size:.1f} –ú–ë[/bold]\n"
            f"üîÑ [blue]–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç:[/blue] [bold]{self.stats.last_export_time or '–ù–∏–∫–æ–≥–¥–∞'}[/bold]",
            title="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            border_style="green",
            box=box.ROUNDED
        )
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        right_stats = Panel(
            f"‚öôÔ∏è [bold green]–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã[/bold green]\n\n"
            f"‚ùå [red]–û—à–∏–±–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞:[/red] [bold]{self.stats.export_errors}[/bold]\n"
            f"üö´ [orange]–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ:[/orange] [bold]{self.stats.filtered_messages:,}[/bold]\n"
            f"‚úÖ [green]–£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:[/green] [bold]{self.stats.exported_messages:,}[/bold]\n"
            f"üîó [blue]–°—Ç–∞—Ç—É—Å Telegram:[/blue] [bold]{'–ü–æ–¥–∫–ª—é—á–µ–Ω' if hasattr(self, 'client') and self.client else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}[/bold]",
            title="üîß –°–∏—Å—Ç–µ–º–∞",
            border_style="blue",
            box=box.ROUNDED
        )
        
        stats_layout["left_stats"].update(left_stats)
        stats_layout["right_stats"].update(right_stats)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        if self.channels and len(self.channels) > 0:
            channels_table = Table(
                title=f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ({channels_count})", 
                box=box.ROUNDED,
                show_header=True,
                header_style="bold magenta"
            )
            channels_table.add_column("‚Ññ", style="cyan", width=3, justify="center")
            channels_table.add_column("üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ", style="green", min_width=25)
            channels_table.add_column("üí¨ –°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right", width=12)
            channels_table.add_column("üìÅ –†–∞–∑–º–µ—Ä (–ú–ë)", style="magenta", justify="right", width=12)
            channels_table.add_column("üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", style="dim", width=18)
            channels_table.add_column("üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", style="orange1", width=18)
            channels_table.add_column("üìä –°—Ç–∞—Ç—É—Å", style="blue", width=10, justify="center")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –∫–∞–Ω–∞–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            for i, channel in enumerate(self.channels[:8], 1):
                messages = f"{channel.total_messages:,}" if channel.total_messages else "‚Äî"
                size = f"{channel.media_size_mb:.1f}" if channel.media_size_mb else "‚Äî"
                last_check = channel.last_check or "–ù–∏–∫–æ–≥–¥–∞"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                if last_check != "–ù–∏–∫–æ–≥–¥–∞" and len(last_check) > 16:
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(last_check.replace('Z', '+00:00'))
                        last_check = dt.strftime("%d.%m %H:%M")
                    except:
                        last_check = last_check[:13] + "..."
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
                if channel.total_messages > 1000:
                    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
                elif channel.total_messages > 100:
                    status = "üü° –°—Ä–µ–¥–Ω–∏–π"
                elif channel.total_messages > 0:
                    status = "üü† –ú–∞–ª—ã–π"
                else:
                    status = "‚ö™ –ü—É—Å—Ç–æ–π"
                
                # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                title = channel.title[:22] + "..." if len(channel.title) > 25 else channel.title
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                last_message_date = "‚Äî"
                if hasattr(channel, 'last_message_date') and channel.last_message_date:
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(channel.last_message_date.replace('Z', '+00:00'))
                        last_message_date = dt.strftime("%d.%m %H:%M")
                    except:
                        last_message_date = "‚Äî"
                
                channels_table.add_row(
                    str(i),
                    title,
                    messages,
                    size,
                    last_check,
                    last_message_date,
                    status
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Ç–æ–≥–∞–º–∏
            if len(self.channels) > 8:
                channels_table.add_row(
                    "...", 
                    f"[dim]–∏ –µ—â–µ {len(self.channels) - 8} –∫–∞–Ω–∞–ª–æ–≤[/dim]", 
                    "[dim]...[/dim]", 
                    "[dim]...[/dim]", 
                    "[dim]...[/dim]",
                    "[dim]...[/dim]",
                    "[dim]...[/dim]"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            channels_table.add_row(
                "[bold]–ò–¢–û–ì–û[/bold]",
                f"[bold]{channels_count} –∫–∞–Ω–∞–ª–æ–≤[/bold]",
                f"[bold]{total_messages:,}[/bold]",
                f"[bold]{total_size:.1f} –ú–ë[/bold]",
                "[bold]‚Äî[/bold]",
                "[bold]‚Äî[/bold]",
                "[bold]‚Äî[/bold]"
            )
            
            channels_panel = Panel(
                channels_table,
                border_style="cyan",
                box=box.ROUNDED
            )
        else:
            channels_panel = Panel(
                "[yellow]‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã[/yellow]\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–Ω–∫—Ç 7 - –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.",
                title="üìã –ö–∞–Ω–∞–ª—ã",
                border_style="yellow",
                box=box.ROUNDED
            )
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        menu_panel = Panel(
            "üéØ [bold green]–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è[/bold green]\n\n"
            "1. üìä [cyan]–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã[/cyan] - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "2. üó∫Ô∏è [blue]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤[/blue] - –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\n"
            "3. üîÑ [yellow]–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤[/yellow] - –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
            "4. ‚öôÔ∏è [magenta]–ù–∞—Å—Ç—Ä–æ–π–∫–∏[/magenta] - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n"
            "5. üìã [green]–õ–æ–≥–∏[/green] - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã\n"
            "6. üéØ [red]–£–ª—É—á—à–µ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å[/red] - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
            "7. üìÅ [orange]–ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤[/orange] - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º\n"
            "8. üîÑ [purple]–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤[/purple] - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
            "0. üö™ [dim]–í—ã—Ö–æ–¥[/dim] - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            title="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            border_style="green",
            box=box.ROUNDED
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º layout
        layout["stats"].update(stats_layout)
        layout["channels"].update(channels_panel)
        layout["menu"].update(menu_panel)
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞ —ç–∫—Ä–∞–Ω
        self.console.print(layout)
    
    async def _cleanup_resources(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            if hasattr(self, 'client') and self.client:
                self.console.print("[blue]üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...[/blue]")
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                await self.client.disconnect()
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
                await asyncio.sleep(1)
                
                self.console.print("[green]‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω[/green]")
            
            # –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if hasattr(self, 'running'):
                self.running = False
                
        except Exception as e:
            self.console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}[/yellow]")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
should_exit = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global should_exit
    console = Console()
    exporter = None
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        console.print(f"\n[yellow]–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...[/yellow]")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        should_exit = True
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    import signal
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        exporter = EnhancedTelegramExporter()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = Text("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é", style="bold blue")
        welcome_text.append("\nTelegram Channel Exporter", style="bold green")
        
        welcome_panel = Panel(
            f"{welcome_text}\n\n"
            f"üéØ [bold green]–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:[/bold green]\n"
            f"‚Ä¢ üìä [cyan]–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã[/cyan] - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
            f"‚Ä¢ üó∫Ô∏è [blue]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤[/blue] - –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
            f"‚Ä¢ üéØ [yellow]–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å[/yellow] - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –¥–∏–∑–∞–π–Ω\n"
            f"‚Ä¢ üìà [magenta]–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏[/magenta] - JSON, CSV, HTML —Ñ–æ—Ä–º–∞—Ç—ã\n"
            f"‚Ä¢ üîÑ [purple]–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥[/purple] - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
            f"‚Ä¢ ü§ñ [red]–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram[/red] - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º\n\n"
            f"‚ö° [bold]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...[/bold]",
            title="üéâ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
            border_style="green",
            box=box.DOUBLE,
            padding=(1, 2)
        )
        
        console.print(welcome_panel)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        await exporter.initialize()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await exporter.show_enhanced_menu()
        
    except KeyboardInterrupt:
        console.print("\n[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É Telegram –∫–ª–∏–µ–Ω—Ç–∞
        try:
            if 'exporter' in locals() and exporter:
                console.print("[blue]üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Telegram –∫–ª–∏–µ–Ω—Ç–∞...[/blue]")
                await exporter._cleanup_resources()
                console.print("[green]‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω[/green]")
        except Exception as cleanup_error:
            console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {cleanup_error}[/yellow]")
        
        console.print("[green]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")


if __name__ == "__main__":
    asyncio.run(main())