#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram Channel Exporter —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
"""

import asyncio
import sys
import time
import json
from pathlib import Path
from typing import List, Any, Optional, Tuple
from datetime import datetime

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich import box

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
from telegram_exporter import TelegramExporter, ChannelInfo
from config_manager import ConfigManager
from analytics import AnalyticsReporter
from channel_dashboard import ChannelDashboard
from html_reporter import HTMLReporter
from simple_cli import SimpleCLI
from settings_methods import SettingsMethods


class EnhancedTelegramExporter(TelegramExporter):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TelegramExporter —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.analytics_reporter = AnalyticsReporter(self.console)
        self.dashboard = ChannelDashboard(self.console)
        self.html_reporter = HTMLReporter()
        self.simple_cli = SimpleCLI(self.console)
        self.config_manager = ConfigManager()
        self.settings_methods = SettingsMethods(self.console, self.config_manager)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
            await self.initialize_client()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            self.console.print("[green]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...[/green]")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if not self.channels:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞
                if self.config_manager.channels_file_exists():
                    self.console.print("[blue]–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞...[/blue]")
                    imported_channels = self.config_manager.import_channels()
                    if imported_channels:
                        self.channels = imported_channels
                        self.console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(imported_channels)} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞[/green]")
                    else:
                        self.console.print("[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞[/yellow]")
                else:
                    self.console.print("[yellow]–ö–∞–Ω–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.[/yellow]")
            
            self.console.print("[green]‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
            
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
            raise
    
    async def show_enhanced_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.console.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            status_panel = Panel(
                f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(self.channels)}\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç: {self.stats.last_export_time or '–ù–∏–∫–æ–≥–¥–∞'}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats.total_messages:,}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞: {self.stats.export_errors}\n"
                f"‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats.filtered_messages:,}",
                title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                border_style="blue"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            menu_panel = Panel(
                "üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram Channel Exporter\n\n"
                "1. üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n"
                "2. üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
                "3. üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n"
                "4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "5. üìã –õ–æ–≥–∏\n"
                "6. üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
                "7. üìÅ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n"
                "0. üö™ –í—ã—Ö–æ–¥",
                title="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                border_style="green"
            )
            
            self.console.print(status_panel)
            self.console.print(menu_panel)
            
            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                choices=["1", "2", "3", "4", "5", "6", "7", "0", "q", "quit"]
            )
            
            if choice in ["0", "q", "quit"]:
                if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                    break
                continue
            
            try:
                if choice == "1":
                    await self.show_analytics_menu()
                elif choice == "2":
                    await self.show_dashboard()
                elif choice == "3":
                    await self.show_export_menu()
                elif choice == "4":
                    await self.show_settings_menu()
                elif choice == "5":
                    await self.show_logs_menu()
                elif choice == "6":
                    await self.show_enhanced_cli()
                elif choice == "7":
                    await self.show_channels_import_export_menu()
                    
            except KeyboardInterrupt:
                if Confirm.ask("\n–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?"):
                    break
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_analytics_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.console.clear()
        
        analytics_panel = Panel(
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n\n"
            "1. üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "2. üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "3. üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
            "4. üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ JSON\n"
            "5. üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ CSV\n"
            "6. üåê –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ HTML\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            border_style="cyan"
        )
        
        self.console.print(analytics_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            choices=["1", "2", "3", "4", "5", "6", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.show_general_analytics()
            elif choice == "2":
                await self.show_channel_analysis()
            elif choice == "3":
                await self.show_channel_comparison()
            elif choice == "4":
                await self.export_json_report()
            elif choice == "5":
                await self.export_csv_report()
            elif choice == "6":
                await self.export_html_report()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_general_analytics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        self.console.clear()
        
        with self.console.status("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
            time.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        channels_data = self._get_channels_data()
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.analytics_reporter.generate_export_report(self.channels, self.stats)
        self.console.print(report)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channel_analysis(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right")
        
        for i, channel in enumerate(self.channels, 1):
            table.add_row(str(i), channel.title, f"{getattr(channel, 'total_messages', 0):,}")
        
        self.console.print(table)
        
        try:
            choice = IntPrompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞",
                choices=[str(i) for i in range(1, len(self.channels) + 1)]
            )
            
            selected_channel = self.channels[choice - 1]
            
            with self.console.status(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ '{selected_channel.title}'..."):
                time.sleep(2)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª—É
            export_base_dir = Path(self.config_manager.config.storage.export_base_dir)
            channel_dir = export_base_dir / self._sanitize_filename(selected_channel.title)
            
            if channel_dir.exists():
                report = self.analytics_reporter.generate_channel_report(channel_dir, selected_channel.title)
                self.console.print(report)
            else:
                self.console.print(f"[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{selected_channel.title}'[/yellow]")
                
        except (ValueError, IndexError):
            self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channel_comparison(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        with self.console.status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è..."):
            time.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        channels_data = self._get_channels_data()
        
        if len(channels_data) < 2:
            self.console.print("[yellow]–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞)[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = self.analytics_reporter.generate_comparison_report(channels_data)
        self.console.print(report)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_json_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç JSON –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        channels_data = self._get_channels_data()
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        output_file = Path("analytics_report.json")
        self.analytics_reporter.export_analytics_to_json(channels_data, output_file)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_csv_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç CSV –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        channels_data = self._get_channels_data()
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        output_file = Path("analytics_report.csv")
        self.analytics_reporter.export_analytics_to_csv(channels_data, output_file)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_html_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç HTML –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        channels_data = self._get_channels_data()
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML
        output_file = Path("analytics_report.html")
        self.html_reporter.generate_html_report(channels_data, output_file)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_dashboard(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        with self.console.status("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –∫–∞–Ω–∞–ª–æ–≤..."):
            time.sleep(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤
        export_base_dir = Path(self.config_manager.config.storage.export_base_dir)
        self.dashboard.update_channels_status(self.channels, self.stats, export_base_dir)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥
        self.dashboard.show_static_dashboard(self.channels, self.stats, export_base_dir)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_export_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_panel = Panel(
            "üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "1. üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "2. üéØ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
            "3. üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üîÑ –≠–∫—Å–ø–æ—Ä—Ç",
            border_style="green"
        )
        
        self.console.print(export_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞",
            choices=["1", "2", "3", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.export_all_channels()
            elif choice == "2":
                await self.export_selected_channels()
            elif choice == "3":
                await self.export_problematic_channels()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_all_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...[/green]")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            for channel in self.channels:
                self.console.print(f"–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–∞: {channel.title}")
                await self.export_channel(channel)
            
            self.console.print("[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_selected_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", box=box.ROUNDED)
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
        
        for i, channel in enumerate(self.channels, 1):
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if hasattr(channel, 'last_check') and channel.last_check else "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
            table.add_row(str(i), channel.title, status)
        
        self.console.print(table)
        
        selection = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5) –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö"
        )
        
        if selection.lower() == "all":
            selected_channels = self.channels
        else:
            try:
                indices = [int(x.strip()) - 1 for x in selection.split(",")]
                selected_channels = [self.channels[i] for i in indices if 0 <= i < len(self.channels)]
            except (ValueError, IndexError):
                self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
        
        if not selected_channels:
            self.console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(selected_channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...[/green]")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            for channel in selected_channels:
                self.console.print(f"–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–∞: {channel.title}")
                await self.export_channel(channel)
            
            self.console.print("[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_problematic_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        problematic_channels = []
        for channel in self.channels:
            if (hasattr(channel, 'export_errors') and channel.export_errors > 0) or \
               (hasattr(channel, 'last_check') and not channel.last_check):
                problematic_channels.append(channel)
        
        if not problematic_channels:
            self.console.print("[green]–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/green]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        self.console.print(f"[yellow]–ù–∞–π–¥–µ–Ω–æ {len(problematic_channels)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
        
        if Confirm.ask("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤?"):
            self.console.print("[green]–ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞...[/green]")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            for channel in problematic_channels:
                self.console.print(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–∞: {channel.title}")
                await self.export_channel(channel)
            
            self.console.print("[green]‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_settings_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        while True:
            self.console.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config = self.config_manager.config
            
            current_settings_panel = Panel(
                f"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                f"‚Ä¢ Telegram API ID: {config.telegram.api_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ Telegram API Hash: {'*' * 8 if config.telegram.api_hash else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ Bot Token: {'*' * 8 if config.bot.token else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ Chat ID: {config.bot.chat_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ WebDAV URL: {config.webdav.url or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"‚Ä¢ Export Directory: {config.storage.export_base_dir}\n"
                f"‚Ä¢ First Run: {config.first_run}",
                title="‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                border_style="blue"
            )
            
            settings_panel = Panel(
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n"
                "1. üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n"
                "2. üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API\n"
                "3. ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
                "4. ‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebDAV\n"
                "5. üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è\n"
                "6. üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "7. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "8. üß™ –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                "0. üîô –ù–∞–∑–∞–¥",
                title="‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                border_style="yellow"
            )
            
            self.console.print(current_settings_panel)
            self.console.print(settings_panel)
            
            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                choices=["1", "2", "3", "4", "5", "6", "7", "8", "0"]
            )
            
            if choice == "0":
                break
            
            try:
                if choice == "1":
                    await self.settings_methods.show_config_management()
                elif choice == "2":
                    await self.settings_methods.show_telegram_settings()
                elif choice == "3":
                    await self.settings_methods.show_bot_settings()
                elif choice == "4":
                    await self.settings_methods.show_webdav_settings()
                elif choice == "5":
                    await self.settings_methods.show_storage_settings()
                elif choice == "6":
                    await self.settings_methods.reset_settings()
                elif choice == "7":
                    await self.settings_methods.save_settings()
                elif choice == "8":
                    await self.settings_methods.test_settings()
                    
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_logs_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–æ–≥–æ–≤"""
        self.console.clear()
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
        log_file = Path("export.log")
        if log_file.exists():
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-20:] if len(lines) > 20 else lines
            
            logs_text = "".join(recent_lines)
        else:
            logs_text = "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        logs_panel = Panel(
            logs_text,
            title="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞",
            border_style="blue"
        )
        
        self.console.print(logs_panel)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_enhanced_cli(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π CLI"""
        self.console.clear()
        
        self.console.print("[green]–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...[/green]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π CLI
        await self.simple_cli.run(self.channels, self.stats)
    
    def _get_channels_data(self) -> List[Tuple[Path, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        channels_data = []
        export_base_dir = Path(self.config_manager.config.storage.export_base_dir)
        
        for channel in self.channels:
            channel_dir = export_base_dir / self._sanitize_filename(channel.title)
            if channel_dir.exists():
                channels_data.append((channel_dir, channel.title))
        
        return channels_data
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        import re
        sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
        if len(sanitized) > 100:
            sanitized = sanitized[:100] + "..."
        return sanitized
    
    async def show_channels_import_export_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        while True:
            self.console.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∫–∞–Ω–∞–ª–æ–≤
            channels_file = self.config_manager.get_channels_file_path()
            file_exists = self.config_manager.channels_file_exists()
            
            info_panel = Panel(
                f"üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
                f"–§–∞–π–ª –∫–∞–Ω–∞–ª–æ–≤: {channels_file}\n"
                f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if file_exists else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(self.channels) if self.channels else 0}",
                title="üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö",
                border_style="blue"
            )
            
            menu_panel = Panel(
                "üìÅ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
                "1. üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª\n"
                "2. üì• –ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞\n"
                "3. üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞\n"
                "4. üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
                "5. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
                "6. üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–æ–≤\n"
                "0. üîô –ù–∞–∑–∞–¥",
                title="üìÅ –ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤",
                border_style="green"
            )
            
            self.console.print(info_panel)
            self.console.print(menu_panel)
            
            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                choices=["1", "2", "3", "4", "5", "6", "0"]
            )
            
            if choice == "0":
                break
            
            try:
                if choice == "1":
                    await self.export_channels_to_file()
                elif choice == "2":
                    await self.import_channels_from_file()
                elif choice == "3":
                    await self.reload_channels_from_file()
                elif choice == "4":
                    await self.show_channels_list()
                elif choice == "5":
                    await self.clear_channels_list()
                elif choice == "6":
                    await self.change_channels_file_path()
                    
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_channels_to_file(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        table = Table(title="üì§ –ö–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        table.add_column("‚Ññ", style="cyan", width=3)
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
        table.add_column("Username", style="blue")
        table.add_column("ID", style="yellow")
        
        for i, channel in enumerate(self.channels, 1):
            table.add_row(
                str(i),
                channel.title,
                channel.username or "‚Äî",
                str(channel.id) if channel.id else "‚Äî"
            )
        
        self.console.print(table)
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        default_file = self.config_manager.get_channels_file_path()
        file_path = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
            default=default_file
        )
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ {file_path}?"):
            success = self.config_manager.export_channels(self.channels, file_path)
            if success:
                self.console.print(f"[green]‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {file_path}[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def import_channels_from_file(self):
        """–ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        self.console.clear()
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        default_file = self.config_manager.get_channels_file_path()
        file_path = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞",
            default=default_file
        )
        
        if not Path(file_path).exists():
            self.console.print(f"[red]‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
        imported_channels = self.config_manager.import_channels(file_path)
        
        if imported_channels:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            table = Table(title="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
            table.add_column("‚Ññ", style="cyan", width=3)
            table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
            table.add_column("Username", style="blue")
            table.add_column("ID", style="yellow")
            
            for i, channel in enumerate(imported_channels, 1):
                table.add_row(
                    str(i),
                    channel.title,
                    channel.username or "‚Äî",
                    str(channel.id) if channel.id else "‚Äî"
                )
            
            self.console.print(table)
            
            if Confirm.ask(f"–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ({len(self.channels) if self.channels else 0}) –Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ({len(imported_channels)})?"):
                self.channels = imported_channels
                self.console.print("[green]‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
            else:
                self.console.print("[yellow]–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω[/yellow]")
        else:
            self.console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def reload_channels_from_file(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        self.console.clear()
        
        channels_file = self.config_manager.get_channels_file_path()
        
        if not self.config_manager.channels_file_exists():
            self.console.print(f"[red]‚ùå –§–∞–π–ª –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {channels_file}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ {channels_file}?"):
            imported_channels = self.config_manager.import_channels()
            if imported_channels:
                self.channels = imported_channels
                self.console.print(f"[green]‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(imported_channels)} –∫–∞–Ω–∞–ª–æ–≤[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channels_list(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        table = Table(title=f"üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ({len(self.channels)})")
        table.add_column("‚Ññ", style="cyan", width=3)
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
        table.add_column("Username", style="blue")
        table.add_column("ID", style="yellow")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="magenta")
        
        for i, channel in enumerate(self.channels, 1):
            messages = f"{channel.total_messages:,}" if channel.total_messages else "‚Äî"
            table.add_row(
                str(i),
                channel.title,
                channel.username or "‚Äî",
                str(channel.id) if channel.id else "‚Äî",
                messages
            )
        
        self.console.print(table)
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def clear_channels_list(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –ø—É—Å—Ç[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            self.channels = []
            self.console.print("[green]‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ—á–∏—â–µ–Ω[/green]")
        else:
            self.console.print("[yellow]–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞[/yellow]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def change_channels_file_path(self):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        current_path = self.config_manager.get_channels_file_path()
        
        new_path = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–æ–≤",
            default=current_path
        )
        
        if new_path != current_path:
            self.config_manager.config.storage.channels_path = new_path
            self.console.print(f"[green]‚úÖ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–Ω–∞–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω: {new_path}[/green]")
            
            if Confirm.ask("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏?"):
                self.config_manager.save_config()
                self.console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞[/green]")
        else:
            self.console.print("[yellow]–ü—É—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è[/yellow]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console = Console()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        exporter = EnhancedTelegramExporter()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_panel = Panel(
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é Telegram Channel Exporter!\n\n"
            "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n"
            "‚Ä¢ üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "‚Ä¢ üìà –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ JSON/CSV/HTML\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞...",
            title="üéâ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
            border_style="green"
        )
        
        console.print(welcome_panel)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        await exporter.initialize()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await exporter.show_enhanced_menu()
        
    except KeyboardInterrupt:
        console.print("\n[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        console.print("[green]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")


if __name__ == "__main__":
    asyncio.run(main())