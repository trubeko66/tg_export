#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram Channel Exporter —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
"""

import asyncio
import sys
import time
from pathlib import Path
from typing import List, Any, Optional

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
from telegram_exporter import TelegramExporter, ChannelInfo
from config_manager import ConfigManager
from analytics import AnalyticsReporter
from channel_dashboard import ChannelDashboard
from enhanced_cli import EnhancedCLI


class EnhancedTelegramExporter(TelegramExporter):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è TelegramExporter —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.analytics_reporter = AnalyticsReporter(self.console)
        self.dashboard = ChannelDashboard(self.console)
        self.enhanced_cli = EnhancedCLI(self.console)
    
    async def show_enhanced_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.console.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            status_panel = Panel(
                f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(self.channels)}\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç: {self.stats.last_export_time or '–ù–∏–∫–æ–≥–¥–∞'}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats.total_messages:,}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞: {self.stats.export_errors}\n"
                f"‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {self.stats.filtered_messages:,}",
                title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                border_style="blue"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            menu_panel = Panel(
                "üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram Channel Exporter\n\n"
                "1. üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n"
                "2. üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
                "3. üîÑ –û–±—ã—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n"
                "4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "5. üìã –õ–æ–≥–∏\n"
                "6. üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
                "0. üö™ –í—ã—Ö–æ–¥",
                title="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                border_style="green"
            )
            
            self.console.print(status_panel)
            self.console.print(menu_panel)
            
            choice = Prompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                choices=["1", "2", "3", "4", "5", "6", "0", "q", "quit"]
            )
            
            if choice in ["0", "q", "quit"]:
                if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                    break
                continue
            
            try:
                if choice == "1":
                    await self.show_analytics_menu()
                elif choice == "2":
                    await self.show_dashboard()
                elif choice == "3":
                    await self.run_standard_export()
                elif choice == "4":
                    await self.show_settings_menu()
                elif choice == "5":
                    await self.show_logs_menu()
                elif choice == "6":
                    await self.run_enhanced_cli()
                    
            except KeyboardInterrupt:
                if Confirm.ask("\n–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?"):
                    break
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_analytics_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.console.clear()
        
        analytics_panel = Panel(
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n\n"
            "1. üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "2. üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "3. üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
            "4. üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ JSON\n"
            "5. üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ CSV\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            border_style="cyan"
        )
        
        self.console.print(analytics_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            choices=["1", "2", "3", "4", "5", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.show_general_analytics()
            elif choice == "2":
                await self.show_channel_analysis()
            elif choice == "3":
                await self.show_channel_comparison()
            elif choice == "4":
                await self.export_json_report()
            elif choice == "5":
                await self.export_csv_report()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_general_analytics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        self.console.clear()
        
        with self.console.status("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
            time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        channels_data = []
        export_base_dir = Path(self.config.storage.export_base_dir)
        
        for channel in self.channels:
            channel_dir = export_base_dir / self._sanitize_filename(channel.title)
            if channel_dir.exists():
                channels_data.append((channel_dir, channel.title))
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.analytics_reporter.generate_export_report(self.channels, self.stats)
        self.console.print(report)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channel_analysis(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        from rich.table import Table
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", box="rounded")
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°–æ–æ–±—â–µ–Ω–∏–π", style="yellow", justify="right")
        
        for i, channel in enumerate(self.channels, 1):
            table.add_row(str(i), channel.title, f"{getattr(channel, 'total_messages', 0):,}")
        
        self.console.print(table)
        
        try:
            from rich.prompt import IntPrompt
            choice = IntPrompt.ask(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞",
                choices=[str(i) for i in range(1, len(self.channels) + 1)]
            )
            
            selected_channel = self.channels[choice - 1]
            
            with self.console.status(f"–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ '{selected_channel.title}'..."):
                time.sleep(2)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª—É
            export_base_dir = Path(self.config.storage.export_base_dir)
            channel_dir = export_base_dir / self._sanitize_filename(selected_channel.title)
            
            if channel_dir.exists():
                report = self.analytics_reporter.generate_channel_report(channel_dir, selected_channel.title)
                self.console.print(report)
            else:
                self.console.print(f"[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{selected_channel.title}'[/yellow]")
                
        except (ValueError, IndexError):
            self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞[/red]")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_channel_comparison(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        with self.console.status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è..."):
            time.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        channels_data = []
        export_base_dir = Path(self.config.storage.export_base_dir)
        
        for channel in self.channels:
            channel_dir = export_base_dir / self._sanitize_filename(channel.title)
            if channel_dir.exists():
                channels_data.append((channel_dir, channel.title))
        
        if len(channels_data) < 2:
            self.console.print("[yellow]–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞)[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = self.analytics_reporter.generate_comparison_report(channels_data)
        self.console.print(report)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_json_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç JSON –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        channels_data = []
        export_base_dir = Path(self.config.storage.export_base_dir)
        
        for channel in self.channels:
            channel_dir = export_base_dir / self._sanitize_filename(channel.title)
            if channel_dir.exists():
                channels_data.append((channel_dir, channel.title))
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        output_file = Path("analytics_report.json")
        self.analytics_reporter.export_analytics_to_json(channels_data, output_file)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_csv_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç CSV –æ—Ç—á–µ—Ç–∞"""
        self.console.clear()
        
        with self.console.status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –æ—Ç—á–µ—Ç–∞..."):
            time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        channels_data = []
        export_base_dir = Path(self.config.storage.export_base_dir)
        
        for channel in self.channels:
            channel_dir = export_base_dir / self._sanitize_filename(channel.title)
            if channel_dir.exists():
                channels_data.append((channel_dir, channel.title))
        
        if not channels_data:
            self.console.print("[yellow]–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        output_file = Path("analytics_report.csv")
        self.analytics_reporter.export_analytics_to_csv(channels_data, output_file)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_dashboard(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        with self.console.status("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –∫–∞–Ω–∞–ª–æ–≤..."):
            time.sleep(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤
        export_base_dir = Path(self.config.storage.export_base_dir)
        self.dashboard.update_channels_status(self.channels, self.stats, export_base_dir)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥
        self.dashboard.show_static_dashboard(self.channels, self.stats, export_base_dir)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def run_standard_export(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—ã—á–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.console.clear()
        
        if not self.channels:
            self.console.print("[yellow]–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_panel = Panel(
            "üîÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "1. üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "2. üéØ –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
            "3. üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="üîÑ –≠–∫—Å–ø–æ—Ä—Ç",
            border_style="green"
        )
        
        self.console.print(export_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞",
            choices=["1", "2", "3", "0"]
        )
        
        if choice == "0":
            return
        
        try:
            if choice == "1":
                await self.export_all_channels()
            elif choice == "2":
                await self.export_selected_channels()
            elif choice == "3":
                await self.export_problematic_channels()
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}[/red]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_all_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            await self.export_all_channels()
    
    async def export_selected_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        from rich.table import Table
        table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", box="rounded")
        table.add_column("‚Ññ", style="cyan", width=4, justify="center")
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", style="green")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
        
        for i, channel in enumerate(self.channels, 1):
            status = "–ê–∫—Ç–∏–≤–µ–Ω" if hasattr(channel, 'last_check') and channel.last_check else "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
            table.add_row(str(i), channel.title, status)
        
        self.console.print(table)
        
        selection = Prompt.ask(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5) –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö"
        )
        
        if selection.lower() == "all":
            selected_channels = self.channels
        else:
            try:
                indices = [int(x.strip()) - 1 for x in selection.split(",")]
                selected_channels = [self.channels[i] for i in indices if 0 <= i < len(self.channels)]
            except (ValueError, IndexError):
                self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞[/red]")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
        
        if not selected_channels:
            self.console.print("[yellow]–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        if Confirm.ask(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(selected_channels)} –∫–∞–Ω–∞–ª–æ–≤?"):
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            self.console.print("[green]–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω...[/green]")
            # await self.export_channels(selected_channels)
    
    async def export_problematic_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.console.clear()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        problematic_channels = []
        for channel in self.channels:
            if (hasattr(channel, 'export_errors') and channel.export_errors > 0) or \
               (hasattr(channel, 'last_check') and not channel.last_check):
                problematic_channels.append(channel)
        
        if not problematic_channels:
            self.console.print("[green]–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ[/green]")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        self.console.print(f"[yellow]–ù–∞–π–¥–µ–Ω–æ {len(problematic_channels)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤[/yellow]")
        
        if Confirm.ask("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤?"):
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            self.console.print("[green]–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω...[/green]")
            # await self.export_channels(problematic_channels)
    
    async def show_settings_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.console.clear()
        
        settings_panel = Panel(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "1. üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n"
            "2. üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API\n"
            "3. ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
            "4. ‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebDAV\n"
            "5. üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è\n"
            "0. üîô –ù–∞–∑–∞–¥",
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            border_style="yellow"
        )
        
        self.console.print(settings_panel)
        
        choice = Prompt.ask(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            choices=["1", "2", "3", "4", "5", "0"]
        )
        
        if choice == "0":
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.console.print("[yellow]–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_logs_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–æ–≥–æ–≤"""
        self.console.clear()
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
        log_file = Path("export.log")
        if log_file.exists():
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-20:] if len(lines) > 20 else lines
            
            logs_text = "".join(recent_lines)
        else:
            logs_text = "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        logs_panel = Panel(
            logs_text,
            title="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞",
            border_style="blue"
        )
        
        self.console.print(logs_panel)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def run_enhanced_cli(self):
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ CLI"""
        self.console.clear()
        
        self.console.print("[green]–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...[/green]")
        await self.enhanced_cli.run()
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        import re
        sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
        if len(sanitized) > 100:
            sanitized = sanitized[:100] + "..."
        return sanitized


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console = Console()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        exporter = EnhancedTelegramExporter()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_panel = Panel(
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é Telegram Channel Exporter!\n\n"
            "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n"
            "‚Ä¢ üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "‚Ä¢ üìà –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ JSON/CSV\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞...",
            title="üéâ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
            border_style="green"
        )
        
        console.print(welcome_panel)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        await exporter.initialize()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await exporter.show_enhanced_menu()
        
    except KeyboardInterrupt:
        console.print("\n[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
    finally:
        console.print("[green]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")


if __name__ == "__main__":
    asyncio.run(main())
