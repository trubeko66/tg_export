#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""

import asyncio
import requests
from datetime import datetime
from typing import List, Optional
from pathlib import Path

from rich.console import Console

from config_manager import ConfigManager
from telegram_exporter import ChannelInfo


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, console: Console):
        self.console = console
        self.config_manager = ConfigManager()
        self.notification_queue = []
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        return self.config_manager.is_bot_configured()
    
    async def send_new_channel_notification(self, channel: ChannelInfo):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"""
        try:
            if not self.is_configured():
                self.console.print("[yellow]‚ö†Ô∏è Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ[/yellow]")
                return False
            
            message = self._create_new_channel_message(channel)
            success = await self._send_message(message)
            
            if success:
                self.console.print(f"[green]‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {channel.title}[/green]")
            else:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ: {channel.title}[/red]")
            
            return success
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ: {e}[/red]")
            return False
    
    async def send_daily_report(self, report_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            if not self.is_configured():
                self.console.print("[yellow]‚ö†Ô∏è Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥[/yellow]")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É –≤ –ª–æ–≥ —Ñ–∞–π–ª
                self._save_report_to_log(report_data)
                return False
            
            message = self._create_daily_report_message(report_data)
            success = await self._send_message(message)
            
            if success:
                self.console.print("[green]‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏[/red]")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                self._save_report_to_log(report_data)
            
            return success
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}[/red]")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            self._save_report_to_log(report_data)
            return False
    
    async def send_continuous_check_summary(self, check_results: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            if not self.is_configured():
                self.console.print("[yellow]‚ö†Ô∏è Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥[/yellow]")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É –≤ –ª–æ–≥ —Ñ–∞–π–ª
                self._save_continuous_check_to_log(check_results)
                return False
            
            message = self._create_continuous_check_message(check_results)
            success = await self._send_message(message)
            
            if success:
                self.console.print("[green]‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏[/red]")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                self._save_continuous_check_to_log(check_results)
            
            return success
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            self._save_continuous_check_to_log(check_results)
            return False
    
    async def send_error_notification(self, error_message: str, channel_name: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            if not self.is_configured():
                return False
            
            message = self._create_error_message(error_message, channel_name)
            success = await self._send_message(message)
            
            if success:
                self.console.print(f"[green]‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ[/green]")
            else:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ[/red]")
            
            return success
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}[/red]")
            return False
    
    def _create_new_channel_message(self, channel: ChannelInfo) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"""
        try:
            message = f"üÜï –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç–∫—Å–ø–æ—Ä—Ç\n\n"
            message += f"üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: {channel.title}\n"
            
            if hasattr(channel, 'username') and channel.username:
                message += f"üîó Username: @{channel.username}\n"
            
            if hasattr(channel, 'id') and channel.id:
                message += f"üÜî ID: {channel.id}\n"
            
            if hasattr(channel, 'description') and channel.description:
                message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {channel.description[:200]}...\n"
            
            if hasattr(channel, 'subscribers_count') and channel.subscribers_count:
                message += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel.subscribers_count:,}\n"
            
            if hasattr(channel, 'total_messages') and channel.total_messages:
                message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {channel.total_messages:,}\n"
            
            if hasattr(channel, 'media_size_mb') and channel.media_size_mb:
                message += f"üìÅ –†–∞–∑–º–µ—Ä –º–µ–¥–∏–∞: {channel.media_size_mb:.1f} –ú–ë\n"
            
            message += f"\n‚è∞ –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            message += f"üîÑ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞"
            
            return message
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ: {e}[/red]")
            return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ {channel.title}"
    
    def _create_daily_report_message(self, report_data: dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            message = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
            message += f"üìÖ –î–∞—Ç–∞: {report_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {report_data.get('total_channels', 0)}\n"
            message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {report_data.get('checked_channels', 0)}\n"
            message += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {report_data.get('new_messages', 0)}\n"
            message += f"‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {report_data.get('filtered_messages', 0)}\n"
            message += f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {report_data.get('exported_messages', 0)}\n"
            message += f"‚Ä¢ –û—à–∏–±–æ–∫: {report_data.get('errors', 0)}\n\n"
            
            # –ö–∞–Ω–∞–ª—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            channels_with_updates = report_data.get('channels_with_updates', [])
            if channels_with_updates:
                message += f"üîÑ –ö–∞–Ω–∞–ª—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏:\n"
                for channel_info in channels_with_updates:
                    message += f"‚Ä¢ {channel_info.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {channel_info.get('new_messages', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                message += f"‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
            
            # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            message += f"\n‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            return message
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}[/red]")
            return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"
    
    def _create_error_message(self, error_message: str, channel_name: str = "") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤\n\n"
            
            if channel_name:
                message += f"üì∫ –ö–∞–Ω–∞–ª: {channel_name}\n"
            
            message += f"üö® –û—à–∏–±–∫–∞: {error_message}\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            message += f"üîß –î–µ–π—Å—Ç–≤–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            
            return message
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}[/red]")
            return f"–û—à–∏–±–∫–∞: {error_message}"
    
    async def _send_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            config = self.config_manager.config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not config.bot.token:
                self.console.print("[red]‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
                return False
            
            if not config.bot.chat_id:
                self.console.print("[red]‚ùå Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
                return False
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_message = self._clean_message_for_telegram(message)
            
            url = f"https://api.telegram.org/bot{config.bot.token}/sendMessage"
            data = {
                'chat_id': config.bot.chat_id,
                'text': clean_message,
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                return True
            else:
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                error_info = self._parse_telegram_error(response)
                self.console.print(f"[red]‚ùå HTTP {response.status_code}: {error_info}[/red]")
                return False
                
        except requests.exceptions.Timeout:
            self.console.print("[red]‚ùå –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram[/red]")
            return False
        except requests.exceptions.ConnectionError:
            self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API[/red]")
            return False
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}[/red]")
            return False
    
    def _clean_message_for_telegram(self, message: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(message) > 4000:
                clean_message = message[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            else:
                clean_message = message
            
            return clean_message
            
        except Exception as e:
            self.console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}[/yellow]")
            return message[:4000] if len(message) > 4000 else message
    
    def _parse_telegram_error(self, response) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–∫–∏ –æ—Ç Telegram API"""
        try:
            import json
            error_data = response.json()
            
            if 'description' in error_data:
                error_desc = error_data['description']
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
                if 'chat not found' in error_desc.lower():
                    return "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Chat ID –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç."
                elif 'bot was blocked' in error_desc.lower():
                    return "–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ."
                elif 'invalid token' in error_desc.lower():
                    return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
                elif 'chat_id is empty' in error_desc.lower():
                    return "Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞."
                elif 'message is too long' in error_desc.lower():
                    return "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç."
                elif 'parse_mode' in error_desc.lower():
                    return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–≥–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."
                else:
                    return error_desc
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {response.text}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {response.text}"
    
    def _save_report_to_log(self, report_data: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –ª–æ–≥ —Ñ–∞–π–ª"""
        try:
            from datetime import datetime
            log_file = Path("daily_reports.log")
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            report_text = self._create_daily_report_message(report_data)
            
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(f"\n{'='*50}\n")
                f.write(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ - {timestamp}\n")
                f.write(f"{'='*50}\n")
                f.write(report_text)
                f.write(f"\n{'='*50}\n")
            
            self.console.print(f"[blue]üìù –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {log_file}[/blue]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–≥: {e}[/red]")
    
    async def send_test_message(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not self.is_configured():
                self.console.print("[yellow]‚ö†Ô∏è Bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/yellow]")
                return False
            
            message = f"üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            message += f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç\n"
            message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            message += f"ü§ñ <b>Bot:</b> –ù–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω"
            
            success = await self._send_message(message)
            
            if success:
                self.console.print("[green]‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è[/red]")
            
            return success
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}[/red]")
            return False
    
    def add_to_queue(self, message_type: str, data: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            self.notification_queue.append({
                'type': message_type,
                'data': data,
                'timestamp': datetime.now()
            })
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}[/red]")
    
    async def process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            while self.notification_queue:
                notification = self.notification_queue.pop(0)
                
                if notification['type'] == 'new_channel':
                    await self.send_new_channel_notification(notification['data']['channel'])
                elif notification['type'] == 'daily_report':
                    await self.send_daily_report(notification['data'])
                elif notification['type'] == 'error':
                    await self.send_error_notification(
                        notification['data']['error'],
                        notification['data'].get('channel_name', '')
                    )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
                
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}[/red]")
    
    def _create_continuous_check_message(self, check_results: dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            message = f"üîÑ –°–≤–æ–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {current_time}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            total_channels = check_results.get('total_channels', 0)
            checked_channels = check_results.get('checked_channels', 0)
            new_messages = check_results.get('new_messages', 0)
            channels_with_messages = check_results.get('channels_with_messages', 0)
            
            message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
            message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked_channels}\n"
            message += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {new_messages}\n"
            message += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: {channels_with_messages}\n\n"
            
            # –ö–∞–Ω–∞–ª—ã —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            channels_with_updates = check_results.get('channels_with_updates', [])
            if channels_with_updates:
                message += f"üÜï –ö–∞–Ω–∞–ª—ã —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:\n"
                for channel_info in channels_with_updates:
                    channel_name = channel_info.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    new_count = channel_info.get('new_messages', 0)
                    message += f"‚Ä¢ {channel_name}: {new_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                message += f"‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
            
            # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            check_duration = check_results.get('check_duration', 0)
            if check_duration > 0:
                message += f"\n‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_duration:.1f}—Å\n"
            
            # –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            check_interval = check_results.get('check_interval', 30)
            message += f"üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ {check_interval} —Å–µ–∫—É–Ω–¥"
            
            return message
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}[/red]")
            return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    def _save_continuous_check_to_log(self, check_results: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ª–æ–≥"""
        try:
            log_file = Path("continuous_check_reports.log")
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(f"\n=== –°–≤–æ–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - {current_time} ===\n")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                f.write(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {check_results.get('total_channels', 0)}\n")
                f.write(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {check_results.get('checked_channels', 0)}\n")
                f.write(f"–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {check_results.get('new_messages', 0)}\n")
                f.write(f"–ö–∞–Ω–∞–ª–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: {check_results.get('channels_with_messages', 0)}\n")
                
                # –ö–∞–Ω–∞–ª—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                channels_with_updates = check_results.get('channels_with_updates', [])
                if channels_with_updates:
                    f.write("–ö–∞–Ω–∞–ª—ã —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:\n")
                    for channel_info in channels_with_updates:
                        channel_name = channel_info.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        new_count = channel_info.get('new_messages', 0)
                        f.write(f"  - {channel_name}: {new_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n")
                else:
                    f.write("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")
                
                # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                check_duration = check_results.get('check_duration', 0)
                if check_duration > 0:
                    f.write(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_duration:.1f}—Å\n")
                
                f.write("=" * 50 + "\n")
            
            self.console.print(f"[blue]üìù –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥: {log_file}[/blue]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –≤ –ª–æ–≥: {e}[/red]")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
_global_notifier = None

def get_notifier(console: Console = None) -> TelegramNotifier:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global _global_notifier
    if _global_notifier is None and console:
        _global_notifier = TelegramNotifier(console)
    return _global_notifier

def set_notifier(notifier: TelegramNotifier):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global _global_notifier
    _global_notifier = notifier
